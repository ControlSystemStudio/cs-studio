# translation of persistent_classes.po to French
# Myriam Malga <mmalga@redhat.com>, 2007.
# Xi HUANG <xhuang@redhat.com>, 2007.
# Corina Roe <croe@redhat.com>, 2009, 2010.
# translation of Collection_Mapping.po to
msgid ""
msgstr ""
"Project-Id-Version: persistent_classes\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-02-11T05:38:15\n"
"PO-Revision-Date: 2010-01-05 09:39+1000\n"
"Last-Translator: Corina Roe <croe@redhat.com>\n"
"Language-Team: French <i18@redhat.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#, no-c-format
msgid "Persistent Classes"
msgstr "Classes persistantes"

#. Tag: para
#, no-c-format
msgid ""
"Persistent classes are classes in an application that implement the entities "
"of the business problem (e.g. Customer and Order in an E-commerce "
"application). Not all instances of a persistent class are considered to be "
"in the persistent state. For example, an instance can instead be transient "
"or detached."
msgstr ""
"Les classes persistantes sont les classes d'une application qui implémentent "
"les entités d'un problème métier (par ex. Client et Commande dans une "
"application de commerce électronique). Toutes les instances d'une classe "
"persistante ne sont pas forcément dans l'état persistant - en revanche, une "
"instance peut être éphémère (transient) ou détachée."

#. Tag: para
#, no-c-format
msgid ""
"Hibernate works best if these classes follow some simple rules, also known "
"as the Plain Old Java Object (POJO) programming model. However, none of "
"these rules are hard requirements. Indeed, Hibernate3 assumes very little "
"about the nature of your persistent objects. You can express a domain model "
"in other ways (using trees of <literal>Map</literal> instances, for example)."
msgstr ""
"Hibernate fonctionne de manière optimale lorsque ces classes suivent "
"quelques règles simples, aussi connues comme le modèle de programmation "
"Plain Old Java Object (POJO). Cependant, aucune de ces règles ne sont des "
"besoins absolus. En effet, Hibernate3 présuppose très peu de choses à propos "
"de la nature de vos objets persistants. Vous pouvez exprimer un modèle de "
"domaine par d'autres moyens : utiliser des arbres d'instances de "
"<literal>Map</literal>, par exemple."

#. Tag: title
#, no-c-format
msgid "A simple POJO example"
msgstr "Un exemple simple de POJO"

#. Tag: para
#, no-c-format
msgid ""
"Most Java applications require a persistent class representing felines. For "
"example:"
msgstr ""
"Toute bonne application Java nécessite une classe persistante représentant "
"les félins. Par exemple :"

#. Tag: para
#, no-c-format
msgid ""
"The four main rules of persistent classes are explored in more detail in the "
"following sections."
msgstr ""
"On explore quatre règles principales de classes persistantes en détail dans "
"les sections qui suivent :"

#. Tag: title
#, no-c-format
msgid "Implement a no-argument constructor"
msgstr "Implémenter un constructeur sans argument"

#. Tag: para
#, no-c-format
msgid ""
"<literal>Cat</literal> has a no-argument constructor. All persistent classes "
"must have a default constructor (which can be non-public) so that Hibernate "
"can instantiate them using <literal>Constructor.newInstance()</literal>. It "
"is recommended that you have a default constructor with at least "
"<emphasis>package</emphasis> visibility for runtime proxy generation in "
"Hibernate."
msgstr ""
"<literal>Cat</literal> a un constructeur sans argument. Toutes les classes "
"persistantes doivent avoir un constructeur par défaut (lequel peut ne pas "
"être public) pour que Hibernate puisse les instancier en utilisant "
"<literal>Constructor.newInstance()</literal>. Nous recommandons fortement "
"d'avoir un constructeur par défaut avec au moins une visibilité "
"<emphasis>paquetage</emphasis> pour la génération du proxy à l'exécution "
"dans Hibernate. "

#. Tag: title
#, no-c-format
msgid "Provide an identifier property (optional)"
msgstr "Fournir une propriété d'identifiant (optionnel)"

#. Tag: para
#, no-c-format
msgid ""
"<literal>Cat</literal> has a property called <literal>id</literal>. This "
"property maps to the primary key column of a database table. The property "
"might have been called anything, and its type might have been any primitive "
"type, any primitive \"wrapper\" type, <literal>java.lang.String</literal> or "
"<literal>java.util.Date</literal>. If your legacy database table has "
"composite keys, you can use a user-defined class with properties of these "
"types (see the section on composite identifiers later in the chapter.)"
msgstr ""
"<literal>Cat</literal> possède une propriété appelée <literal>id</literal>. "
"Cette propriété mappe la valeur de la colonne de clé primaire de la table "
"d'une base de données. La propriété aurait pu s'appeler autrement, et son "
"type aurait pu être n'importe quel type primitif, n'importe quel "
"\"encapsuleur\" de type primitif, <literal>java.lang.String</literal> ou "
"<literal>java.util.Date</literal>. (Si votre base de données héritée possède "
"des clés composites, elles peuvent être mappées en utilisant une classe "
"définie par l'utilisateur et possédant les propriétés associées aux types de "
"la clé composite - voir la section concernant les identifiants composites "
"ultérieurement). "

#. Tag: para
#, no-c-format
msgid ""
"The identifier property is strictly optional. You can leave them off and let "
"Hibernate keep track of object identifiers internally. We do not recommend "
"this, however."
msgstr ""
"La propriété d'identifiant est strictement optionnelle. Vous pouvez "
"l'oublier et laisser Hibernate s'occuper des identifiants de l'objet en "
"interne. Toutefois, ce n'est pas recommandé. "

#. Tag: para
#, no-c-format
msgid ""
"In fact, some functionality is available only to classes that declare an "
"identifier property:"
msgstr ""
"En fait, quelques fonctionnalités ne sont disponibles que pour les classes "
"déclarant un identifiant de propriété : "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Transitive reattachment for detached objects (cascade update or cascade "
"merge) - see <xref linkend=\"objectstate-transitive\" />"
msgstr ""
"Pour les rattachements transitifs pour les objets détachés (mise à jour en "
"cascade ou fusion en cascade) - consultez <xref linkend=\"objectstate-"
"transitive\" />"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>Session.saveOrUpdate()</literal>"
msgstr "<literal>Session.saveOrUpdate()</literal>"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>Session.merge()</literal>"
msgstr "<literal>Session.merge()</literal>"

#. Tag: para
#, no-c-format
msgid ""
"We recommend that you declare consistently-named identifier properties on "
"persistent classes and that you use a nullable (i.e., non-primitive) type."
msgstr ""
"Nous recommandons que vous déclariez les propriétés d'identifiant de manière "
"uniforme. Nous recommandons également que vous utilisiez un type nullable "
"(c'est-à-dire non primitif). "

#. Tag: title
#, no-c-format
msgid "Prefer non-final classes (optional)"
msgstr "Favoriser les classes non finales (optionnel)"

#. Tag: para
#, no-c-format
msgid ""
"A central feature of Hibernate, <emphasis>proxies</emphasis>, depends upon "
"the persistent class being either non-final, or the implementation of an "
"interface that declares all public methods."
msgstr ""
"Une fonctionnalité clé de Hibernate, les <emphasis>proxies</emphasis>, "
"nécessitent que la classe persistante soit non finale ou qu'elle soit "
"l'implémentation d'une interface qui déclare toutes les méthodes publiques."

#. Tag: para
#, no-c-format
msgid ""
"You can persist <literal>final</literal> classes that do not implement an "
"interface with Hibernate. You will not, however, be able to use proxies for "
"lazy association fetching which will ultimately limit your options for "
"performance tuning."
msgstr ""
"Vous pouvez persister, grâce à Hibernate, les classes <literal>final</"
"literal> qui n'implémentent pas d'interface, mais vous ne pourrez pas "
"utiliser les proxies pour les chargements d'associations paresseux - ce qui "
"limitera vos possibilités d'ajustement des performances. "

#. Tag: para
#, no-c-format
msgid ""
"You should also avoid declaring <literal>public final</literal> methods on "
"the non-final classes. If you want to use a class with a <literal>public "
"final</literal> method, you must explicitly disable proxying by setting "
"<literal>lazy=\"false\"</literal>."
msgstr ""
"Vous devriez aussi éviter de déclarer des méthodes <literal>public final</"
"literal> sur des classes non-finales. Si vous voulez utiliser une classe "
"avec une méthode <literal>public final</literal>, vous devez explicitement "
"désactiver les proxies en paramétrant <literal>lazy=\"false\"</literal>. "

#. Tag: title
#, no-c-format
msgid "Declare accessors and mutators for persistent fields (optional)"
msgstr ""
"Déclarer les accesseurs et mutateurs des attributs persistants (optionnel)"

#. Tag: para
#, no-c-format
msgid ""
"<literal>Cat</literal> declares accessor methods for all its persistent "
"fields. Many other ORM tools directly persist instance variables. It is "
"better to provide an indirection between the relational schema and internal "
"data structures of the class. By default, Hibernate persists JavaBeans style "
"properties and recognizes method names of the form <literal>getFoo</"
"literal>, <literal>isFoo</literal> and <literal>setFoo</literal>. If "
"required, you can switch to direct field access for particular properties."
msgstr ""
"<literal>Cat</literal> déclare des mutateurs pour tous ses champs "
"persistants. Beaucoup d'autres solutions de mappage Objet/relationnel "
"persistent directement les variables d'instance. Nous pensons qu'il est "
"préférable de fournir une indirection entre le schéma relationnel et les "
"structures de données internes de la classe. Par défaut, Hibernate persiste "
"les propriétés suivant le style JavaBean, et reconnaît les noms de méthodes "
"de la forme <literal> getFoo</literal>, <literal>isFoo</literal> et "
"<literal>setFoo</literal>. Vous pouvez changer pour un accès direct aux "
"champs pour des propriétés particulières, si besoin est. "

#. Tag: para
#, no-c-format
msgid ""
"Properties need <emphasis>not</emphasis> be declared public - Hibernate can "
"persist a property with a default, <literal>protected</literal> or "
"<literal>private</literal> get / set pair."
msgstr ""
"Les propriétés <emphasis>n'ont pas</emphasis> à être déclarées publiques - "
"Hibernate peut persister une propriété avec une paire de getter/setter par "
"défault, <literal>protected</literal> ou <literal> private</literal>. "

#. Tag: title
#, no-c-format
msgid "Implementing inheritance"
msgstr "Implémenter l'héritage"

#. Tag: para
#, no-c-format
msgid ""
"A subclass must also observe the first and second rules. It inherits its "
"identifier property from the superclass, <literal>Cat</literal>. For example:"
msgstr ""
"Une sous-classe doit également suivre la première et la seconde règle. Elle "
"hérite sa propriété d'identifiant de la classe mère <literal>Cat</literal>. "
"Par exemple :"

#. Tag: title
#, no-c-format
msgid ""
"Implementing <literal>equals()</literal> and <literal>hashCode()</literal>"
msgstr ""
"Implémenter <literal>equals()</literal> et <literal>hashCode()</literal> "

#. Tag: para
#, no-c-format
msgid ""
"You have to override the <literal>equals()</literal> and <literal>hashCode()"
"</literal> methods if you:"
msgstr ""
"Vous devez surcharger les méthodes <literal>equals()</literal> et "
"<literal>hashCode()</literal> si vous :"

#. Tag: para
#, no-c-format
msgid ""
"intend to put instances of persistent classes in a <literal>Set</literal> "
"(the recommended way to represent many-valued associations); <emphasis>and</"
"emphasis>"
msgstr ""
"avez l'intention de mettre des instances de classes persistantes dans un "
"<literal>Set</literal> (la manière recommandée pour représenter des "
"associations pluri-valuées); <emphasis>et</emphasis>"

#. Tag: para
#, no-c-format
msgid "intend to use reattachment of detached instances"
msgstr "avez l'intention d'utiliser le rattachement d'instances détachées"

#. Tag: para
#, no-c-format
msgid ""
"Hibernate guarantees equivalence of persistent identity (database row) and "
"Java identity only inside a particular session scope. When you mix instances "
"retrieved in different sessions, you must implement <literal>equals()</"
"literal> and <literal>hashCode()</literal> if you wish to have meaningful "
"semantics for <literal>Set</literal>s."
msgstr ""
"Hibernate garantit l'équivalence de l'identité persistante (ligne de base de "
"données) et l'identité Java seulement à l'intérieur de la portée d'une "
"session particulière. Donc dès que nous mélangeons des instances venant de "
"différentes sessions, nous devons implémenter <literal>equals()</literal> et "
"<literal>hashCode()</literal> si nous souhaitons avoir une sémantique "
"correcte pour les <literal>Set</literal> s. "

#. Tag: para
#, no-c-format
msgid ""
"The most obvious way is to implement <literal>equals()</literal>/"
"<literal>hashCode()</literal> by comparing the identifier value of both "
"objects. If the value is the same, both must be the same database row, "
"because they are equal. If both are added to a <literal>Set</literal>, you "
"will only have one element in the <literal>Set</literal>). Unfortunately, "
"you cannot use that approach with generated identifiers. Hibernate will only "
"assign identifier values to objects that are persistent; a newly created "
"instance will not have any identifier value. Furthermore, if an instance is "
"unsaved and currently in a <literal>Set</literal>, saving it will assign an "
"identifier value to the object. If <literal>equals()</literal> and "
"<literal>hashCode()</literal> are based on the identifier value, the hash "
"code would change, breaking the contract of the <literal>Set</literal>. See "
"the Hibernate website for a full discussion of this problem. This is not a "
"Hibernate issue, but normal Java semantics of object identity and equality."
msgstr ""
"La manière la plus évidente est d'implémenter <literal>equals()</literal>/"
"<literal>hashCode()</literal> en comparant la valeur de l'identifiant des "
"deux objets. Si cette valeur est identique, les deux doivent représenter la "
"même ligne de base de données, ils sont donc égaux (si les deux sont ajoutés "
"à un <literal>Set</literal>, nous n'aurons qu'un seul élément dans le "
"<literal>Set</literal>). Malheureusement, nous ne pouvons pas utiliser cette "
"approche avec des identifiants générés ! Hibernate n'assignera de valeur "
"d'identifiant qu'aux objets qui sont persistants, une instance nouvellement "
"créée n'aura donc pas de valeur d'identifiant ! De plus, si une instance est "
"non sauvegardée et actuellement dans un <literal>Set</literal>, le "
"sauvegarder assignera une valeur d'identifiant à l'objet. Si <literal>equals"
"()</literal> et <literal>hashCode()</literal> sont basées sur la valeur de "
"l'identifiant, le code de hachage devrait changer, rompant le contrat du "
"<literal>Set</literal>. Consultez le site web de Hibernate pour des "
"informations plus approfondies. Notez que ceci n'est pas un problème "
"Hibernate, mais concerne la sémantique normale de Java pour l'identité et "
"l'égalité d'un objet. "

#. Tag: para
#, no-c-format
msgid ""
"It is recommended that you implement <literal>equals()</literal> and "
"<literal>hashCode()</literal> using <emphasis>Business key equality</"
"emphasis>. Business key equality means that the <literal>equals()</literal> "
"method compares only the properties that form the business key. It is a key "
"that would identify our instance in the real world (a <emphasis>natural</"
"emphasis> candidate key):"
msgstr ""
"Nous recommandons donc d'implémenter <literal>equals()</literal> et "
"<literal>hashCode()</literal> en utilisant <emphasis> l'égalité par clé "
"métier</emphasis>. L'égalité par clé métier signifie que la méthode "
"<literal>equals()</literal> compare uniquement les propriétés qui forment "
"une clé métier, une clé qui identifierait notre instance dans le monde réel "
"(une clé candidate <emphasis>naturelle</emphasis>) : "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A business key does not have to be as solid as a database primary key "
"candidate (see <xref linkend=\"transactions-basics-identity\" />). Immutable "
"or unique properties are usually good candidates for a business key."
msgstr ""
"Notez qu'une clé métier ne doit pas être solide comme une clé primaire de "
"base de données (voir <xref linkend=\"transactions-basics-identity\" />). "
"Les propriétés immuables ou uniques sont généralement de bonnes candidates "
"pour une clé métier. "

#. Tag: title
#, no-c-format
msgid "Dynamic models"
msgstr "Modèles dynamiques"

#. Tag: title
#, no-c-format
msgid "Note"
msgstr "Remarque"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<emphasis>The following features are currently considered experimental and "
"may change in the near future.</emphasis>"
msgstr ""
"<emphasis>Notez que les fonctionnalités suivantes sont actuellement "
"considérées comme expérimentales et pourront changer dans un futur proche.</"
"emphasis>"

#. Tag: para
#, no-c-format
msgid ""
"Persistent entities do not necessarily have to be represented as POJO "
"classes or as JavaBean objects at runtime. Hibernate also supports dynamic "
"models (using <literal>Map</literal>s of <literal>Map</literal>s at runtime) "
"and the representation of entities as DOM4J trees. With this approach, you "
"do not write persistent classes, only mapping files."
msgstr ""
"Les entités persistantes ne doivent pas nécessairement être représentées "
"comme des classes POJO ou des objets JavaBean à l'exécution. Hibernate "
"supporte aussi les modèles dynamiques (en utilisant des <literal>Map</"
"literal> s de <literal>Map</literal> s à l'exécution) et la représentation "
"des entités comme des arbres DOM4J. Avec cette approche, vous n'écrivez pas "
"de classes persistantes, seulement des fichiers de mappage. "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"By default, Hibernate works in normal POJO mode. You can set a default "
"entity representation mode for a particular <literal>SessionFactory</"
"literal> using the <literal>default_entity_mode</literal> configuration "
"option (see <xref linkend=\"configuration-optional-properties\" />)."
msgstr ""
"Par défaut, Hibernate fonctionne en mode POJO normal. Vous pouvez paramétrer "
"un mode de représentation d'entité par défaut pour une "
"<literal>SessionFactory</literal> particulière en utilisant l'option de "
"configuration <literal>default_entity_mode</literal> (voir <xref linkend="
"\"configuration-optional-properties\" />)."

#. Tag: para
#, no-c-format
msgid ""
"The following examples demonstrate the representation using <literal>Map</"
"literal>s. First, in the mapping file an <literal>entity-name</literal> has "
"to be declared instead of, or in addition to, a class name:"
msgstr ""
"Les exemples suivants démontrent la représentation utilisant des "
"<literal>Map</literal> s. D'abord, dans le fichier de mappage, un "
"<literal>entity-name</literal> doit être déclaré au lieu (ou en plus) d'un "
"nom de classe :"

#. Tag: para
#, no-c-format
msgid ""
"Even though associations are declared using target class names, the target "
"type of associations can also be a dynamic entity instead of a POJO."
msgstr ""
"Notez que même si des associations sont déclarées en utilisant des noms de "
"classe cible, le type de cible d'une association peut aussi être une entité "
"dynamique au lieu d'un POJO. "

#. Tag: para
#, no-c-format
msgid ""
"After setting the default entity mode to <literal>dynamic-map</literal> for "
"the <literal>SessionFactory</literal>, you can, at runtime, work with "
"<literal>Map</literal>s of <literal>Map</literal>s:"
msgstr ""
"Après avoir configuré le mode d'entité par défaut à <literal>dynamic-map</"
"literal> pour la <literal>SessionFactory</literal>, nous pouvons lors de "
"l'exécution fonctionner avec des <literal>Map</literal> s de <literal>Map</"
"literal> s : "

#. Tag: para
#, no-c-format
msgid ""
"One of the main advantages of dynamic mapping is quick turnaround time for "
"prototyping, without the need for entity class implementation. However, you "
"lose compile-time type checking and will likely deal with many exceptions at "
"runtime. As a result of the Hibernate mapping, the database schema can "
"easily be normalized and sound, allowing to add a proper domain model "
"implementation on top later on."
msgstr ""
"Les avantages d'un mappage dynamique sont un gain de temps pour le "
"prototypage sans la nécessité d'implémenter les classes d'entité. Pourtant, "
"vous perdez la vérification du typage au moment de la compilation et aurez "
"plus d'exceptions à gérer lors de l'exécution. Grâce au mappage de "
"Hibernate, le schéma de la base de données peut facilement être normalisé et "
"solidifié, permettant de rajouter une implémentation propre du modèle de "
"domaine plus tard. "

#. Tag: para
#, no-c-format
msgid ""
"Entity representation modes can also be set on a per <literal>Session</"
"literal> basis:"
msgstr ""
"Les modes de représentation d'une entité peuvent aussi être configurés en se "
"basant sur <literal>Session</literal> :"

#. Tag: para
#, no-c-format
msgid ""
"Please note that the call to <literal>getSession()</literal> using an "
"<literal>EntityMode</literal> is on the <literal>Session</literal> API, not "
"the <literal>SessionFactory</literal>. That way, the new <literal>Session</"
"literal> shares the underlying JDBC connection, transaction, and other "
"context information. This means you do not have to call <literal>flush()</"
"literal> and <literal>close()</literal> on the secondary <literal>Session</"
"literal>, and also leave the transaction and connection handling to the "
"primary unit of work."
msgstr ""
"Veuillez noter que l'appel à <literal>getSession()</literal> en utilisant un "
"<literal>EntityMode</literal> se fait sur l'API <literal>Session</literal>, "
"et non sur <literal>SessionFactory</literal>. De cette manière, la nouvelle "
"<literal>Session</literal> partage les connexions JDBC, transactions et "
"autres informations de contexte sous-jacentes. Cela signifie que vous n'avez "
"pas à appeler <literal>flush()</literal> et <literal>close()</literal> sur "
"la <literal>Session</literal> secondaire, et laissez aussi la gestion de la "
"transaction et de la connexion à l'unité de travail primaire. "

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"More information about the XML representation capabilities can be found in "
"<xref linkend=\"xml\" />."
msgstr ""
"Pour plus d'informations à propos de la représentation XML, veuillez "
"consulter <xref linkend=\"xml\" />."

#. Tag: title
#, no-c-format
msgid "Tuplizers"
msgstr "Tuplizers"

#. Tag: para
#, no-c-format
msgid ""
"<literal>org.hibernate.tuple.Tuplizer</literal>, and its sub-interfaces, are "
"responsible for managing a particular representation of a piece of data "
"given that representation's <literal>org.hibernate.EntityMode</literal>. If "
"a given piece of data is thought of as a data structure, then a tuplizer is "
"the thing that knows how to create such a data structure and how to extract "
"values from and inject values into such a data structure. For example, for "
"the POJO entity mode, the corresponding tuplizer knows how create the POJO "
"through its constructor. It also knows how to access the POJO properties "
"using the defined property accessors."
msgstr ""
"<literal>org.hibernate.tuple.Tuplizer</literal>, et ses sous-interfaces, "
"sont responsables de la gestion d'une représentation particulière d'un "
"fragment de données, en fonction du <literal>org.hibernate.EntityMode</"
"literal> de représentation. Si un fragment donné de données est considéré "
"comme une structure de données, alors un tuplizer sait comment créer une "
"telle structure de données, comment extraire des valeurs et injecter des "
"valeurs dans une telle structure de données. Par exemple, pour le mode "
"d'entité POJO, le tuplizer correspondant sait comment créer le POJO à "
"travers son constructeur et comment accéder aux propriétés du POJO utilisant "
"les accesseurs de la propriété définie. "

#. Tag: para
#, no-c-format
msgid ""
"There are two high-level types of Tuplizers, represented by the <literal>org."
"hibernate.tuple.entity.EntityTuplizer</literal> and <literal>org.hibernate."
"tuple.component.ComponentTuplizer</literal> interfaces. "
"<literal>EntityTuplizer</literal>s are responsible for managing the above "
"mentioned contracts in regards to entities, while "
"<literal>ComponentTuplizer</literal>s do the same for components."
msgstr ""
"Il y a deux types de Tuplizers de haut niveau, représentés par les "
"interfaces <literal>org.hibernate.tuple.EntityTuplizer</literal> et "
"<literal>org.hibernate.tuple.ComponentTuplizer</literal>. Les "
"<literal>EntityTuplizer</literal> s sont responsables de la gestion des "
"contrats mentionnés ci-dessus pour les entités, alors que les "
"<literal>ComponentTuplizer</literal> s s'occupent des composants."

#. Tag: para
#, no-c-format
msgid ""
"Users can also plug in their own tuplizers. Perhaps you require that a "
"<literal>java.util.Map</literal> implementation other than <literal>java."
"util.HashMap</literal> be used while in the dynamic-map entity-mode. Or "
"perhaps you need to define a different proxy generation strategy than the "
"one used by default. Both would be achieved by defining a custom tuplizer "
"implementation. Tuplizer definitions are attached to the entity or component "
"mapping they are meant to manage. Going back to the example of our customer "
"entity:"
msgstr ""
"Les utilisateurs peuvent aussi brancher leurs propres tuplizers. Il vous "
"faudra peut-être utiliser une implémentation de <literal>java.util.Map</"
"literal> autre que <literal>java.util.HashMap</literal> dans le mode "
"d'entité dynamic-map ; ou peut-être aurez vous besoin de définir une "
"stratégie de génération de proxy différente de celle utilisée par défaut. "
"Les deux devraient être effectuées en définissant une implémentation de "
"tuplizer utilisateur. Les définitions de tuplizers sont attachées au mappage "
"de l'entité ou du composant qu'ils devraient gérer. Revenons à l'exemple de "
"notre entité utilisateur : "

#. Tag: title
#, no-c-format
msgid "EntityNameResolvers"
msgstr "EntityNameResolvers"

#. Tag: para
#, no-c-format
msgid ""
"The <interfacename>org.hibernate.EntityNameResolver</interfacename> "
"interface is a contract for resolving the entity name of a given entity "
"instance. The interface defines a single method "
"<methodname>resolveEntityName</methodname> which is passed the entity "
"instance and is expected to return the appropriate entity name (null is "
"allowed and would indicate that the resolver does not know how to resolve "
"the entity name of the given entity instance). Generally speaking, an "
"<interfacename>org.hibernate.EntityNameResolver</interfacename> is going to "
"be most useful in the case of dynamic models. One example might be using "
"proxied interfaces as your domain model. The hibernate test suite has an "
"example of this exact style of usage under the <package>org.hibernate.test."
"dynamicentity.tuplizer2</package>. Here is some of the code from that "
"package for illustration."
msgstr ""
"L'interface <interfacename>org.hibernate.EntityNameResolver</interfacename> "
"représente un contrat pour résoudre le nom de l'entité d'une instance "
"d'entité donnée. L'interface définit une méthode simple "
"<methodname>resolveEntityName</methodname>, à qui l'on passe l'instance "
"d'entité et qui doit retourner le nom d'entité qui convient (null est "
"accepté et indiquerait que le resolver ne sait pas comment résoudre le nom "
"de l'entité de l'instance d'entité donnée). Normalement, un "
"<interfacename>org.hibernate.EntityNameResolver</interfacename> est surtout "
"utile pour les modèles dynamiques. Vous pourriez, par exemple, utiliser des "
"interfaces proxy comme modèle de domaine. La suite de test Hibernate "
"comprend un exemple de ce style précis d'utilisation dans <package>org."
"hibernate.test.dynamicentity.tuplizer2</package>. Vous trouverez ci dessous "
"une illustration du code de ce package."

#. Tag: para
#, no-c-format
msgid ""
"In order to register an <interfacename>org.hibernate.EntityNameResolver</"
"interfacename> users must either:"
msgstr ""
"Pour enregistrer un <interfacename>org.hibernate.EntityNameResolver</"
"interfacename>, les utilisateurs doivent soit :"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Implement a custom <link linkend=\"persistent-classes-tuplizers\">Tuplizer</"
"link>, implementing the <methodname>getEntityNameResolvers</methodname> "
"method."
msgstr ""
"Implémenter un <xref linkend=\"persistent-classes-tuplizers\" /> "
"personnalisé, en implémentant la méthode <methodname>getEntityNameResolvers</"
"methodname>."

#. Tag: para
#, no-c-format
msgid ""
"Register it with the <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (which is the implementation class for <interfacename>org."
"hibernate.SessionFactory</interfacename>) using the "
"<methodname>registerEntityNameResolver</methodname> method."
msgstr ""
"L'enregistrer dans <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (qui est la classe d'implémentation de <interfacename>org."
"hibernate.SessionFactory</interfacename>) à l'aide de la méthode "
"<methodname>registerEntityNameResolver</methodname>."
