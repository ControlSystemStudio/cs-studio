# translation of portability.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2006.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# Michael H. Smith <mhideo@redhat.com>, 2007.
# Glaucia Cintra <gcintra@redhat.com>, 2007.
msgid ""
msgstr ""
"Project-Id-Version: portability\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-03-25 06:26+0000\n"
"PO-Revision-Date: 2010-03-18 15:20+1000\n"
"Last-Translator: \n"
"Language-Team:  <en@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: portability.xml:31
#, no-c-format
msgid "Database Portability Considerations"
msgstr "Considerações da Portabilidade do Banco de Dados"

#. Tag: title
#: portability.xml:34
#, no-c-format
msgid "Portability Basics"
msgstr "Fundamentos da Portabilidade"

#. Tag: para
#: portability.xml:36
#, no-c-format
msgid ""
"One of the selling points of Hibernate (and really Object/Relational Mapping "
"as a whole) is the notion of database portability. This could mean an "
"internal IT user migrating from one database vendor to another, or it could "
"mean a framework or deployable application consuming Hibernate to "
"simultaneously target multiple database products by their users. Regardless "
"of the exact scenario, the basic idea is that you want Hibernate to help you "
"run against any number of databases without changes to your code, and "
"ideally without any changes to the mapping metadata."
msgstr ""
"Um dos pontos de venda do Hibernate (e realmente Mapeamento do Objeto/"
"Relacional como um conjunto) é a noção da portabilidade do banco de dados. "
"Isto pode significar um usuário de TI interno migrando a partir de um "
"fornecedor de banco de dados a outro, ou isto pode significar que um "
"framework ou aplicativo implementável consumindo o Hibernate para produtos "
"de banco de dados múltiplos de destinação simultaneamente pelos usuários. "
"Independente do cenário exato, a idéia básica é que você queira que o "
"Hibernate o ajude a rodar em referência a qualquer número de banco de dados "
"sem as alterações a seu código e preferencialmente sem quaisquer alterações "
"ao metadados de mapeamento."

#. Tag: title
#: portability.xml:47
#, no-c-format
msgid "Dialect"
msgstr "Dialeto"

#. Tag: para
#: portability.xml:49
#, no-c-format
msgid ""
"The first line of portability for Hibernate is the dialect, which is a "
"specialization of the <classname>org.hibernate.dialect.Dialect</classname> "
"contract. A dialect encapsulates all the differences in how Hibernate must "
"communicate with a particular database to accomplish some task like getting "
"a sequence value or structuring a SELECT query. Hibernate bundles a wide "
"range of dialects for many of the most popular databases. If you find that "
"your particular database is not among them, it is not terribly difficult to "
"write your own."
msgstr ""
"A primeira linha de portabilidade para o Hibernate é o dialeto, que trata-se "
"de uma especialização de um contrato <classname>org.hibernate.dialect."
"Dialect</classname>. Um dialeto encapsula todas as diferenças em como o "
"Hibernate deve comunicar-se com um banco de dados particular para completar "
"algumas tarefas como obter um valor de seqüência ou estruturar uma consulta "
"SELECT. O Hibernate vincula uma variedade de dialetos para muitos dos bancos "
"de dados mais populares. Se você achar que seu banco de dados particular não "
"está seguindo os mesmos, não será difícil escrever o seu próprio."

#. Tag: title
#: portability.xml:60
#, no-c-format
msgid "Dialect resolution"
msgstr "Resolução do Dialeto"

#. Tag: para
#: portability.xml:62
#, no-c-format
msgid ""
"Originally, Hibernate would always require that users specify which dialect "
"to use. In the case of users looking to simultaneously target multiple "
"databases with their build that was problematic. Generally this required "
"their users to configure the Hibernate dialect or defining their own method "
"of setting that value."
msgstr ""
"Originalmente, o Hibernate sempre solicita que os usuários especifiquem qual "
"dialeto a ser usado. No caso dos usuários buscarem banco de dados múltiplos "
"de destinação simultaneamente com as próprias construções que eram "
"problemáticas. Normalmente, isto solicita que seus próprios usuários "
"configurem o dialeto do Hibernate ou definam o próprio método de "
"determinação do valor."

#. Tag: para
#: portability.xml:69
#, no-c-format
msgid ""
"Starting with version 3.2, Hibernate introduced the notion of automatically "
"detecting the dialect to use based on the <interfacename>java.sql."
"DatabaseMetaData</interfacename> obtained from a <interfacename>java.sql."
"Connection</interfacename> to that database. This was much better, expect "
"that this resolution was limited to databases Hibernate know about ahead of "
"time and was in no way configurable or overrideable."
msgstr ""
"Inicializando com a versão 3.2, o Hibernate introduziu a noção de detecção "
"automática do dialeto para uso baseado no <interfacename>java.sql."
"DatabaseMetaData</interfacename> obtido a partir de um <interfacename>java."
"sql.Connection</interfacename> para aquele banco de dados. Era muito melhor, "
"esperar que esta resolução limitada aos bancos de dados Hibernate soubesse "
"com antecedência e que em ocasião alguma era configurável ou substituível."

#. Tag: para
#: portability.xml:77
#, fuzzy, no-c-format
msgid ""
"Starting with version 3.3, Hibernate has a fare more powerful way to "
"automatically determine which dialect to should be used by relying on a "
"series of delegates which implement the <interfacename>org.hibernate.dialect."
"resolver.DialectResolver</interfacename> which defines only a single method:"
"<programlisting role=\"JAVA\"><![CDATA[public Dialect resolveDialect"
"(DatabaseMetaData metaData) throws JDBCConnectionException]]></"
"programlisting>. The basic contract here is that if the resolver "
"'understands' the given database metadata then it returns the corresponding "
"Dialect; if not it returns null and the process continues to the next "
"resolver. The signature also identifies <exceptionname>org.hibernate."
"exception.JDBCConnectionException</exceptionname> as possibly being thrown. "
"A JDBCConnectionException here is interpreted to imply a \"non transient"
"\" (aka non-recoverable) connection problem and is used to indicate an "
"immediate stop to resolution attempts. All other exceptions result in a "
"warning and continuing on to the next resolver."
msgstr ""
"Inicializando com a versão 3.3, o Hibernate possui uma maneira muito mais "
"potente para determinar automaticamente qual dialeto deve ser usado baseando-"
"se numa série de delegações que determinam qual implementação deve ser usada "
"baseando-se numa série de delegações que implementam o <interfacename>org."
"hibernate.dialect.resolver.DialectResolver</interfacename> que define apenas "
"um método único: <programlisting role=\"JAVA\">public Dialect resolveDialect"
"(DatabaseMetaData metaData) throws JDBCConnectionException</programlisting>. "
"Este contrato básico é que se o solucionador 'entender' o metadados do banco "
"de dados dado, ele retornará o Dialeto correspondente. Caso contrário, ele "
"retornará nulo e o processo continuará ao próximo solucionador. A assinatura "
"também identifica o <exceptionname>org.hibernate.exception."
"JDBCConnectionException</exceptionname> como possivelmente lançado. Neste "
"caso, o JDBCConnectionException é interpretado para implicar um problema de "
"conexão (também conhecida com não-recuperável) \"não transiente\" e é usado "
"para indicar uma parada imediata de tentativas de resolução. Todas as demais "
"exceções resultam num aviso e dão continuidade ao próximo solucionador. "

#. Tag: para
#: portability.xml:90
#, no-c-format
msgid ""
"The cool part about these resolvers is that users can also register their "
"own custom resolvers which will be processed ahead of the built-in Hibernate "
"ones. This might be useful in a number of different situations: it allows "
"easy integration for auto-detection of dialects beyond those shipped with "
"HIbernate itself; it allows you to specify to use a custom dialect when a "
"particular database is recognized; etc. To register one or more resolvers, "
"simply specify them (seperated by commas, tabs or spaces) using the "
"'hibernate.dialect_resolvers' configuration setting (see the "
"<constant>DIALECT_RESOLVERS</constant> constant on <classname>org.hibernate."
"cfg.Environment</classname>)."
msgstr ""
"A melhor parte destes solucionadores é que os usuários também podem "
"registrar os seus próprios solucionadores personalizados dos quais serão "
"processados antes dos Hibernates internos. Isto poderá ser útil em um número "
"diferente de situações: permite uma integração fácil de auto-detecção de "
"dialetos além daqueles lançados com o próprio Hibernate. Além disto, permite "
"que você especifique o uso de um dialeto personalizado quando um banco de "
"dados particular é reconhecido, etc. Para registrar um ou mais "
"solucionadores, apenas especifique-os (separados por vírgula, tabs ou "
"espaços) usando o conjunto de configuração 'hibernate."
"dialect_resolvers' (consulte a constante <constant>DIALECT_RESOLVERS</"
"constant> no <classname>org.hibernate.cfg.Environment</classname>)."

#. Tag: title
#: portability.xml:103
#, no-c-format
msgid "Identifier generation"
msgstr "Geração do identificador"

#. Tag: para
#: portability.xml:105
#, fuzzy, no-c-format
msgid ""
"When considering portability between databases, another important decision "
"is selecting the identifier generation stratagy you want to use. Originally "
"Hibernate provided the <emphasis>native</emphasis> generator for this "
"purpose, which was intended to select between a <emphasis>sequence</"
"emphasis>, <emphasis>identity</emphasis>, or <emphasis>table</emphasis> "
"strategy depending on the capability of the underlying database. However, an "
"insidious implication of this approach comes about when targtetting some "
"databases which support <emphasis>identity</emphasis> generation and some "
"which do not. <emphasis>identity</emphasis> generation relies on the SQL "
"definition of an IDENTITY (or auto-increment) column to manage the "
"identifier value; it is what is known as a post-insert generation strategy "
"becauase the insert must actually happen before we can know the identifier "
"value. Because Hibernate relies on this identifier value to uniquely "
"reference entities within a persistence context it must then issue the "
"insert immediately when the users requests the entitiy be associated with "
"the session (like via save() e.g.) regardless of current transactional "
"semantics. <note> <para> Hibernate was changed slightly once the implication "
"of this was better understood so that the insert is delayed in cases where "
"that is feasible. </para> </note> The underlying issue is that the actual "
"semanctics of the application itself changes in these cases."
msgstr ""
"Quando considerando a portabilidade entre os bancos de dados, outra "
"importante decisão é selecionar a estratégia de geração do identificador que "
"você deseja usar. Originalmente, o Hibernate fornecia o gerador "
"<emphasis>nativo</emphasis> para este propósito, que intencionava selecionar "
"entre uma estratégia de <emphasis>seqüência</emphasis>, "
"<emphasis>identidade</emphasis> ou <emphasis>tabela</emphasis> dependendo da "
"capacidade do banco de dados adjacente. No entanto, uma implicação insidiosa "
"desta abordagem vêem quando destinando alguns bancos de dados que suportam a "
"geração de identidade e outros que não suportam. A geração "
"<emphasis>identidade</emphasis> baseia-se na definição de uma coluna (ou "
"auto-incremento) IDENTITY para gerenciar o valor identificador. Isto é "
"conhecido como estratégia de geração pós-inserção devido à inserção ter que "
"ocorrer antes que nós possamos conhecer o valor identificador. Devido ao "
"Hibernate depender neste valor identificador para unicamente referenciar "
"entidades com um contexto persistente, ele deverá imprimir a inserção "
"imediatamente quando as solicitações dos usuários de entidade estiverem "
"associados com a sessão (como através save() e.g.) independente das "
"semânticas de transação atual. "

#. Tag: para
#: portability.xml:130
#, no-c-format
msgid ""
"Starting with version 3.2.3, Hibernate comes with a set of <ulink url="
"\"http://in.relation.to/2082.lace\">enhanced</ulink> identifier generators "
"targetting portability in a much different way. <note> <para> There are "
"specifically 2 bundled <emphasis>enhanced</emphasis>generators: "
"<itemizedlist> <listitem> <para> <classname>org.hibernate.id.enhanced."
"SequenceStyleGenerator</classname> </para> </listitem> <listitem> <para> "
"<classname>org.hibernate.id.enhanced.TableGenerator</classname> </para> </"
"listitem> </itemizedlist> </para> </note> The idea behind these generators "
"is to port the actual semantics of the identifer value generation to the "
"different databases. For example, the <classname>org.hibernate.id.enhanced."
"SequenceStyleGenerator</classname> mimics the behavior of a sequence on "
"databases which do not support sequences by using a table."
msgstr ""

#. Tag: title
#: portability.xml:159
#, no-c-format
msgid "Database functions"
msgstr "Funções do banco de dados"

#. Tag: para
#: portability.xml:162
#, no-c-format
msgid ""
"This is an area in Hibernate in need of improvement. In terms of portability "
"concerns, this function handling currently works pretty well from HQL; "
"however, it is quite lacking in all other aspects."
msgstr ""
"Esta é uma área do Hibernate com necessidade de melhoramentos. Este manuseio "
"de função funciona atualmente muito bem com o HQL, quando falamos das "
"preocupações de portabilidade. No entanto, é bastante precária em outros "
"aspectos."

#. Tag: para
#: portability.xml:169
#, no-c-format
msgid ""
"SQL functions can be referenced in many ways by users. However, not all "
"databases support the same set of functions. Hibernate, provides a means of "
"mapping a <emphasis>logical</emphasis> function name to a delegate which "
"knows how to render that particular function, perhaps even using a totally "
"different physical function call."
msgstr ""
"As funções SQL podem ser referenciadas em diversas maneiras pelos usuários. "
"No entanto, nem todos os bancos de dados suportam o mesmo conjunto de "
"função. O Hibernate fornece um significado de mapeamento do nome da função "
"<emphasis>lógica</emphasis> para uma delegação que sabe como manusear aquela "
"função em particular, mesmo quando usando uma chamada de função física "
"totalmente diferente."

#. Tag: para
#: portability.xml:175
#, no-c-format
msgid ""
"Technically this function registration is handled through the <classname>org."
"hibernate.dialect.function.SQLFunctionRegistry</classname> class which is "
"intended to allow users to provide custom function definitions without "
"having to provide a custom dialect. This specific behavior is not fully "
"completed as of yet."
msgstr ""
"Technically this function registration is handled through the <classname>org."
"hibernate.dialect.function.SQLFunctionRegistry</classname> class which is "
"intended to allow users to provide custom function definitions without "
"having to provide a custom dialect. This specific behavior is not fully "
"completed as of yet."

#. Tag: para
#: portability.xml:182
#, no-c-format
msgid ""
"It is sort of implemented such that users can programatically register "
"functions with the <classname>org.hibernate.cfg.Configuration</classname> "
"and those functions will be recognized for HQL."
msgstr ""
"It is sort of implemented such that users can programatically register "
"functions with the <classname>org.hibernate.cfg.Configuration</classname> "
"and those functions will be recognized for HQL."

#. Tag: title
#: portability.xml:192
#, no-c-format
msgid "Type mappings"
msgstr "Tipos de mapeamentos"

#. Tag: para
#: portability.xml:194
#, no-c-format
msgid "This section scheduled for completion at a later date..."
msgstr "A seção está esquematizada para finalização numa data posterior..."

#~ msgid ""
#~ "Hibernate was changed slightly once the implication of this was better "
#~ "understood so that the insert is delayed in cases where that is feasible."
#~ msgstr ""
#~ "O Hibernate foi atualizado para que a inserção seja lenta em casos em que "
#~ "isto é possível, sendo desta forma melhor compreendido. "

#~ msgid ""
#~ "The underlying issue is that the actual semanctics of the application "
#~ "itself changes in these cases."
#~ msgstr ""
#~ "O problema adjacente é que as semânticas atuais do próprio aplicativo "
#~ "altere nestes casos."

#~ msgid ""
#~ "Starting with version 3.2.3, Hibernate comes with a set of <ulink url="
#~ "\"http://in.relation.to/2082.lace\">enhanced</ulink> identifier "
#~ "generators targetting portability in a much different way."
#~ msgstr ""
#~ "Starting with version 3.2.3, Hibernate comes with a set of <ulink url="
#~ "\"http://in.relation.to/2082.lace\">enhanced</ulink> identifier "
#~ "generators targetting portability in a much different way."

#~ msgid ""
#~ "There are specifically 2 bundled <emphasis>enhanced</emphasis>generators:"
#~ msgstr ""
#~ "There are specifically 2 bundled <emphasis>enhanced</emphasis>generators:"

#~ msgid ""
#~ "<classname>org.hibernate.id.enhanced.SequenceStyleGenerator</classname>"
#~ msgstr ""
#~ "<classname>org.hibernate.id.enhanced.SequenceStyleGenerator</classname>"

#~ msgid "<classname>org.hibernate.id.enhanced.TableGenerator</classname>"
#~ msgstr "<classname>org.hibernate.id.enhanced.TableGenerator</classname>"

#~ msgid ""
#~ "The idea behind these generators is to port the actual semantics of the "
#~ "identifer value generation to the different databases. For example, the "
#~ "<classname>org.hibernate.id.enhanced.SequenceStyleGenerator</classname> "
#~ "mimics the behavior of a sequence on databases which do not support "
#~ "sequences by using a table."
#~ msgstr ""
#~ "The idea behind these generators is to port the actual semantics of the "
#~ "identifer value generation to the different databases. For example, the "
#~ "<classname>org.hibernate.id.enhanced.SequenceStyleGenerator</classname> "
#~ "mimics the behavior of a sequence on databases which do not support "
#~ "sequences by using a table."
