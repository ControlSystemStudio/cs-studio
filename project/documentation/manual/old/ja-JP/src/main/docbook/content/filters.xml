<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="filters">
    <title>データのフィルタリング</title>
    
    <para>
        Hibernate3では「可視性」ルールに基づいてデータを扱うための画期的な方法を用意しています。
        <emphasis>Hibernate filter</emphasis> はグローバルで、名前付きで、パラメータ化されたフィルタです。
        これはHibernateセッションごとに有効無効を切り替えられます。
    </para>

    <sect1 id="objectstate-filters">
        <title>Hibernateのフィルタ</title>

        <para>
            Hibernate3はフィルタクライテリアをあらかじめ定義し、
            これらのフィルタをクラスやコレクションレベルに加える機能を加えました。
            フィルタクライテリアは制約節を定義する機能です。
            これらのフィルタ条件はパラメータ化できるということを除き、
            クラスやさまざまなコレクション要素で利用可能な｢where｣句に非常によく似ています。
            アプリケーションは、与えられたフィルタを可能にすべきか、
            そしてそのパラメータ値を何にすべきかを実行時に決定することができます。
            フィルタはデータベースビューのように使用されますが、アプリケーション内ではパラメータ化されます。
            
        </para>

        <para>
            フィルタを使うためにはまず、適切なマッピング要素に定義、追加しなくてはなりません。
            フィルタを定義するためには、
            <literal>&lt;hibernate-mapping/&gt;</literal> 要素内で <literal>&lt;filter-def/&gt;</literal> 要素を使用します。：
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter">
    <filter-param name="myFilterParam" type="string"/>
</filter-def>]]></programlisting>

        <para>
            そうしてフィルタはクラスへと結び付けられます。：
        </para>

        <programlisting><![CDATA[<class name="myClass" ...>
    ...
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</class>]]></programlisting>

        <para>
            また、コレクションに対しては次のようになります。：
        </para>

        <programlisting><![CDATA[<set ...>
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</set>]]></programlisting>

        <para>
            どちらに対しても(また、それぞれを複数)同時に設定することもできます。
        </para>

        <para>
            <literal>Session</literal> 上のメソッドは <literal>enableFilter(String filterName)</literal>,
            <literal>getEnabledFilter(String filterName)</literal>, <literal>disableFilter(String filterName)</literal> です。
            デフォルトでは、フィルタは与えられたセッションに対して使用 <emphasis>できません</emphasis> 。
            <literal>Filter</literal> インスタンスを返り値とする <literal>Session.enableFilter()</literal> メソッドを使うことで、
            フィルタは明示的に使用可能となります。
            上で定義した単純なフィルタの使用は、このようになります。：
        </para>

        <programlisting><![CDATA[session.enableFilter("myFilter").setParameter("myFilterParam", "some-value");]]></programlisting>

        <para>
            org.hibernate.Filterインターフェイスのメソッドは、
            Hibernateの多くに共通しているメソッド連鎖を許していることに注意してください。
        </para>

        <para>
            有効なレコードデータパターンを持つ一時データを使った完全な例です：
        </para>

        <programlisting><![CDATA[<filter-def name="effectiveDate">
    <filter-param name="asOfDate" type="date"/>
</filter-def>

<class name="Employee" ...>
...
    <many-to-one name="department" column="dept_id" class="Department"/>
    <property name="effectiveStartDate" type="date" column="eff_start_dt"/>
    <property name="effectiveEndDate" type="date" column="eff_end_dt"/>
...
    <!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake
        

    -->
    <filter name="effectiveDate"
            condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
</class>

<class name="Department" ...>
...
    <set name="employees" lazy="true">
        <key column="dept_id"/>
        <one-to-many class="Employee"/>
        <filter name="effectiveDate"
                condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
    </set>
</class>]]></programlisting>

        <para>
            常に現在の有効レコードを返却することを保証するために、
            単純に、社員データの検索より前にセッション上のフィルタを有効にします。
            
            
        </para>

<programlisting><![CDATA[Session session = ...;
session.enableFilter("effectiveDate").setParameter("asOfDate", new Date());
List results = session.createQuery("from Employee as e where e.salary > :targetSalary")
         .setLong("targetSalary", new Long(1000000))
         .list();
]]></programlisting>

        <para>
            上記のHQLでは、結果の給料の制約について明示的に触れただけですが、
            有効になっているフィルタのおかげで、このクエリは給料が100万ドル以上の現役の社員だけを返します。
        </para>

        <para>
            (HQLかロードフェッチで）外部結合を持つフィルタを使うつもりなら、
            条件式の方向に注意してください。
            
            これは左外部結合のために設定するのが最も安全です。
            一般的に、演算子の後カラム名に続けて最初のパラメータを配置してください。
        </para>

    </sect1>

</chapter>

