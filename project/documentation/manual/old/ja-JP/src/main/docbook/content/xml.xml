<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="xml">
    <title>XMLマッピング</title>

    <para><emphasis>XMLマッピングはHibernate3.0では試験的な機能であり、非常に活動的に開発中です。</emphasis></para>

    <sect1 id="xml-intro" revision="1">
        <title>XMLデータでの作業</title>

        <para>
            Hibernateでは永続性のPOJOを使って作業するのとほぼ同じようなやり方で、
            永続性のXMLデータを使って作業できます。
        </para>

        <para>
            HibernateはXMLツリーを操作するためのAPIとしてdom4jをサポートしています。
            データベースからdom4jのツリーを復元するクエリを書くことができ、
            ツリーに対して行った修正は自動的にデータベースと同期されます。
            
            またXMLドキュメントを取得することができ、dom4jを使ってドキュメントをパースし、
            Hibernateの任意の基本操作を使ってデータベースへ書き込むことができます。：
            つまり、<literal>persist(), saveOrUpdate(), merge(), delete(), replicate()</literal>
            操作です(マージはまだサポートしていません)。
           
        </para>

        <para>
            データのインポート/エクスポート、
            JMSによるエンティティデータの外部化やSOAP、XSLTベースのレポートなど、
            この機能には多くの用途があります。
        </para>
        
        <para>
            単一のマッピングは、クラスのプロパティとXMLドキュメントのノードを
            同時にデータベースへマッピングするために使うことができます。
            またマッピングするクラスがなければ、
            XMLだけをマッピングするために使うことができます。
            
        </para>
        
        <sect2 id="xml-intro-mapping">
            <title>XMLとクラスのマッピングを同時に指定する</title>

            <para>
                これはPOJOとXMLを同時にマッピングする例です。：
            </para>
            
            <programlisting><![CDATA[<class name="Account" 
        table="ACCOUNTS" 
        node="account">
        
    <id name="accountId" 
            column="ACCOUNT_ID" 
            node="@id"/>
            
    <many-to-one name="customer" 
            column="CUSTOMER_ID" 
            node="customer/@id" 
            embed-xml="false"/>
            
    <property name="balance" 
            column="BALANCE" 
            node="balance"/>
            
    ...
    
</class>]]></programlisting>
        </sect2>
        
        <sect2 id="xml-onlyxml">
            <title>XMLマッピングだけを指定する</title>

            <para>
                これはPOJOクラスがないマッピングの例です。：
            </para>
            
            <programlisting><![CDATA[<class entity-name="Account" 
        table="ACCOUNTS" 
        node="account">
        
    <id name="id" 
            column="ACCOUNT_ID" 
            node="@id" 
            type="string"/>
            
    <many-to-one name="customerId" 
            column="CUSTOMER_ID" 
            node="customer/@id" 
            embed-xml="false" 
            entity-name="Customer"/>
            
    <property name="balance" 
            column="BALANCE" 
            node="balance" 
            type="big_decimal"/>
            
    ...
    
</class>]]></programlisting>
        
            <para>
                このマッピングにより、dom4jツリーか、
                プロパティ名/値の組のグラフ（javaの <literal>Map</literal>）として
                データにアクセスできます。
                
                プロパティの名前は、HQLクエリー内で参照できる純粋な論理構造です。
            </para>

        </sect2>
        
     </sect1>
     
    <sect1 id="xml-mapping" revision="1">
        <title>XMLマッピングのメタデータ</title>

        <para>
            多くのHibernateのマッピング要素は　<literal>node</literal>　属性が使用できます。
            これによりXML属性の名前やプロパティやエンティティデータを保持する要素を指定できます。
            <literal>node</literal>　属性のフォーマットは以下の中の1つでなければなりません。：
        </para>
        
        <itemizedlist spacing="compact">
        <listitem>
            <para>
            <literal>"element-name"</literal> - 指定したXML要素へマッピングします
            </para>
        </listitem>
        <listitem>
            <para>
            <literal>"@attribute-name"</literal> - 指定したXML属性へマッピングします
            </para>
        </listitem>
        <listitem>
            <para>
            <literal>"."</literal> -　親要素へマッピングします
            </para>
        </listitem>
        <listitem>
            <para>
                <literal>"element-name/@attribute-name"</literal> - 
                指定したエレメントの指定した属性へマッピングします
            </para>
        </listitem>
        </itemizedlist>
        
        <para>
            コレクションと単一の値の関連に対して、
            おまけの <literal>embed-xml</literal> 属性があります。
            デフォルトの <literal>embed-xml="true"</literal> と設定した場合、
            関連するエンティティ(値型のコレクション)のXMLツリーは、
            直接関連を所有するエンティティのXMLツリー内に埋め込まれます。
            反対に、<literal>embed-xml="false"</literal> と設定した場合、
            参照される識別子の値だけが多重度１側の関連に対するXMLに現れ、
            単純にコレクションはまったく現れなくなります。
        </para>
        
        <para>
            あまりに多くの関連に対して
            <literal>embed-xml="true"</literal> としたままにするのは注意すべきです。
            XMLは循環をうまく扱えません。
        </para>
        
        <programlisting><![CDATA[<class name="Customer" 
        table="CUSTOMER" 
        node="customer">
        
    <id name="id" 
            column="CUST_ID" 
            node="@id"/>
            
    <map name="accounts" 
            node="." 
            embed-xml="true">
        <key column="CUSTOMER_ID" 
                not-null="true"/>
        <map-key column="SHORT_DESC" 
                node="@short-desc" 
                type="string"/>
        <one-to-many entity-name="Account"
                embed-xml="false" 
                node="account"/>
    </map>
    
    <component name="name" 
            node="name">
        <property name="firstName" 
                node="first-name"/>
        <property name="initial" 
                node="initial"/>
        <property name="lastName" 
                node="last-name"/>
    </component>
    
    ...
    
</class>]]></programlisting>

        <para>
            この例では、実際のaccountのデータではなく、
            accountのidのコレクションを埋め込むことにしました。
            続きのHQLクエリです：
        </para>
        
        <programlisting><![CDATA[from Customer c left join fetch c.accounts where c.lastName like :lastName]]></programlisting>
        
        <para>
            このようなデータセットを返すでしょう
        </para>
        
        <programlisting><![CDATA[<customer id="123456789">
    <account short-desc="Savings">987632567</account>
    <account short-desc="Credit Card">985612323</account>
    <name>
        <first-name>Gavin</first-name>
        <initial>A</initial>
        <last-name>King</last-name>
    </name>
    ...
</customer>]]></programlisting>

        <para>
            <literal>&lt;one-to-many&gt;</literal> マッピングで
            <literal>embed-xml="true"</literal> と設定した場合、
            データはこのようになるでしょう。
        </para>
        
        <programlisting><![CDATA[<customer id="123456789">
    <account id="987632567" short-desc="Savings">
        <customer id="123456789"/>
        <balance>100.29</balance>
    </account>
    <account id="985612323" short-desc="Credit Card">
        <customer id="123456789"/>
        <balance>-2370.34</balance>
    </account>
    <name>
        <first-name>Gavin</first-name>
        <initial>A</initial>
        <last-name>King</last-name>
    </name>
    ...
</customer>]]></programlisting>
       
    </sect1>
    
    
    <sect1 id="xml-manipulation" revision="1">
        <title>XMLデータを扱う</title>
        
        <para>
            XMLドキュメントを、アプリケーション内で再読み込みや更新をしてみましょう。
            以下ではdom4jのセッションを取得することで行います。：
        </para>
        
       <programlisting><![CDATA[Document doc = ....;
       
Session session = factory.openSession();
Session dom4jSession = session.getSession(EntityMode.DOM4J);
Transaction tx = session.beginTransaction();

List results = dom4jSession
    .createQuery("from Customer c left join fetch c.accounts where c.lastName like :lastName")
    .list();
for ( int i=0; i<results.size(); i++ ) {
    //add the customer data to the XML document
    Element customer = (Element) results.get(i);
    doc.getRootElement().add(customer);
}

tx.commit();
session.close();]]></programlisting>
       
       <programlisting><![CDATA[Session session = factory.openSession();
Session dom4jSession = session.getSession(EntityMode.DOM4J);
Transaction tx = session.beginTransaction();

Element cust = (Element) dom4jSession.get("Customer", customerId);
for ( int i=0; i<results.size(); i++ ) {
    Element customer = (Element) results.get(i);
    //change the customer name in the XML and database
    Element name = customer.element("name");
    name.element("first-name").setText(firstName);
    name.element("initial").setText(initial);
    name.element("last-name").setText(lastName);
}

tx.commit();
session.close();]]></programlisting>

        <para>
            XMLベースのデータのインポート/エクスポートを実装するために、
            Hibernateの <literal>replicate()</literal> 操作をこの機能を結びつけるのは
            極めて有効です。
        </para>
       
    </sect1>
     
</chapter>

