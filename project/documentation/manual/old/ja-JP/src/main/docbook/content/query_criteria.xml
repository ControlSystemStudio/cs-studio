<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="querycriteria">
    <title>Criteriaクエリ</title>

    <para>
        Hibernateには、直感的で拡張可能なcriteriaクエリAPIが用意されています。
    </para>
    
    <sect1 id="querycriteria-creating">
        <title> <literal>Criteria</literal> インスタンスの作成</title>

        <para>
            <literal>org.hibernate.Criteria</literal>
            インターフェイスは特定の永続性クラスに対するクエリを表現します。
            <literal>Session</literal> は <literal>Criteria</literal> インスタンスのファクトリです。
        </para>

        <programlisting><![CDATA[Criteria crit = sess.createCriteria(Cat.class);
crit.setMaxResults(50);
List cats = crit.list();]]></programlisting>

    </sect1>
     
    <sect1 id="querycriteria-narrowing">
        <title>リザルトセットの絞込み</title>

        <para>
            <literal>org.hibernate.criterion.Criterion</literal> インターフェイスのインスタンスは、
            個別のクエリクライテリオン（問い合わせの判定基準）を表します。
            <literal>org.hibernate.criterion.Restrictions</literal>
            クラスは、ある組み込みの <literal>Criterion</literal>
            型を取得するためのファクトリメソッドを持っています。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "Fritz%") )
    .add( Restrictions.between("weight", minWeight, maxWeight) )
    .list();]]></programlisting>
    
        <para>
            Restriction（限定）は、論理的にグループ化できます。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "Fritz%") )
    .add( Restrictions.or(
        Restrictions.eq( "age", new Integer(0) ),
        Restrictions.isNull("age")
    ) )
    .list();]]></programlisting>
    
       <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.in( "name", new String[] { "Fritz", "Izi", "Pk" } ) )
    .add( Restrictions.disjunction()
        .add( Restrictions.isNull("age") )
        .add( Restrictions.eq("age", new Integer(0) ) )
        .add( Restrictions.eq("age", new Integer(1) ) )
        .add( Restrictions.eq("age", new Integer(2) ) )
    ) )
    .list();]]></programlisting>
    
        <para>
            元々あるCriterion型（<literal>Restrictions</literal> のサブクラス）
            はかなりの範囲に及びますが、特に有用なのはSQLを直接指定できるものです。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.sqlRestriction("lower({alias}.name) like lower(?)", "Fritz%", Hibernate.STRING) )
    .list();]]></programlisting>
    
        <para>
            <literal>{alias}</literal> というプレースホルダは、
            問い合わせを受けたエンティティの行の別名によって置き換えられます。
        </para>
        
        <para>
            criterionを得る別の手段は、
            <literal>Property</literal> インスタンスから取得することです。
            <literal>Property.forName()</literal> を呼び出して、
            <literal>Property</literal> インスタンスを作成できます。
        </para>
    
        <programlisting><![CDATA[
Property age = Property.forName("age");
List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.disjunction()
        .add( age.isNull() )
        .add( age.eq( new Integer(0) ) )
        .add( age.eq( new Integer(1) ) )
        .add( age.eq( new Integer(2) ) )
    ) )
    .add( Property.forName("name").in( new String[] { "Fritz", "Izi", "Pk" } ) )
    .list();]]></programlisting>
    
   </sect1>
     
    <sect1 id="querycriteria-ordering">
        <title>結果の整列</title>

        <para>
            <literal>org.hibernate.criterion.Order</literal>
            を使って結果を並び替えることができます。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "F%")
    .addOrder( Order.asc("name") )
    .addOrder( Order.desc("age") )
    .setMaxResults(50)
    .list();]]></programlisting>
    
        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Property.forName("name").like("F%") )
    .addOrder( Property.forName("name").asc() )
    .addOrder( Property.forName("age").desc() )
    .setMaxResults(50)
    .list();]]></programlisting>
    
    </sect1>
    
    <sect1 id="querycriteria-associations" revision="2">
        <title>関連</title>

        <para>
            <literal>createCriteria()</literal> を使い、関連をナビゲートすることで、
            容易に関係するエンティティに制約を指定できます。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "F%") )
    .createCriteria("kittens")
        .add( Restrictions.like("name", "F%") )
    .list();]]></programlisting>

        <para>
            2番目の <literal>createCriteria()</literal> は、<literal>kittens</literal>
            コレクションの要素を参照する新しい <literal>Criteria</literal>
            インスタンスを返すことに注意してください。
        </para>

        <para>
            以下のような方法も、状況により有用です。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .createAlias("kittens", "kt")
    .createAlias("mate", "mt")
    .add( Restrictions.eqProperty("kt.name", "mt.name") )
    .list();]]></programlisting>

        <para>
            （<literal>createAlias()</literal> は新しい
            <literal>Criteria</literal> インスタンスを作成しません。）
        </para>

        <para>
            前の2つのクエリによって返される <literal>Cat</literal>
            インスタンスによって保持されるkittensコレクションは、
            criteriaによって事前にフィルタリング <emphasis>されない</emphasis>
            ことに注意してください。
            もしcriteriaに適合するkittenを取得したいなら、
            <literal>ResultTransformer</literal> を使わなければなりません。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .createCriteria("kittens", "kt")
        .add( Restrictions.eq("name", "F%") )
    .setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP)
    .list();
Iterator iter = cats.iterator();
while ( iter.hasNext() ) {
    Map map = (Map) iter.next();
    Cat cat = (Cat) map.get(Criteria.ROOT_ALIAS);
    Cat kitten = (Cat) map.get("kt");
}]]></programlisting>

    </sect1>
    
    <sect1 id="querycriteria-dynamicfetching" revision="1">
        <title>関連の動的フェッチ</title>

        <para>
            <literal>setFetchMode()</literal> を使い、
            実行時に関連の復元方法を指定してもよいです。
        </para>

        <programlisting><![CDATA[List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "Fritz%") )
    .setFetchMode("mate", FetchMode.EAGER)
    .setFetchMode("kittens", FetchMode.EAGER)
    .list();]]></programlisting>
    
        <para>
            このクエリは外部結合により <literal>mate</literal> と
            <literal>kittens</literal> の両方をフェッチします。
            より多くの情報は <xref linkend="performance-fetching"/> を参照してください。
        </para>
    
    </sect1>
     
    <sect1 id="querycriteria-examples">
        <title>クエリの例</title>

        <para>
            <literal>org.hibernate.criterion.Example</literal> クラスは、
            与えられたインスタンスからクエリクライテリオンを構築できます。
        </para>

        <programlisting><![CDATA[Cat cat = new Cat();
cat.setSex('F');
cat.setColor(Color.BLACK);
List results = session.createCriteria(Cat.class)
    .add( Example.create(cat) )
    .list();]]></programlisting>
    
        <para>
           バージョンプロパティ、識別子、関連は無視されます。
           デフォルトではnull値のプロパティは除外されます。
        </para>

        <para>
           どのように <literal>Example</literal> を適用するか
           調整することができます。
        </para>

        <programlisting><![CDATA[Example example = Example.create(cat)
    .excludeZeroes()           //exclude zero valued properties
    .excludeProperty("color")  //exclude the property named "color"
    .ignoreCase()              //perform case insensitive string comparisons
    .enableLike();             //use like for string comparisons
List results = session.createCriteria(Cat.class)
    .add(example)
    .list();]]></programlisting>
    
        <para>
            関連オブジェクトにcriteriaを指定するために、Exampleを使うことも可能です。
        </para>

        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .add( Example.create(cat) )
    .createCriteria("mate")
        .add( Example.create( cat.getMate() ) )
    .list();]]></programlisting>
    
    </sect1>
    
    <sect1 id="querycriteria-projection">
        <title>射影、集約、グループ化</title>
        <para>
            <literal>org.hibernate.criterion.Projections</literal> クラスは
            <literal>Projection</literal> インスタンスのファクトリです。
            <literal>setProjection()</literal> を呼び出すことで、
            クエリに射影を適用します。
        </para>
        
        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.rowCount() )
    .add( Restrictions.eq("color", Color.BLACK) )
    .list();]]></programlisting>
    
        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount() )
        .add( Projections.avg("weight") )
        .add( Projections.max("weight") )
        .add( Projections.groupProperty("color") )
    )
    .list();]]></programlisting>
    
        <para>
            必要であっても、criteriaクエリに「group by」を明示する必要はありません。
            ある種のProjection型は <emphasis>グループ化射影</emphasis> として定義され、
            SQLの <literal>group by</literal> 節にも現れます。
        </para>
    
        <para>
            任意で射影に別名を付けられるため、射影される値はrestrictionやordering内から参照できます。
            別名をつける２つの異なる方法を示します。
        </para>

        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.alias( Projections.groupProperty("color"), "colr" ) )
    .addOrder( Order.asc("colr") )
    .list();]]></programlisting>
    
        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.groupProperty("color").as("colr") )
    .addOrder( Order.asc("colr") )
    .list();]]></programlisting>
    
        <para>
            <literal>alias()</literal> と <literal>as()</literal> メソッドは、
            Projectionインスタンスを別の名前の <literal>Projection</literal> インスタンスで
            ラップするだけです。
            ショートカットとして、射影を射影リストに追加する際に、別名をつけられます。
        </para>

       <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount(), "catCountByColor" )
        .add( Projections.avg("weight"), "avgWeight" )
        .add( Projections.max("weight"), "maxWeight" )
        .add( Projections.groupProperty("color"), "color" )
    )
    .addOrder( Order.desc("catCountByColor") )
    .addOrder( Order.desc("avgWeight") )
    .list();]]></programlisting>
    
        <programlisting><![CDATA[List results = session.createCriteria(Domestic.class, "cat")
    .createAlias("kittens", "kit")
    .setProjection( Projections.projectionList()
        .add( Projections.property("cat.name"), "catName" )
        .add( Projections.property("kit.name"), "kitName" )
    )
    .addOrder( Order.asc("catName") )
    .addOrder( Order.asc("kitName") )
    .list();]]></programlisting>
    
        <para>
            射影の式に <literal>Property.forName()</literal> も使用できます。
        </para>
    
        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Property.forName("name") )
    .add( Property.forName("color").eq(Color.BLACK) )
    .list();]]></programlisting>
    
        <programlisting><![CDATA[List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount().as("catCountByColor") )
        .add( Property.forName("weight").avg().as("avgWeight") )
        .add( Property.forName("weight").max().as("maxWeight") )
        .add( Property.forName("color").group().as("color" )
    )
    .addOrder( Order.desc("catCountByColor") )
    .addOrder( Order.desc("avgWeight") )
    .list();]]></programlisting>
    
    </sect1>
    
    <sect1 id="querycriteria-detachedqueries">
        <title>クエリおよびサブクエリの分離</title>
        <para>
            <literal>DetachedCriteria</literal> クラスにより、
            セッションスコープ外にクエリを作成できます。
            後で、任意の <literal>Session</literal> を使って、実行できます。
        </para>
        
        <programlisting><![CDATA[DetachedCriteria query = DetachedCriteria.forClass(Cat.class)
    .add( Property.forName("sex").eq('F') );
    
Session session = ....;
Transaction txn = session.beginTransaction();
List results = query.getExecutableCriteria(session).setMaxResults(100).list();
txn.commit();
session.close();]]></programlisting>

        <para>
            <literal>DetachedCriteria</literal> は、サブクエリを表現するためにも使えます。
            サブクエリを伴うCriterionインスタンスは、
            <literal>Subqueries</literal> もしくは <literal>Property</literal> から得られます。
        </para>
        
        <programlisting><![CDATA[DetachedCriteria avgWeight = DetachedCriteria.forClass(Cat.class)
    .setProjection( Property.forName("weight").avg() );
session.createCriteria(Cat.class)
    .add( Property.forName("weight").gt(avgWeight) )
    .list();]]></programlisting>
    
        <programlisting><![CDATA[DetachedCriteria weights = DetachedCriteria.forClass(Cat.class)
    .setProjection( Property.forName("weight") );
session.createCriteria(Cat.class)
    .add( Subqueries.geAll("weight", weights) )
    .list();]]></programlisting>
    
        <para>
            相互関係があるサブクエリでさえも可能です。
        </para>
        
        <programlisting><![CDATA[DetachedCriteria avgWeightForSex = DetachedCriteria.forClass(Cat.class, "cat2")
    .setProjection( Property.forName("weight").avg() )
    .add( Property.forName("cat2.sex").eqProperty("cat.sex") );
session.createCriteria(Cat.class, "cat")
    .add( Property.forName("weight").gt(avgWeightForSex) )
    .list();]]></programlisting>

    </sect1>

        <!--TODO: ResultSetTransformer + aliasing. AliasToBeanTransformer allow returning arbitrary 
                  user objects - similar to setResultClass in JDO2. General use of ResultTransformer 
                  could also be explained. -->
               
    <sect1 id="query-criteria-naturalid">
        <title>自然識別子によるクエリ</title>
        
        <para>
            criteriaクエリを含むたいていのクエリにとって、
            クエリキャッシュはあまり効率がよくないです。
            なぜなら、クエリキャッシュが頻繁に無効になるためです。
            しかしながら、キャッシュを無効にするアルゴリズムを最適化できる
            特別なクエリの種類が１つあります。
            更新されない自然キーによる検索です。
            いくつかのアプリケーションでは、この種類のクエリが頻繁に現れます。
            このような使われ方のために、criteria APIは特別な対策を提供します。
        </para>
        
        <para>
            最初に、<literal>&lt;natural-id&gt;</literal> を使って、
            エンティティの自然キーをマップしてください。
            そして、二次キャッシュを有効にします。
        </para>

        <programlisting><![CDATA[<class name="User">
    <cache usage="read-write"/>
    <id name="id">
        <generator class="increment"/>
    </id>
    <natural-id>
        <property name="name"/>
        <property name="org"/>
    </natural-id>
    <property name="password"/>
</class>]]></programlisting>
    
        <para>
            注意： <emphasis>変更される</emphasis> 自然キーを持つエンティティに
            この機能を使うのは、意図されていない使い方です。
        </para>
        
        <para>
            次に、Hibernateクエリキャッシュを有効にします。
        </para>
        
        <para>
            これで、<literal>Restrictions.naturalId()</literal> により、
            より効率的なキャッシュアルゴリズムを使用できます。
        </para>
       
        <programlisting><![CDATA[session.createCriteria(User.class)
    .add( Restrictions.naturalId()
        .set("name", "gavin")
        .set("org", "hb") 
    ).setCacheable(true)
    .uniqueResult();]]></programlisting>
            
    </sect1>
    
</chapter>
