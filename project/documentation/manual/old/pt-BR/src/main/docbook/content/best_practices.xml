<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="best-practices" revision="3">
    <title>Boas práticas</title>

    <variablelist spacing="compact">
        <varlistentry>
            <term>Escreva classes compactas e mapeie-as usando <literal>&lt;component&gt;</literal>.</term>
            <listitem>
                <para>
                    Use uma classe <literal>Endereco</literal> para encapsular <literal>rua</literal>, 
                    <literal>bairro</literal>, <literal>estado</literal>, <literal>CEP</literal>. Isto promove 
                    a reutilização de código e simplifica o refactoring.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Declare propriedades identificadoras em classes persistentes.</term>
            <listitem>
                <para>
                    O Hibernate constrói propriedades identificadoras opcionais. Existem todos os tipos 
                    de razões que explicam porquê você deveria utilizá-las. Nós recomendamos que os 
                    identificadores sejam 'sintéticos' (gerados, sem significado para o negocio).
                    
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Identifique chaves naturais.</term>
            <listitem>
                <para>
                    Identifique chaves naturais para todas as entidades, e mapeie-as usando 
                    <literal>&lt;natural-id&gt;</literal>. Implemente <literal>equals()</literal> e
                    <literal>hashCode()</literal> para comparar as propriedades que compõem a chave natural.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Coloque cada classe de mapeamento em seu próprio arquivo.</term>
            <listitem>
                <para>
                     Não use um único código de mapeamento monolítico. Mapeie <literal>com.eg.Foo</literal> 
                     no arquivo <literal>com/eg/Foo.hbm.xml</literal>. Isto promove particularmente o bom 
                     senso no time de desenvolvimento.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Carregue os mapeamentos como recursos.</term>
            <listitem>
                <para>
                    Faça o deploy dos mapeamentos junto com as classes que eles mapeiam.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Considere externalizar as strings de consultas.</term>
            <listitem>
                <para>
                    Esta é uma boa prática se suas consultas chamam funções SQL que não sejam ANSI. 
                    Externalizar as strings de consultas para mapear arquivos irão tornar a aplicação 
                    mais portável.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Use bind variables.</term>
            <listitem>
                <para>
                     Assim como em JDBC, sempre substitua valores não constantes por "?". Nunca use a manipulação 
                     de strings para concatenar valores não constantes em uma consulta! Até melhor, considere 
                     usar parâmetros nomeados nas consultas.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Não gerencie suas conexões JDBC.</term>
            <listitem>
                <para>
                    O Hibernate permite que a aplicação gerencie conexões JDBC. Esta abordagem deve ser considerada 
                    um último recurso. Se você não pode usar os provedores de conexão embutidos, considere fazer 
                    sua implementação a partir de <literal>org.hibernate.connection.ConnectionProvider</literal>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Considere usar tipos customizados.</term>
            <listitem>
                <para>
                    Suponha que você tenha um tipo Java, de alguma biblioteca, que precisa ser persistido mas não 
                    provê os acessórios necessários para mapeá-lo como um componente. Você deve implementar 
                    <literal>org.hibernate.UserType</literal>. Esta abordagem livra o código da aplicação de 
                    implementar transformações de/para o tipo Hibernate.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term> Use código manual JDBC nos gargalos.</term>
            <listitem>
                <para>
                    Nas áreas de desempenho crítico do sistema, alguns tipos de operações podem se beneficiar do 
                    uso direto do JDBC. Mas por favor, espere até você <emphasis>saber </emphasis> se é um gargalo. 
                    E não suponha que o uso direto do JDBC é necessariamente mais rápido. Se você precisar usar 
                    diretamente o JDBC, vale a pena abrir uma <literal>Session</literal> do Hibernate e usar uma 
                    conexão JDBC. De modo que você possa ainda usar a mesma estratégia de transação e ocultar 
                    o provedor a conexão                    
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Entenda o <literal>Session</literal> flushing.</term>
            <listitem>
                <para>
                    De tempos em tempos a sessão sincroniza seu estado persistente com o banco de dados. O desempenho 
                    será afetado se este processo ocorrer frequentemente. Você pode algumas vezes minimizar o fluxo 
                    desnecessário desabilitando o fluxo automático ou até mesmo mudando a ordem das consultas e outras 
                    operações em uma transação particular.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Em uma arquitetura de três camadas, considere o uso de objetos separados.</term>
            <listitem>
                <para>
                    When using a servlet / session bean architecture, you could pass persistent objects loaded in
                    the session bean to and from the servlet / JSP layer. Use a new session to service each request. 
                    Use <literal>Session.merge()</literal> or <literal>Session.saveOrUpdate()</literal> to 
                    synchronize objects with the database.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>In a two tiered architecture, consider using long persistence contexts.</term>
            <listitem>
                <para>
                    Database Transactions have to be as short as possible for best scalability. However, it is often
                    necessary to implement long running <emphasis>application transactions</emphasis>, a single 
                    unit-of-work from the point of view of a user. An application transaction might span several 
                    client request/response cycles. It is common to use detached objects to implement application
                    transactions. An alternative, extremely appropriate in two tiered architecture, is to maintain
                    a single open persistence contact (session) for the whole life cycle of the application transaction 
                    and simply disconnect from the JDBC connection at the end of each request and reconnect at the 
                    beginning of the subsequent request. Never share a single session across more than one application 
                    transaction, or you will be working with stale data.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Don't treat exceptions as recoverable.</term>
            <listitem>
                <para>
                    This is more of a necessary practice than a "best" practice. When an exception occurs, roll back
                    the <literal>Transaction</literal> and close the <literal>Session</literal>. If you don't, Hibernate
                    can't guarantee that in-memory state accurately represents persistent state. As a special case of this,
                    do not use <literal>Session.load()</literal> to determine if an instance with the given identifier 
                    exists on the database; use <literal>Session.get()</literal> or a query instead.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Prefer lazy fetching for associations.</term>
            <listitem>
                <para>
                    Use eager fetching sparingly. Use proxies and lazy collections for most associations to classes that 
                    are not likely to be completely held in the second-level cache. For associations to cached classes, 
                    where there is an a extremely high probability of a cache hit, explicitly disable eager fetching using 
                    <literal>lazy="false"</literal>. When an join fetching is appropriate to a particular use
                    case, use a query with a <literal>left join fetch</literal>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                Use the <emphasis>open session in view</emphasis> pattern, or a disciplined 
                <emphasis>assembly phase</emphasis> to avoid problems with unfetched data.
            </term>
            <listitem>
                <para>
                    Hibernate frees the developer from writing tedious <emphasis>Data Transfer Objects</emphasis> (DTO). 
                    In a traditional EJB architecture, DTOs serve dual purposes: first, they work around the problem
                    that entity beans are not serializable; second, they implicitly define an assembly phase where
                    all data to be used by the view is fetched and marshalled into the DTOs before returning control 
                    to the presentation tier. Hibernate eliminates the first purpose. However, you will still need
                    an assembly phase (think of your business methods as having a strict contract with the presentation
                    tier about what data is available in the detached objects) unless you are prepared to hold the
                    persistence context (the session) open across the view rendering process. This is not a limitation
                    of Hibernate! It is a fundamental requirement of safe transactional data access.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Consider abstracting your business logic from Hibernate.</term>
            <listitem>
                <para>
                    Hide (Hibernate) data-access code behind an interface. Combine the <emphasis>DAO</emphasis> and 
                    <emphasis>Thread Local Session</emphasis> patterns. You can even have some classes persisted by
                    handcoded JDBC, associated to Hibernate via a <literal>UserType</literal>. (This advice is 
                    intended for "sufficiently large" applications; it is not appropriate for an application with
                    five tables!)
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Don't use exotic association mappings.</term>
            <listitem>
                <para>
                    Good usecases for a real many-to-many associations are rare. Most of the time you need
                    additional information stored in the "link table". In this case, it is much better to
                    use two one-to-many associations to an intermediate link class. In fact, we think that
                    most associations are one-to-many and many-to-one, you should be careful when using any
                    other association style and ask yourself if it is really neccessary.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>Prefer bidirectional associations.</term>
            <listitem>
                <para>
                    Unidirectional associations are more difficult to query. In a large application, almost
                    all associations must be navigable in both directions in queries.
                </para>
            </listitem>
        </varlistentry>
    </variablelist>

</chapter>

