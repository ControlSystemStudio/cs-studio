<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="associations">

    <title>Mapeamento de Associações</title>

    <sect1 id="assoc-intro" revision="1">
        <title>Introdução</title>
        
        <para>
            Mapeamentos de associações são freqüentemente a  coisa mais difícil de se 
            acertar. Nesta seção nós passaremos pêlos casos canônicos um pôr um, 
            começando com mapeamentos unidirecionais e considerando os casos 
            bidirecionais. Nos vamos usar <literal>Person</literal> e 
            <literal>Address</literal> em todos os exemplos.
        </para>
        
        <para>
        	Nós classificaremos as associações pelo seu mapeamento ou a falta do 
        	mesmo, sua intervenção na tabela associativa, e pela sua multiplicidade.
        </para>
        
        <para>
        	O uso de chaves estrangeiras não obrigatórias não é considerada uma boa 
        	prática na modelagem de dados tradicional, assim todos nossos exemplos 
        	usam chaves estrangeiras obrigatórias. Esta não é uma exigência do 
        	Hibernate, e todas as mapeamentos funcionarão se você remover as 
        	constraints de obrigatoriedade.
        </para>
        
    </sect1>

    <sect1 id="assoc-unidirectional" revision="1">
        <title>Associações Unidirecionais</title>
        
        <sect2 id="assoc-unidirectional-m21">
        <title>muitos para um</title>
        
        <para>
            Uma <emphasis>associação unidirecional  muitos-para-um</emphasis> é o 
            tipo mais comum de associação unidirecional.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-121">
        <title>um para um</title>
        
        <para>
            Uma <emphasis>associação unidirecional um-para-um em uma chave estrangeira
            </emphasis> é quase idêntica. A única diferença é a constraint unique 
            na coluna.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId" 
        unique="true"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        <para>
            Uma <emphasis>associação unidirecional um-para-um  na chave primaria</emphasis>  
            geralmente usa um gerador de id special. ( Note que nós invertemos a 
            direção da associação nesse exemplo).
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
</class>

<class name="Address">
    <id name="id" column="personId">
        <generator class="foreign">
            <param name="property">person</param>
        </generator>
    </id>
    <one-to-one name="person" constrained="true"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
        <sect2 id="assoc-unidirectional-12m">
        <title>um para muitos</title>
        
        <para>
            Uma <emphasis>associação unidirecional um-para-muitos em uma chave 
            estrangeira</emphasis> é um caso muito incomum, e realmente não é recomendada.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses">
        <key column="personId" 
            not-null="true"/>
        <one-to-many class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( addressId bigint not null primary key, personId bigint not null )
        ]]></programlisting>
        
        <para>
            Nós achamos que é melhor usar uma tabela associativa para este tipo de 
            associação.
        </para>
        
        </sect2>
    
    </sect1>

    <sect1 id="assoc-unidirectional-join" revision="1">
        <title>Associações Unidirecionais com tabelas associativas</title>
        
        <sect2 id="assoc-unidirectional-join-12m">
        <title>um para muitos</title>
        
        <para>
            Uma <emphasis>associação um-para-muitos unidirecional usando uma tabela 
            associativa</emphasis> e o mais comum. Note que se especificarmos 
            <literal>unique="true"</literal>, estaremos modificando a cardinalidade 
            de muitos-para-muitos para um-para-muitos.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            unique="true"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-m21">
        <title>muitos para um</title>
        
        <para>
            Uma <emphasis>associação unidirecional muitos-para-um em uma tabela 
            associativa</emphasis> é bastante comum quando a associação for opcional.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-121">
        <title>um para um</title>
        
        <para>
            Uma <emphasis>associação unidirecional um-para-um em uma tabela 
            associativa</emphasis> é extremamente incomum, mas possível.
            
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" 
            unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"
            unique="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-m2m">
        <title>muitos para muitos</title>
        
        <para>
            Finalmente, nós temos a <emphasis>associação unidirecional muitos-para-
            muitos</emphasis>.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

    </sect1>

    <sect1 id="assoc-bidirectional" revision="1">
        <title>Associações Bidirecionais</title>
        
        <sect2 id="assoc-bidirectional-m21" revision="2">
        <title>um para muitos / muitos para um</title>
        
        <para>
            Uma <emphasis>associação bidirecional muitos-para-um</emphasis> é o 
            tipo mais comum de associação. (Esse é o relacionamento padrão 
            pai / filho. )
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <set name="people" inverse="true">
        <key column="addressId"/>
        <one-to-many class="Person"/>
    </set>
</class>]]></programlisting>

        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>

        <para>
            Se você usar uma <literal>List</literal> ( ou outra coleção indexada ), você 
            precisa especificar a coluna <literal>chave</literal> estrangeira como not null, 
            e deixar o Hibernate administrar a associação do lado da coleção para que 
            seja mantido o índice de cada elemento da coleção (fazendo com que o outro 
            lado seja virtualmente inverso setando <literal>update="false"</literal> 
            e <literal>insert="false"</literal>):             
        </para>

        <programlisting><![CDATA[<class name="Person">
   <id name="id"/>
   ...
   <many-to-one name="address"
      column="addressId"
      not-null="true"
      insert="false"
      update="false"/>
</class>

<class name="Address">
   <id name="id"/>
   ...
   <list name="people">
      <key column="addressId" not-null="true"/>
      <list-index column="peopleIdx"/>
      <one-to-many class="Person"/>
   </list>
</class>]]></programlisting>

            <para>
                É importante que você defina <literal>not-null="true"</literal> no elemento 
                <literal>&lt;key&gt;</literal> no mapeamento na coleção se a coluna de chave 
                estrangeira for <literal>NOT NULL</literal>. Não declare como 
                <literal>not-null="true"</literal> apenas um elemento aninhado 
                <literal>&lt;column&gt;</literal>, mas sim o elemento 
                <literal>&lt;key&gt;</literal>.
            </para>

        </sect2>
        
        <sect2 id="assoc-bidirectional-121">
        <title>um para um</title>
        
        <para>
            Uma <emphasis>associação bidirecional um para um em uma chave estrangeira</emphasis>
             é bastante comum.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId" 
        unique="true"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
   <one-to-one name="person" 
        property-ref="address"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        <para>
            Uma <emphasis>associação bidirecional um para um em uma chave primária</emphasis>
            usa um gerador de id especial.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <one-to-one name="address"/>
</class>

<class name="Address">
    <id name="id" column="personId">
        <generator class="foreign">
            <param name="property">person</param>
        </generator>
    </id>
    <one-to-one name="person" 
        constrained="true"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
    </sect1>

    <sect1 id="assoc-bidirectional-join" revision="1">
        <title>Associações Bidirecionais com tabelas associativas</title>
        
        <sect2 id="assoc-bidirectional-join-12m">
        <title>um para muitos / muitos para um</title>
        
        <para>
            Uma <emphasis>associação bidirecional um para muitos em uma tabela 
            associativa</emphasis>. Veja que <literal>inverse="true"</literal>  pode ser 
            colocado em qualquer ponta associação, na coleção, ou no join.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" 
        table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            unique="true"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        inverse="true" 
        optional="true">
        <key column="addressId"/>
        <many-to-one name="person"
            column="personId"
            not-null="true"/>
    </join>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

         <sect2 id="assoc-bidirectional-join-121">
        <title>one to one</title>
        
        <para>
            Uma <emphasis>associação bidirecional um-para-um em uma tabela de 
            associação</emphasis>  é algo bastante incomum, mas possivel.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" 
            unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"
            unique="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true"
        inverse="true">
        <key column="addressId" 
            unique="true"/>
        <many-to-one name="person"
            column="personId" 
            not-null="true"
            unique="true"/>
    </join>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>

        </sect2>
        
        <sect2 id="assoc-bidirectional-join-m2m" revision="1">
        <title>muitos para muitos</title>
        
        <para>
            Finally, we have a <emphasis>bidirectional many-to-many association</emphasis>.
            Finalmente, nós temos uma associação bidirecional de muitos para muitos.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <set name="people" inverse="true" table="PersonAddress">
        <key column="addressId"/>
        <many-to-many column="personId"
            class="Person"/>
    </set>
</class>]]></programlisting>

        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
    </sect1>
    
    <sect1 id="assoc-complex">
        <title>Mapeamento de associações mais complexas</title>
        
        <para>
            More complex association joins are <emphasis>extremely</emphasis> rare. 
            Hibernate makes it possible to handle more complex situations using
            SQL fragments embedded in the mapping document. For example, if a table
            with historical account information data defines 
            <literal>accountNumber</literal>, <literal>effectiveEndDate</literal> 
            and <literal>effectiveStartDate</literal>columns, mapped as follows:
Joins de associações mais complexas são extremamente raros. O Hibernate torna possível tratar mapeamentos mais complexos usando fragmentos de SQL embutidos no documento de mapeamento. Por exemplo, se uma tabela com informações de dados históricos de uma conta define a coluna accountNumber, effectiveEndDate e effectiveStartDate, mapeadas assim como segue:
        </para>
        
        <programlisting><![CDATA[<properties name="currentAccountKey">
    <property name="accountNumber" type="string" not-null="true"/>
    <property name="currentAccount" type="boolean">
        <formula>case when effectiveEndDate is null then 1 else 0 end</formula>
    </property>
</properties>
<property name="effectiveEndDate" type="date"/>
<property name="effectiveStateDate" type="date" not-null="true"/>]]></programlisting>

        <para>
            Then we can map an association to the <emphasis>current</emphasis> instance 
            (the one with null <literal>effectiveEndDate</literal>) using:
Então nós podemos mapear uma associação para a instância corrente (aquela com a effectiveEndDate igual a null) usando:            
        </para>
        
        <programlisting><![CDATA[<many-to-one name="currentAccountInfo" 
        property-ref="currentAccountKey"
        class="AccountInfo">
    <column name="accountNumber"/>
    <formula>'1'</formula>
</many-to-one>]]></programlisting>

        <para>
            In a more complex example, imagine that the association between 
            <literal>Employee</literal> and <literal>Organization</literal> is maintained
            in an <literal>Employment</literal> table full of historical employment data.
            Then an association to the employee's <emphasis>most recent</emphasis> employer
            (the one with the most recent <literal>startDate</literal>) might be mapped this way:
Em um exemplo mais complexo, imagine que a associação entre Employee e Organization é mantida em uma tabela Employment cheia de dados históricos do trabalho. Então a associação do funcionário mais recentemente empregado (aquele com a mais recente startDate) deve ser mapeado desta maneira:            
        </para>
        
        <programlisting><![CDATA[<join>
    <key column="employeeId"/>
    <subselect>
        select employeeId, orgId 
        from Employments 
        group by orgId 
        having startDate = max(startDate)
    </subselect>
    <many-to-one name="mostRecentEmployer" 
            class="Organization" 
            column="orgId"/>
</join>]]></programlisting>

        <para>
            You can get quite creative with this functionality, but it is usually more practical 
            to handle these kinds of cases using HQL or a criteria query.
Você pode ser criativo com esta funcionalidade, mas geralmente é mais prático tratar estes tipos de casos, usando uma pesquisa HQL ou uma pesquisa por criteria.
        </para>

    </sect1>


</chapter>

