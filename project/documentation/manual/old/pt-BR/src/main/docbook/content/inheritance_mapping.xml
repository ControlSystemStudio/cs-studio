<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="inheritance">
    <title>Mapeamento de Herança</title>

    <sect1 id="inheritance-strategies" revision="3">
        <title> As três estratégias</title>

        <para>
            O Hibernate suporta as três estratégias básicas de mapeamento de herança:
        </para>

        <itemizedlist>
        <listitem>
        <para>
            tabela por hierarquia de classes
        </para>
        </listitem>
        <listitem>
        <para>
            tabela por subclasse
        </para>
        </listitem>
        <listitem>
        <para>
            tabela por classe concreta
        </para>
        </listitem>
        </itemizedlist>
        
        <para>
            Adicionalmente, o Hibernate suporta uma quarta, um tipo levemente 
            diferente de polimorfismo:
        </para>

        <itemizedlist>
        <listitem>
        <para>
            polimorfismo implícito
        </para>
        </listitem>
        </itemizedlist>
        
        <para>
            É possível usar diferentes estratégias de mapeamento para diferentes 
            ramificações da mesma hierarquia de herança, e então fazer uso do 
            polimorfismo implícito para alcançar polimorfismo através da 
            hierarquia completa. De qualquer forma, O Hibernate não suporta a 
            mistura de mapeamentos <literal>&lt;subclass&gt;</literal>,
            and <literal>&lt;joined-subclass&gt;</literal> e
            <literal>&lt;union-subclass&gt;</literal> dentro do mesmo elemento 
            raiz <literal>&lt;class&gt;</literal>. É possível usar junto às estratégias 
            tabela por hierarquia e a tabela por subclasse, abaixo do mesmo elemento 
            <literal>&lt;class&gt;</literal>, combinando os elementos  
            <literal>&lt;subclass&gt;</literal> e <literal>&lt;join&gt;</literal> 
            (veja abaixo).

        </para>

        <para>
             É possível definir mapeamentos <literal>subclass</literal>, <literal>union-subclass</literal>,
             e <literal>joined-subclass</literal> em documentos de mapeamento separados, diretamente abaixo de 
             <literal>hibernate-mapping</literal>. Isso permite a você estender uma hierarquia de classes 
             apenas adicionando um novo arquivo de mapeamento. Você deve especificar um atributo  
             <literal>extends</literal> no mapeamento da subclasse, nomeando uma superclasse previamente 
             mapeada. Nota: Anteriormente esta característica fazia o ordenamento dos documentos de 
             mapeamento importantes. Desde o Hibernate3, o ordenamento dos arquivos de mapeamento não 
             importa quando usamos a palavra chave extends. O ordenamento dentro de um arquivo de mapeamento 
             simples ainda necessita ser definido como superclasse antes de subclasse.
         </para>

         <programlisting><![CDATA[
 <hibernate-mapping>
     <subclass name="DomesticCat" extends="Cat" discriminator-value="D">
          <property name="name" type="string"/>
     </subclass>
 </hibernate-mapping>]]></programlisting>


        <sect2 id="inheritance-tableperclass" >
        <title>Tabela por hierarquia de classes</title>

        <para>
            Suponha que tenhamos uma interface <literal>Payment</literal>, com sua 
            implementação <literal>CreditCardPayment</literal>, <literal>CashPayment</literal>,
            <literal>ChequePayment</literal>. O mapeamento da tabela por hierarquia 
            seria parecido com:            
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        ...
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        ...
    </subclass>
</class>]]></programlisting>

        <para>
            Exactly one table is required. There is one big limitation of this mapping 
            strategy: columns declared by the subclasses, such as <literal>CCTYPE</literal>, 
            may not have <literal>NOT NULL</literal> constraints.
        </para>
        
        </sect2>

        <sect2 id="inheritance-tablepersubclass">
        <title>Tabela por subclasse</title>

        <para>
            Um mapeamento de tabela por subclasse seria parecido com:
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="AMOUNT"/>
    ...
    <joined-subclass name="CreditCardPayment" table="CREDIT_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </joined-subclass>
    <joined-subclass name="CashPayment" table="CASH_PAYMENT">
        <key column="PAYMENT_ID"/>
        ...
    </joined-subclass>
    <joined-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        <key column="PAYMENT_ID"/>
        ...
    </joined-subclass>
</class>]]></programlisting>

        <para>
            Quatro tabelas são necessárias. As três tabelas subclasses possuem 
            associação de chave primária para a tabela de superclasse 
            (então o modelo relacional é atualmente uma associação de 
            um-para-um).
        </para>

        </sect2>

        <sect2 id="inheritance-tablepersubclass-discriminator" revision="2">
        <title>Tabela por subclasse, usando um discriminador</title>

        <para>
        		Note que a implementação de tabela por subclasse do Hibernate não 
            necessita de coluna de discriminador. Outro mapeador objeto/relacional 
            usa uma implementação diferente de tabela por subclasse, que necessita 
            uma coluna com o tipo discriminador na tabela da superclasse. A 
            abordagem escolhida pelo Hibernate é muito mais difícil de implementar, 
            porém de forma argumentável mais correto de um ponto de vista relacional. 
            Se você deseja utilizar uma coluna discriminadora com a estratégia 
            tabela por subclasse, você pode combinar o uso de 
            <literal>&lt;subclass&gt;</literal> e <literal>&lt;join&gt;</literal>, 
            dessa maneira:            
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <join table="CREDIT_PAYMENT">
            <key column="PAYMENT_ID"/>
            <property name="creditCardType" column="CCTYPE"/>
            ...
        </join>
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        <join table="CASH_PAYMENT">
            <key column="PAYMENT_ID"/>
            ...
        </join>
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        <join table="CHEQUE_PAYMENT" fetch="select">
            <key column="PAYMENT_ID"/>
            ...
        </join>
    </subclass>
</class>]]></programlisting>

        <para>
            The optional <literal>fetch="select"</literal> declaration tells Hibernate 
            not to fetch the <literal>ChequePayment</literal> subclass data using an
            outer join when querying the superclass.
A declaração opcional fetch=”select” diz ao Hibernate  para não buscar os dados da subclasse ChequePayment, quando usar um outer join pesquisando pela superclasse.
        </para>

        </sect2>

        <sect2 id="inheritance-mixing-tableperclass-tablepersubclass">
        <title>. Misturando tabela por hierarquia de classes com tabela por subclasse</title>

        <para>
            Você pode até mesmo misturar a estratégia de tabela por hierarquia e 
            tabela por subclasse usando esta abordagem:
        </para>

        <programlisting><![CDATA[<class name="Payment" table="PAYMENT">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="PAYMENT_TYPE" type="string"/>
    <property name="amount" column="AMOUNT"/>
    ...
    <subclass name="CreditCardPayment" discriminator-value="CREDIT">
        <join table="CREDIT_PAYMENT">
            <property name="creditCardType" column="CCTYPE"/>
            ...
        </join>
    </subclass>
    <subclass name="CashPayment" discriminator-value="CASH">
        ...
    </subclass>
    <subclass name="ChequePayment" discriminator-value="CHEQUE">
        ...
    </subclass>
</class>]]></programlisting>

        <para>
            Para qualquer uma dessas estratégias de mapeamento, uma associação 
            polimórfica para a classe raiz <literal>Payment</literal> deve ser 
            mapeada usando <literal>&lt;many-to-one&gt;</literal>.            
        </para>

        <programlisting><![CDATA[<many-to-one name="payment" column="PAYMENT_ID" class="Payment"/>]]></programlisting>
    
        </sect2>

        <sect2 id="inheritance-tableperconcrete" revision="2">
        <title>Tabela por classe concreta</title>

        <para>
            Existem duas formas que poderíamos usar a respeito da estratégia de 
            mapeamento de tabela por classe concreta. A primeira é usar 
            <literal>&lt;union-subclass&gt;</literal>..
        </para>

        <programlisting><![CDATA[<class name="Payment">
    <id name="id" type="long" column="PAYMENT_ID">
        <generator class="sequence"/>
    </id>
    <property name="amount" column="AMOUNT"/>
    ...
    <union-subclass name="CreditCardPayment" table="CREDIT_PAYMENT">
        <property name="creditCardType" column="CCTYPE"/>
        ...
    </union-subclass>
    <union-subclass name="CashPayment" table="CASH_PAYMENT">
        ...
    </union-subclass>
    <union-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        ...
    </union-subclass>
</class>]]></programlisting>

        <para>
            Três tabelas estão envolvidas para as subclasses. Cada tabela define 
            colunas para todas as propriedades da classe, incluindo propriedades herdadas.
        </para>
        
        <para>
						A limitação dessa abordagem é que se uma propriedade é mapeada na 
						superclasse, o nome da coluna deve ser o mesmo em todas as tabelas das 
						subclasses. (Nós devemos melhorar isto em um futuro release do Hibernate). 
						A estratégia do gerador de identidade não é permitida em união de 
						subclasses(union-subclass) herdadas, na verdade a fonte de chave 
						primária deve ser compartilhada através de todas subclasses unidas da 
						hierarquia.

        </para>

        <para>
            Se sua superclasse é abstrata, mapeie ela com  <literal>abstract="true"</literal>. 
            Claro, que se ela não for abstrata, uma tabela (padrão para <literal>PAYMENT</literal>  
            no exemplo acima) adicional é necessária para segurar as instâncias da superclasse.
        </para>

        </sect2>

        <sect2 id="inheritance-tableperconcreate-polymorphism">
        <title>Tabela por classe concreta, usando polimorfismo implícito</title>

        <para>
            Uma abordagem alternativa é fazer uso de polimorfismo implícito:
        </para>

        <programlisting><![CDATA[<class name="CreditCardPayment" table="CREDIT_PAYMENT">
    <id name="id" type="long" column="CREDIT_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CREDIT_AMOUNT"/>
    ...
</class>

<class name="CashPayment" table="CASH_PAYMENT">
    <id name="id" type="long" column="CASH_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CASH_AMOUNT"/>
    ...
</class>

<class name="ChequePayment" table="CHEQUE_PAYMENT">
    <id name="id" type="long" column="CHEQUE_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <property name="amount" column="CHEQUE_AMOUNT"/>
    ...
</class>]]></programlisting>
           
        <para>
            Veja que em nenhum lugar mencionamos a interface <literal>Payment</literal> 
            explicitamente. Também preste atenção que propriedades de <literal>Payment</literal> 
            são mapeadas em cada uma das subclasses. Se você quer evitar duplicação, 
            considere usar entidades de XML (ex. (e.g. <literal>[ &lt;!ENTITY allproperties 
            SYSTEM "allproperties.xml"&gt; ]</literal> na declaração do <literal>DOCTYPE</literal> 
            e <literal>&amp;allproperties;</literal> no mapeamento).
        </para>
        
        <para>
            A desvantagem dessa abordagem é que o Hibernate não gera <literal>UNION</literal>s 
            SQL quando executa pesquisas polimórficas.
        </para>

        <para>
            Para essa estratégia, uma associação polimórfica para <literal>Payment</literal>
            geralmente é mapeada usando <literal>&lt;any&gt;</literal>.
        </para>

        <programlisting><![CDATA[<any name="payment" meta-type="string" id-type="long">
    <meta-value value="CREDIT" class="CreditCardPayment"/>
    <meta-value value="CASH" class="CashPayment"/>
    <meta-value value="CHEQUE" class="ChequePayment"/>
    <column name="PAYMENT_CLASS"/>
    <column name="PAYMENT_ID"/>
</any>]]></programlisting>
           
        </sect2>

        <sect2 id="inheritace-mixingpolymorphism">
        <title>Misturando polimorfismo implícito com outros mapeamentos de herança</title>

        <para>
            Ainda existe uma coisa para ser observada com respeito a este mapeamento. 
            Desde que as subclasses sejam mapeadas em seu próprio elemento 
            <literal>&lt;class&gt;</literal> (e desde que <literal>Payment</literal> seja 
            apenas uma interface), cada uma das subclasses pode ser facilmente parte de uma 
            outra hierarquia de herança! (E você ainda pode usar pesquisas polimórficas 
            em cima da interface <literal>Payment</literal>.)
           
       </para>

        <programlisting><![CDATA[<class name="CreditCardPayment" table="CREDIT_PAYMENT">
    <id name="id" type="long" column="CREDIT_PAYMENT_ID">
        <generator class="native"/>
    </id>
    <discriminator column="CREDIT_CARD" type="string"/>
    <property name="amount" column="CREDIT_AMOUNT"/>
    ...
    <subclass name="MasterCardPayment" discriminator-value="MDC"/>
    <subclass name="VisaPayment" discriminator-value="VISA"/>
</class>

<class name="NonelectronicTransaction" table="NONELECTRONIC_TXN">
    <id name="id" type="long" column="TXN_ID">
        <generator class="native"/>
    </id>
    ...
    <joined-subclass name="CashPayment" table="CASH_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="amount" column="CASH_AMOUNT"/>
        ...
    </joined-subclass>
    <joined-subclass name="ChequePayment" table="CHEQUE_PAYMENT">
        <key column="PAYMENT_ID"/>
        <property name="amount" column="CHEQUE_AMOUNT"/>
        ...
    </joined-subclass>
</class>]]></programlisting>

        <para>
            Mais uma vez, nós não mencionamos <literal>Payment</literal> explicitamente. 
            Se nós executarmos uma pesquisa em cima da interface <literal>Payment</literal> – 
            por exemplo, <literal>from Payment</literal> – o Hibernate retorna 
            automaticamente instâncias de <literal>CreditCardPayment</literal> (e suas 
            subclasses, desde que elas também implementem <literal>Payment</literal>), 
            <literal>CashPayment</literal> e <literal>ChequePayment</literal> mas 
            não as instâncias de <literal>NonelectronicTransaction</literal>.
        </para>
        
        </sect2>

    </sect1>

    <sect1 id="inheritance-limitations">
        <title>Limitações</title>

        <para>
            Existem certas limitações para a abordagem do "polimorfismo implícito" 
            comparada com a estratégia de mapeamento da tabela por classe concreta. 
            Existe uma limitação um tanto menos restritiva para mapeamentos 
            <literal>&lt;union-subclass&gt;</literal>.
           
        </para>

        <para>
            A tabela seguinte demonstra as limitações do mapeamento de tabela 
            por classe concreta e do polimorfismo implícito no Hibernate.
        </para>
            
        <table frame="topbot">
            <title>Features of inheritance mappings</title>
            <tgroup cols='8' align='left' colsep='1' rowsep='1'>
            <colspec colname='c1' colwidth="1*"/>
            <colspec colname='c2' colwidth="1*"/>
            <colspec colname='c3' colwidth="1*"/>
            <colspec colname='c4' colwidth="1*"/>
            <colspec colname='c5' colwidth="1*"/>
            <colspec colname='c6' colwidth="1*"/>
            <colspec colname='c7' colwidth="1*"/>
            <colspec colname='c8' colwidth="1*"/>
            <thead>
            <row>
              <entry>Estratégia de Herança</entry>
              <entry>muitos-para-um Polimórfico</entry>
              <entry>um-para-um Polimórfico</entry>
              <entry>um-para-muitos Polimórfico</entry>
              <entry>muitos-para-muitos Polimórfico</entry>
              <entry><literal>load()/get()</literal> Polimórfico </entry>
              <entry>Pesquisas Polimórficas</entry>
              <entry>Joins polimórficos</entry>
              <entry>Outer join fetching</entry>
            </row>
            </thead>
            <tbody>
            <row>
                <entry>table per class-hierarchy</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal></entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>supported</emphasis></entry>
            </row>
            <row>
                <entry>table per subclass</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal></entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>supported</emphasis></entry>
            </row>
            <row>
                <entry>table per concrete-class (union-subclass)</entry>
                <entry><literal>&lt;many-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-one&gt;</literal></entry>
                <entry><literal>&lt;one-to-many&gt;</literal> (for <literal>inverse="true"</literal> only)</entry>
                <entry><literal>&lt;many-to-many&gt;</literal></entry>
                <entry><literal>s.get(Payment.class, id)</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><literal>from Order o join o.payment p</literal></entry>
                <entry><emphasis>supported</emphasis></entry>
            </row>
            <row>
                <entry>table per concrete class (implicit polymorphism)</entry>
                <entry><literal>&lt;any&gt;</literal></entry>
                <entry><emphasis>not supported</emphasis></entry>
                <entry><emphasis>not supported</emphasis></entry>
                <entry><literal>&lt;many-to-any&gt;</literal></entry>
                <entry><literal>s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()</literal></entry>
                <entry><literal>from Payment p</literal></entry>
                <entry><emphasis>not supported</emphasis></entry>
                <entry><emphasis>not supported</emphasis></entry>
            </row>
            </tbody>
            </tgroup>
        </table>

    </sect1>

</chapter>
