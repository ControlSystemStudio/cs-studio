<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="xml">
    <title>Mapeamento XML</title>

    <para><emphasis>
        Note that this is an experimental feature in Hibernate 3.0 and is under
        extremely active development.
        Veja que essa é uma feature experimental no Hibernate 3.0 e o 
        desenvolvimento esta bastante ativo.
        
    </emphasis></para>

    <sect1 id="xml-intro" revision="1">
        <title>Trabalhando com dados em XML</title>

        <para>
            O Hibernate permite que se trabalhe com dados persistentes em XML quase 
            da mesma maneira como você trabalhar com POJOs persistentes. Uma árvore XML 
            parseada, pode ser imaginada como apenas uma maneira de representar os 
            dados relacionais como objetos, ao invés dos POJOs.
        </para>

        <para>
            O Hibernate suporta a API dom4j para manipular árvores XML. Você pode escrever 
            queries que retornem árvores dom4j do banco de dados e automaticamente 
            sincronizar com o banco de dados qualquer modificação feita nessas árvores. 
            Você pode até mesmo pegar um documento XML, parsear usando o  dom4j, e escrever 
            as alterações no banco de dados usando quaisquer operações básicas do Hibernate: 
            <literal>persist(), saveOrUpdate(),merge(), delete(), replicate()</literal> 
            (merging ainda não é suportado)
        </para>

        <para>
            Essa funcionalidade tem várias aplicações incluindo importação/exportação de dados, 
            externalização de dados de entidade via JMS or SOAP e relatórios usando XSLT.
        </para>
        
        <para>
            Um mapeamento simples pode ser usado para simultaneamente mapear propriedades 
            da classe e nós de um documento XML para um banco de dados ou, se não houver 
            classe para mapear, pode ser usado simplesmente para mapear o XML.
        </para>
        
        <sect2 id="xml-intro-mapping">
            <title>Especificando o mapeamento de uma classe e de um arquivo XML simultaneamente</title>

            <para>
                Segue um exemplo de como mapear um POJO e um XML ao mesmo tempo:
            </para>
            
            <programlisting><![CDATA[<class name="Account" 
        table="ACCOUNTS" 
        node="account">
        
    <id name="accountId" 
            column="ACCOUNT_ID" 
            node="@id"/>
            
    <many-to-one name="customer" 
            column="CUSTOMER_ID" 
            node="customer/@id" 
            embed-xml="false"/>
            
    <property name="balance" 
            column="BALANCE" 
            node="balance"/>
            
    ...
    
</class>]]></programlisting>
        </sect2>
        
        <sect2 id="xml-onlyxml">
            <title>Especificando somente um mapeamento XML</title>

            <para>
                Segue um exemplo que não contém uma classe POJO:
            </para>
            
            <programlisting><![CDATA[<class entity-name="Account" 
        table="ACCOUNTS" 
        node="account">
        
    <id name="id" 
            column="ACCOUNT_ID" 
            node="@id" 
            type="string"/>
            
    <many-to-one name="customerId" 
            column="CUSTOMER_ID" 
            node="customer/@id" 
            embed-xml="false" 
            entity-name="Customer"/>
            
    <property name="balance" 
            column="BALANCE" 
            node="balance" 
            type="big_decimal"/>
            
    ...
    
</class>]]></programlisting>
        
            <para>
                Esse mapeamento permite que você acesse os dados como uma árvore dom4j ou um 
                grafo de de pares nome de propriedade/valor (<literal>Map</literal>s do Java). 
                Os nomes de propriedades são somente construções lógicas que podem ser 
                referenciadas em consultas HQL.
            </para>

        </sect2>
        
     </sect1>
     
    <sect1 id="xml-mapping" revision="1">
        <title>Mapeando metadados com XML</title>

        <para>
            Muitos elementos do mapeamento do Hibernate aceitam o atributo  <literal>node</literal>. 
            Por meio dele, você pode especificar o nome de um atributo ou elemento XML que contém 
            a propriedade ou os dados da entidade. O formato do atributo  <literal>node</literal>
            deve ser o seguinte:            
        </para>
        
        <itemizedlist spacing="compact">
        <listitem>
            <para><literal>"element-name"</literal> - mapeia para o elemento XML com determinado nome</para>
        </listitem>
        <listitem>
            <para><literal>"@attribute-name"</literal> - mapeia para o atributo XML com determinado nome</para>
        </listitem>
        <listitem>
            <para><literal>"."</literal> - mapeia para o elemento pai</para>
        </listitem>
        <listitem>
            <para>
                <literal>"element-name/@attribute-name"</literal> - 
                mapeia para para o atributo com determinado nome do elemento com determinado nome
            </para>
        </listitem>
        </itemizedlist>
        
        <para>
            Para coleções e associações simples, existe o atributo adicional <literal>embed-xml</literal>. 
            Se o atributo <literal>embed-xml="true"</literal>, que é o valor padrão, a árvore XML para a 
            entidade associada (ou coleção de determinado tipo de valor) será embutida diretamente na 
            árvore XML que contém a associação. Por outro lado, se <literal>embed-xml="false"</literal>, 
            então apenas o valor do identificador referenciado irá aparecer no XML para associações 
            simples e coleções simplesmentenão irão aparecer.
        </para>
        
        <para>
            Você precisa tomar cuidado em não deixar o<literal>embed-xml="true"</literal> 
            para muitas associações, pois o XML não suporta bem referências circulares.
        </para>
        
        <programlisting><![CDATA[<class name="Customer" 
        table="CUSTOMER" 
        node="customer">
        
    <id name="id" 
            column="CUST_ID" 
            node="@id"/>
            
    <map name="accounts" 
            node="." 
            embed-xml="true">
        <key column="CUSTOMER_ID" 
                not-null="true"/>
        <map-key column="SHORT_DESC" 
                node="@short-desc" 
                type="string"/>
        <one-to-many entity-name="Account"
                embed-xml="false" 
                node="account"/>
    </map>
    
    <component name="name" 
            node="name">
        <property name="firstName" 
                node="first-name"/>
        <property name="initial" 
                node="initial"/>
        <property name="lastName" 
                node="last-name"/>
    </component>
    
    ...
    
</class>]]></programlisting>

        <para>
            Nesse caso, decidimos embutir a colenção de account ids, e não os dados de accounts. 
            A query HQL a seguir:
        </para>
        
        <programlisting><![CDATA[from Customer c left join fetch c.accounts where c.lastName like :lastName]]></programlisting>
        
        <para>
            Retornaria  um conjunto de dados como esse:
        </para>
        
        <programlisting><![CDATA[<customer id="123456789">
    <account short-desc="Savings">987632567</account>
    <account short-desc="Credit Card">985612323</account>
    <name>
        <first-name>Gavin</first-name>
        <initial>A</initial>
        <last-name>King</last-name>
    </name>
    ...
</customer>]]></programlisting>

        <para>
            Se você setar <literal>embed-xml="true"</literal> em um mapeamento 
            <literal>&lt;one-to-many&gt;</literal>, os dados se pareceriam com o seguinte:
        </para>
        
        <programlisting><![CDATA[<customer id="123456789">
    <account id="987632567" short-desc="Savings">
        <customer id="123456789"/>
        <balance>100.29</balance>
    </account>
    <account id="985612323" short-desc="Credit Card">
        <customer id="123456789"/>
        <balance>-2370.34</balance>
    </account>
    <name>
        <first-name>Gavin</first-name>
        <initial>A</initial>
        <last-name>King</last-name>
    </name>
    ...
</customer>]]></programlisting>
       
    </sect1>
    
    
    <sect1 id="xml-manipulation" revision="1">
        <title>Manipulando dados em XML</title>
        
        <para>
            Vamos reler e atualizar documentos em XML em nossa aplicação. Nós fazemos isso 
            obtendo uma session do dom4j:            
        </para>
        
       <programlisting><![CDATA[Document doc = ....;
       
Session session = factory.openSession();
Session dom4jSession = session.getSession(EntityMode.DOM4J);
Transaction tx = session.beginTransaction();

List results = dom4jSession
    .createQuery("from Customer c left join fetch c.accounts where c.lastName like :lastName")
    .list();
for ( int i=0; i<results.size(); i++ ) {
    //add the customer data to the XML document
    Element customer = (Element) results.get(i);
    doc.add(customer);
}

tx.commit();
session.close();]]></programlisting>
       
       <programlisting><![CDATA[Session session = factory.openSession();
Session dom4jSession = session.getSession(EntityMode.DOM4J);
Transaction tx = session.beginTransaction();

Element cust = (Element) dom4jSession.get("Customer", customerId);
for ( int i=0; i<results.size(); i++ ) {
    Element customer = (Element) results.get(i);
    //change the customer name in the XML and database
    Element name = customer.element("name");
    name.element("first-name").setText(firstName);
    name.element("initial").setText(initial);
    name.element("last-name").setText(lastName);
}

tx.commit();
session.close();]]></programlisting>

        <para>
            É extremamente útil combinar essa funcionalidade com a operação <literal>replicate()</literal>
            do Hibernate para implementar importação/exportação baseadas em XML.
        </para>
       
    </sect1>
     
</chapter>

