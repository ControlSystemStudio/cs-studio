<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="filters">
    <title>Filtrando dados</title>
    
    <para>
        O Hibernate3 provê um novo método inovador para manusear dados com regras de "visibilidade". 
        Um <emphasis>Filtro do Hibernate</emphasis> é um filtro global, nomeado e parametrizado que pode 
        se habilitado ou não dentro de um Session do Hibernate.        
    </para>

    <sect1 id="objectstate-filters">
        <title>Filtros do Hibernate</title>

        <para>
            O Hibernate tem a habilidade de pré definir os critérios do filtro e anexar esses filtros no 
            nível da classe e no nível da coleção. Um critério do filtro é a habilidade de definir uma 
            cláusula restritiva muito semelhante ao atributo "where" disponível para a classe e várias 
            coleções. A não ser que essas condições de filtros podem ser parametrizadas. A aplicação 
            pode, então, fazer uma decisão em tempo de execução se os filtros definidos devem estar 
            habilitados e quais valores seus parâmetros devem ter. Os filtros podem ser usados como 
            Views de bancos de dados, mas com parametros internos à aplicação.
        </para>

        <para>
            Para usar esses filtros, eles primeiramente devem ser definidos e anexados aos elementos do 
            mapeamento apropriados. Para definir um filtro, use o elemento <literal>&lt;filter-def/&gt;</literal>
            dentro do elemento <literal>&lt;hibernate-mapping/&gt;</literal>:
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter">
    <filter-param name="myFilterParam" type="string"/>
</filter-def>]]></programlisting>

        <para>
            Então esse filtro pode ser anexo à uma classe:
        </para>

        <programlisting><![CDATA[<class name="myClass" ...>
    ...
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</class>]]></programlisting>

        <para>
            ou em uma coleção:
        </para>

        <programlisting><![CDATA[<set ...>
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</set>]]></programlisting>

        <para>
            ou mesmo para ambos (ou muitos de cada) ao mesmo tempo.
        </para>

        <para>
            Os métodos na <literal>Session</literal> são: <literal>enableFilter(String filterName)</literal>,
            <literal>getEnabledFilter(String filterName)</literal>, e <literal>disableFilter(String filterName)</literal>.
            Por padrão, os filtros não são habilitados dentro de qualquer session; Eles devem ser explicitamente 
            habilitados usando o método  <literal>Session.enableFilter()</literal>, que retorna uma instância da 
            interface <literal>Filter</literal>. Usando o filtro simples definido acima, o código se pareceria 
            com o seguinte:
        </para>

        <programlisting><![CDATA[session.enableFilter("myFilter").setParameter("myFilterParam", "some-value");]]></programlisting>

        <para>
            Veja que os métodos da interface org.hibernate.Filter permite o encadeamento de funções, comum à maioria das funções do Hibernate.
        </para>

        <para>
            Um exemplo completo, usando dados temporais com um padrão efetivo de registro de datas:
        </para>

        <programlisting><![CDATA[<filter-def name="effectiveDate">
    <filter-param name="asOfDate" type="date"/>
</filter-def>

<class name="Employee" ...>
...
    <many-to-one name="department" column="dept_id" class="Department"/>
    <property name="effectiveStartDate" type="date" column="eff_start_dt"/>
    <property name="effectiveEndDate" type="date" column="eff_end_dt"/>
...
    <!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake
    -->
    <filter name="effectiveDate"
            condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
</class>

<class name="Department" ...>
...
    <set name="employees" lazy="true">
        <key column="dept_id"/>
        <one-to-many class="Employee"/>
        <filter name="effectiveDate"
                condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
    </set>
</class>]]></programlisting>

        <para>
            Para garantir que você sempre tenha registro efetivos, simplesmente habilite o filtro 
            na session antes de recuperar os dados dos empregados:
        </para>

<programlisting><![CDATA[Session session = ...;
session.enableFilter("effectiveDate").setParameter("asOfDate", new Date());
List results = session.createQuery("from Employee as e where e.salary > :targetSalary")
         .setLong("targetSalary", new Long(1000000))
         .list();
]]></programlisting>

        <para>
            No HQL acima, mesmo que mencionamos apenas uma restrição de salário nos resultados, por causa  
            do filtro habilitado, a consulta retornará apenas os funcionários ativos cujo salário é maior 
            que um milhão de dólares.
        </para>

        <para>
            Nota: se você planeja usar filtros com outer join (por HQL ou por load fetching) seja cuidadoso 
            na direção da expressão de condição. É mais seguro configura-lo com para um left outer join; 
            geralmente, coloque o parâmetro primeiro seguido pelo nome da coluna após o operador.
        </para>

    </sect1>

</chapter>

