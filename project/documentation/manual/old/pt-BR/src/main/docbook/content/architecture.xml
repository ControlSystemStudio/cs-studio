<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="architecture">

    <title>Arquitetura</title>

    <sect1 id="architecture-overview" revision="1">
        <title>Vis&#x00E3;o Geral</title>
        
        <para>
            Uma vis&#x00E3;o bem ampla da arquitetura do Hibernate:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/overview.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/overview.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Esse diagrama mostra o Hibernate usando o banco de dados e a configuração 
            de dados para prover persistência de serviços (e persistência de objetos) 
            para o aplicativo.
        </para>

        <para>
            Nós gostaríamos de mostrar uma visão mais detalhada da arquitetura em execução. 
            Infelizmente, o Hibernate é muito flexível e suporta v&#x00E1;rias aproximações. 
            Nós iremos mostrar os dois extremos. Na arquitetura mais simples o aplicativo 
            fornece suas próprias conexões JDBC e gerencia suas transações. Esta abordagem 
            usa o mínimo de subconjuntos das APIs do Hibernate:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/lite.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/lite.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            A arquitetura "completa" abstrai a aplicação de ter de lidar diretamente 
            com JDBC/JTA e APIs e deixa o Hibernate tomar conta dos detalhes.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/full_cream.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/full_cream.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Algumas definições dos objetos do diagrama:

            <variablelist spacing="compact">
                <varlistentry>
                    <term>SessionFactory (<literal>org.hibernate.SessionFactory</literal>)</term>
                    <listitem>
                        <para>
                            Um cache threadsafe  (imutáveis) composto de identidades compiladas para um 
                            único banco de dados. Uma fabrica para <literal>Session</literal> e um cliente 
                            de <literal>ConnectionProvider</literal>. Pode conter um cachê opcional de 
                            dados (segundo nível) reutilizáveis entre transações, no nível de processo- ou cluster.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Session (<literal>org.hibernate.Session</literal>)</term>
                    <listitem>
                        <para>
                            Objeto single-threaded, de vida curta, representando uma conversação entre 
                            o aplicativo e o armazenamento persistente. Cria uma camada sobre uma conexão JDBC. 
                            É uma fabrica de <literal>Transaction</literal>. Possui um cachê obrigatório 
                            (primeiro nível) de objetos persistentes, usado para navegação no gráficos 
                            de objetos e pesquisa de objetos pelo identificador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Objetos persistentes e coleções</term>
                    <listitem>
                        <para>
                            Objetos, de vida curta, single threaded contendo estado persistente e função 
                            de negócios. Esses podem ser JavaBeans/POJOs, onde única coisa especial sobre 
                            eles é que são associados a (exatamente uma) <literal>Session</literal>. 
                            Quando a <literal>Session</literal>  é fechada, eles são separados e liberados 
                            para serem usados dentro de qualquer camada da aplicacao (Ex. diretamente como 
                            data transfer objects de e para a camada de apresentação)
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Objetos e coleções desatachados e transientes</term>
                    <listitem>
                        <para>
                            Instâncias de classes persistentes que ainda não estão associadas a uma 
                            <literal>Session</literal>. Eles podem ter sido instanciados pela aplicação
                            e não persistido (ainda) ou eles foram instanciados por uma <literal>Session</literal>
                            que foi encerrada.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Transaction (<literal>org.hibernate.Transaction</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Objeto de vida curta, single threaded, usado pela aplicação para 
                            especificar unidades atômicas de trabalho. Abstrai o aplicativo de lidar 
                            diretamente com transações JDBC, JTA ou CORBA.  Uma <literal>Session</literal> pode, 
                            em alguns casos, iniciar várias <literal>Transaction</literal>s. Entretanto, 
                            a demarcação da transação, mesmo utilizando API ou Transaction subjacentes, 
                            nunca é opcional!
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ConnectionProvider (<literal>org.hibernate.connection.ConnectionProvider</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Uma fábrica de (e combinações de) conexões JDBC. Abstrai a aplicação
                            de lidar diretamente com <literal>Datasource</literal> ou <literal>DriverManager</literal>.
                            Não exposto para a aplicação, mas pode ser implementado ou estendido pelo programador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>TransactionFactory (<literal>org.hibernate.TransactionFactory</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Uma fábrica para instâncias de <literal>Transaction</literal>. Não exposta 
                            a aplicação, mas pode ser extendida/implementada pelo programador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Extension Interfaces</emphasis></term>
                    <listitem>
                        <para>
                            O Hibernate oferece várias opções de interfaces estendidas que você pode implementar 
                            para customizar sua camada persistente. Veja a documentação da API para maiores detalhes. 
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>

        <para>
            Dada uma arquitetura simples, o aplicativo passa pelas APIs 
            <literal>Transaction</literal>/<literal>TransactionFactory</literal> e/ou 
            <literal>ConnectionProvider</literal> para se comunicar diretamente com a transação JTA ou JDBC.
        </para>
    </sect1>

    <sect1 id="architecture-states" revision="1">
        <title>Estados de instância</title>
        <para>
            Uma instância de classes persistentes pode estar em um dos três diferentes estados, 
            que são definidos respeitando um <emphasis>contexto persistente</emphasis>. 
            O objeto <literal>Session</literal> do Hibernate é o contexto persistente:
        </para>
        
       <variablelist spacing="compact">
            <varlistentry>
                <term>transiente</term>
                <listitem>
                    <para>
                        A instância não é, e nunca foi associada com nenhum 
                        contexto persistente. Não possui uma identidade persistente 
                        (valor de chave primária).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>persistente</term>
                <listitem>
                    <para>
                       	A instância está atualmente associada a um contexto persistente. 
                       	Possui uma identidade persistente (valor de chave primária) e, 
                       	talvez, correspondente a um registro no banco de dados. Para um 
                       	contexto persistente em particular, o Hibernate 
                       	<emphasis>guarantees</emphasis> que a identidade persistente 
                       	é equivalente a identidade Java (na localização em memória do 
                       	objeto).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>desatachado</term>
                <listitem>
                    <para>
                        A instância foi associada com um contexto persistente, 
                        porém este contexto foi fechado, ou a instância 
                        foi serializada por outro processo. Possui uma identidade 
                        persistente, e, talvez, correspondenta a um registro no 
                        banco de dados. Para instâncias desatachadas, o Hibernate 
                        não garante o relacionamento entre identidade persistente 
                        e identidade Java.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>    

    <sect1 id="architecture-jmx" revision="1">
        <title>Integração JMX</title>

        <para>
            JMX é padrão J2EE para manipulação de componentes Java. O Hibernate pode ser manipulado 
            por um serviço JMX padrão. Nós fornecemos uma implementação do MBean na distribuição, 
            <literal>org.hibernate.jmx.HibernateService</literal>.
        </para>

        <para>
            Para um exemplo de como instalar o Hibernate como um serviço JMX em um servidor de 
            aplicativo JBoss, por favor, consulte o manual do usuário do JBoss. No JBoss As, você 
            poderá ver os benefícios de de se fazer o deploy usando JMX:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>Session Management:</emphasis> O ciclo de vida de uma <literal>Session</literal> do 
                    Hibernate pode ser automaticamente conectada a um escopo de transação JTA. Isso significa 
                    que você não precisará mais abrir e fechar manualmente uma <literal>Session</literal>, isso 
                    se torna trabalho para um interceptor EJB do JBoss . Você também não precisa se preocupar, 
                    nunca mais, com demarcação de transação em seu código (a não ser que você prefira escrever 
                    uma camada persistente portável, para isso, use a API opcional do Hibernate  
                    <literal>Transaction</literal>). Você deve chamar <literal>HibernateContext</literal> 
                    para acessar uma <literal>Session</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>HAR deployment:</emphasis>: Normalmente você faz o deploy de um serviço JMX do
                    Hibernate usando um serviço descritor de deploy do JBoss (em um EAR e/ou arquivo SAR), 
                    que suporta todas as configurações usuais de uma <literal>SessionFactory</literal> do 
                    Hibernate. Entretanto, você ainda precisa nomear todos os seus arquivos de mapeamento 
                    no descritor de deploração. Se você decidir usar o deploy opcional HAR, o JBoss irá 
                    automaticamente detectar todos os seus arquivos de mapeamento no seu arquivo HAR.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Consulte o manual do usuário do JBoss AS, para obter maiores informações sobre essas opções.
        </para>

        <para>
            Another feature available as a JMX service are runtime Hibernate statistics. See
            <xref linkend="configuration-optional-statistics"/>.
            Outra opção disponível como um serviço JMX são as estatísticas de execução do Hibernate. 
            Veja a <xref linkend="configuration-optional-statistics"/>.
        </para>
    </sect1>

    <sect1 id="architecture-jca" revision="1">
        <title>Suporte JCA</title>
        <para>
            Hibernate may also be configured as a JCA connector. Please see the website for more
            details. Please note that Hibernate JCA support is still considered experimental.
            O Hibernate pode também ser configurado como um conector JCA. Por favor, visite o 
            website para maiores detalhes. Entretanto, note que o suporte JCA do Hibernate 
            ainda é considerado experimental.
        </para>
    </sect1>

    <sect1 id="architecture-current-session" revision="2">
        <title>Sessões contextuais</title>
        <para>
            Muitas aplicações que usam o Hibernate necessita de algum tipo de sessão "contextual", 
            onde uma sessão dada é na verdade um escopo de um contexto. Entretanto, através de aplicações 
            a definição sobre um contexto é geralmente diferente; e contextos diferentes definem escopos 
            diferentes. Aplicações usando versões anteriores ao Hibernate 3.0 tendem a utilizar tanto 
            sessões contextuais baseadas em <literal>ThreadLocal</literal>, classes utilitárias como 
            <literal>HibernateUtil</literal>, ou utilizar frameworks de terceiros(como Spring ou Pico) 
            que provê sessões contextuais baseadas em proxy.

        </para>
        <para>
            A partir da versão 3.0.1, o Hibernate adicionou o método <literal>SessionFactory.getCurrentSession()</literal>.
            Inicialmente, este assume o uso de transações <literal>JTA</literal>, onde a transação 
            <literal>JTA</literal> define tanto o escopo quanto o contexto de uma sessão atual. 
            O time do Hibernate mantém este recurso, desenvolvendo as diversas implementações do 
            <literal>JTA TransactionManager</literal>, a maioria (se não todos) aplicativos deveria 
            utilizar o gerenciador de transações <literal>JTA</literal> sendo ou não instalados dentro 
            de um container <literal>J2EE</literal>. Baseado neste recurso, você deveria sempre utilizar sessões 
            contextuais baseadas em <literal>JTA</literal>.
        </para>
        <para>
            Entretanto, na versão 3.1, o processo por trás do método <literal>SessionFactory.getCurrentSession()</literal> 
            é agora plugavel. Com isso, uma nova interface (<literal>org.hibernate.context.CurrentSessionContext</literal>)
            e um novo parâmetro de configuração (<literal>hibernate.current_session_context_class</literal>)
            foram adicionados para possibilitar a compatibilidade do contexto e do escopo na definição de sessões correntes.
        </para>
        <para>
            De uma olhada em Javadocs sobre a interface <literal>org.hibernate.context.CurrentSessionContext</literal>
            para uma discussão detalhada. Ela define um método único, <literal>currentSession()</literal>, 
            com o qual a implementação é responsável por rastrear a sessão contextual corrente. 
            Por fora do "encapsulamento", o Hibernate possui duas implementações dessa interface.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <literal>org.hibernate.context.JTASessionContext</literal> - As sessões correntes 
                    são rastreadas e recebem um escopo por uma transação <literal>JTA</literal>. 
                    O processamento aqui é exatamente igual ao antigo processo JTA. Consulte em 
                    Javadocs para maiores detalhes.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>org.hibernate.context.ThreadLocalSessionContext</literal> - As sessões 
                    correntes são rastreadas por uma thread de execução. Novamente, consulte em 
                    Javadocs para maiores detalhes.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>org.hibernate.context.ManagedSessionContext</literal> - current
                    sessions are tracked by thread of execution. However, you are responsible to
                    bind and unbind a <literal>Session</literal> instance with static methods
                    on this class, it does never open, flush, or close a <literal>Session</literal>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            As duas primeiras implementações usam o modelo de programação "uma sessão – uma transação 
            do banco de dados", também conhecida e usado como <emphasis>sessão por requisição</emphasis>. 
            O começo e o fim de uma sessão Hibernate é definida pela duração da transação do banco de dados. 
            Se você usa demarcação programática de transação (por exemplo. em J2SE puro ou com JTA
            /UserTransaction/BMT), você é recomendado a usar a API Hibernate <literal>Transaction</literal> 
            para esconder a base do sistema de transação do seu código. Se você executa em um container EJB 
            que suporta CMT, os limites das transações são definidas declarativamente e você não necessita 
            de qualquer transação ou operação de demarcação de sessão no seu código. Consulte o <xref linkend="transactions"/>
            para mais informações exemplos de código.
        </para>

        <para>
            O parâmetro de configuração <literal>hibernate.current_session_context_class</literal> 
            define que a implementação <literal>org.hibernate.context.CurrentSessionContext</literal> 
            deve ser usada. Note que para compatibilidade anterior, se este parâmetro de configuração 
            não é determinado mas um <literal>org.hibernate.transaction.TransactionManagerLookup</literal> 
            é configurado, Hibernate usará o <literal>org.hibernate.context.JTASessionContext</literal>.
            Tipicamente, o valor deste parâmetro nomearia apenas a classe de implementação para usar; 
            para as duas implementações out-of-the-box, entretanto, há três pequenos nomes correspondentes, 
            "jta", "thread", and "managed".
        </para>
        
    </sect1>

</chapter>
