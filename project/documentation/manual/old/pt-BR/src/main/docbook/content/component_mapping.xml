<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="components">
    <title>Mapeamento de Componentes</title>

    <para>
        A noção de <emphasis>componente</emphasis>  é reusada em vários contextos diferentes, 
        para propósitos diferentes, pelo Hibernate.


    </para>

    <sect1 id="components-dependentobjects" revision="2" >
        <title>Objetos dependentes</title>

        <para>
            Um componente é um objeto contido que é persistido como um tipo de valor, não uma 
            referência de entidade. O termo "componente" refere-se à noção de composição da 
            orientação a objetos (não a componentes no nível de arquitetura). Por exemplo, você 
            pode modelar uma pessoa desta maneira:
        </para>

        <programlisting><![CDATA[public class Person {
    private java.util.Date birthday;
    private Name name;
    private String key;
    public String getKey() {
        return key;
    }
    private void setKey(String key) {
        this.key=key;
    }
    public java.util.Date getBirthday() {
        return birthday;
    }
    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }
    public Name getName() {
        return name;
    }
    public void setName(Name name) {
        this.name = name;
    }
    ......
    ......
}]]></programlisting>

<programlisting><![CDATA[public class Name {
    char initial;
    String first;
    String last;
    public String getFirst() {
        return first;
    }
    void setFirst(String first) {
        this.first = first;
    }
    public String getLast() {
        return last;
    }
    void setLast(String last) {
        this.last = last;
    }
    public char getInitial() {
        return initial;
    }
    void setInitial(char initial) {
        this.initial = initial;
    }
}]]></programlisting>

        <para>
            Agora <literal>Name</literal> pode ser persistido como um componente 
            de <literal>Person</literal>. Note que <literal>Name</literal> define métodos 
            getter e setter para suas propriedades persistentes, mas não necessita declarar 
            nenhuma interface ou propriedades identificadoras.
        </para>

        <para>
            Nosso mapeamento do Hibernate seria semelhante a isso
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name"> <!-- class attribute optional -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

        <para>
            A tabela pessoa teria as seguintes colunas  <literal>pid</literal>,
            <literal>birthday</literal>,
            <literal>initial</literal>,
            <literal>first</literal> and
            <literal>last</literal>.
        </para>

        <para>
            Assim como todos tipos por valor, componentes não suportam referencias cruzadas. Em 
            outras palavras, duas pessoas poderiam possuir o mesmo nome, mas os dois objetos 
            pessoa poderiam conter dois objetos nome independentes, apenas com "o mesmo" por valor. 
            A semântica dos valores null de um componente são <emphasis>ad hoc</emphasis>. No 
            recarregameno do conteúdo do objeto, O Hibernate assumira que se todas as colunas 
            do componente são null, então todo o componente é null. Isto seria o certo para 
            a maioria dos propósitos.
        </para>

        <para>
            As propriedades de um componente podem ser de qualquer tipo do Hibernate(collections, 
            associações muitos-para-um, outros componentes, etc). Componentes agrupados 
            <emphasis>não </emphasis> devem ser consideros um uso exótico. O Hibernate tem 
            a intenção de suportar um modelo de objetos muito bem granulado.
        </para>

        <para>
            O elemento <literal>&lt;component&gt;</literal> permite um subelemento 
            <literal>&lt;parent&gt;</literal> que mapeia uma propriedade da classe componente 
            como uma referência de volta para a entidade que a contém.
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name" unique="true">
        <parent name="namedPerson"/> <!-- reference back to the Person -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-incollections" revision="1">
        <title>Collections de objetos dependentes</title>

        <para>
            Collections de componentes são suportadadas(ex. uma array de 
            tipo <literal>Name</literal>). Declare a sua collection de 
            componentes substituindo a tag<literal>&lt;element&gt;</literal>
            pela tag <literal>&lt;composite-element&gt;</literal>.
        </para>

        <programlisting><![CDATA[<set name="someNames" table="some_names" lazy="true">
    <key column="id"/>
    <composite-element class="eg.Name"> <!-- class attribute required -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </composite-element>
</set>]]></programlisting>

        <para>
            Nota: se você definir um  <literal>Set</literal> de elementos compostos, 
            é muito importante implementar  <literal>equals()</literal> e 
            <literal>hashCode()</literal> corretamente.
        </para>

        <para>
            Elementos compostos podem conter componentes mas não collections. Se o 
            seu elemento composto contiver componentes , use a tag 
            <literal>&lt;nested-composite-element&gt;</literal> . Este é um caso 
            bastante exótico – uma collections de componentes que por si própria 
            possui componentes. Neste momento você deve estar se perguntando se 
            uma associação de um-para-muitos seria mais apropriada. Tente remodelar 
            o elemento composto como uma entidade – mas note que mesmo pensando 
            que o modelo Java é o mesmo, o modelo relacional e a semântica de 
            persistência  ainda são diferentes.
        </para>

        <para>
            Por favor, note que um mapeamento de elemento composto não suporta propriedades 
            capazes de serem null se você estiver usando um <literal>&lt;set&gt;</literal>. 
            O Hibernate tem que usar cada valor das colunas para identificar um registro 
            quando estiver deletando objetos (não existe coluna chave primária separada na 
            tabela de elemento composto), que não é possível com valores null. 
            Você tem que usar um dos dois, ou apenas propriedades não null em um elemento 
            composto ou escolher uma <literal>&lt;list&gt;</literal>, 
            <literal>&lt;map&gt;</literal>, <literal>&lt;bag&gt;</literal> ou
            <literal>&lt;idbag&gt;</literal>.
        </para>

        <para>
            Um caso especial de elemento composto é um elemento composto com um elemento 
            <literal>&lt;many-to-one&gt;</literal>  aninhado. Um mapeamento como este 
            permite você a mapear colunas extras de uma tabela de associação de 
            muitos-para-muitos para a classe de elemento composto. A seguinte 
            associação de muitos-para-muitos de <literal>Order</literal> para um
            <literal>Item</literal> onde <literal>purchaseDate</literal>, 
            <literal>price</literal> e <literal>quantity</literal> são propriedades 
            da associação:
        </para>

        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.Purchase">
            <property name="purchaseDate"/>
            <property name="price"/>
            <property name="quantity"/>
            <many-to-one name="item" class="eg.Item"/> <!-- class attribute is optional -->
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            Claro, que não pode ter uma referência para purchase no outro lado, para a 
            navegação da associação bidirecional. Lembre-se que componentes são tipos por 
            valor e não permitem referências compartilhadas. Uma classe <literal>Purchase</literal>
            simples pode estar no set de uma classe <literal>Order</literal>, mas ela não 
            pode ser referenciada por <literal>Item</literal> no mesmo momento.
        </para>

        <para>Até mesmo associações ternárias (ou quaternária, etc) são possíveis:</para>


        <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.OrderLine">
            <many-to-one name="purchaseDetails class="eg.Purchase"/>
            <many-to-one name="item" class="eg.Item"/>
        </composite-element>
    </set>
</class>]]></programlisting>

        <para>
            Elementos compostos podem aparecer em pesquisas usando a mesma 
            sintaxe assim como associações para outras entidades.
        </para>

    </sect1>

    <sect1 id="components-asmapindex">
        <title>Componentes como índices de Map</title>

        <para>
            O elemento <literal>&lt;composite-map-key&gt;</literal> permite você mapear 
            uma classe componente como uma chave de um <literal>Map</literal>. Tenha 
            certeza que você sobrescreveu <literal>hashCode()</literal> e
            <literal>equals()</literal>  corretamente na classe componente.
        </para>
    </sect1>

    <sect1 id="components-compositeid" revision="1">
        <title>. Componentes como identificadores compostos</title>

        <para>
            Você pode usar um componente como um identificador de uma classe entidade. 
            Sua classe componente deve satisfazer certos requisitos:
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                   Ele deve implementar <literal>java.io.Serializable</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Ele deve re-implementar <literal>equals()</literal> e
                    <literal>hashCode()</literal>, consistentemente com a noção 
                    de igualdade de chave composta do banco de dados.
                </para>
            </listitem>
        </itemizedlist>
        
        <para>
            <emphasis>Nota: no Hibernate 3, o segundo requisito não é um requisito absolutamente 
            necessário.  Mas atenda ele de qualquer forma.</emphasis>
        </para>

        <para>
            Você não pode usar um <literal>IdentifierGenerator</literal> para gerar chaves compostas. 
            Ao invés disso o aplicativo deve gerenciar seus próprios identificadores.
        </para>

        <para>
            Use a tag  <literal>&lt;composite-id&gt;</literal> (com elementos 
            <literal>&lt;key-property&gt;</literal> aninhados) no lugar da declaração 
            <literal>&lt;id&gt;</literal> de costume. Por exemplo, a classe 
            <literal>OrderLine</literal> possui uma chave primária que depende da 
            chave primária (composta) de <literal>Order</literal>.
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    
    <composite-id name="id" class="OrderLineId">
        <key-property name="lineId"/>
        <key-property name="orderId"/>
        <key-property name="customerId"/>
    </composite-id>
    
    <property name="name"/>
    
    <many-to-one name="order" class="Order"
            insert="false" update="false">
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-one>
    ....
    
</class>]]></programlisting>

        <para>
            Agora, qualquer chave estrangeira referenciando a tabela <literal>OrderLine</literal>
            também serão compostas. Você deve declarar isto em seus mapeamentos para outras 
            classes. Uma associação para <literal>OrderLine</literal> seria mapeada dessa forma:
        </para>

        <programlisting><![CDATA[<many-to-one name="orderLine" class="OrderLine">
<!-- the "class" attribute is optional, as usual -->
    <column name="lineId"/>
    <column name="orderId"/>
    <column name="customerId"/>
</many-to-one>]]></programlisting>

        <para>
            (Note que a tag  <literal>&lt;column&gt;</literal> é uma alternativa para o 
            atributo  <literal>column</literal> por toda a parte.)


        </para>
        
        <para>
            Uma associação <literal>many-to-many</literal> para <literal>many-to-many</literal>
            também usa a chave estrangeira composta:
        </para>
    
    <programlisting><![CDATA[<set name="undeliveredOrderLines">
    <key column name="warehouseId"/>
    <many-to-many class="OrderLine">
        <column name="lineId"/>
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-many>
</set>]]></programlisting>

        <para>
            A collection de <literal>OrderLine</literal>s em <literal>Order</literal> usaria:
        </para>

    <programlisting><![CDATA[<set name="orderLines" inverse="true">
    <key>
        <column name="orderId"/>
        <column name="customerId"/>
    </key>
    <one-to-many class="OrderLine"/>
</set>]]></programlisting>

        <para>
            (O elemento <literal>&lt;one-to-many&gt;</literal>, como de costume, não declara colunas.)


        </para>
        
        <para>
            Se <literal>OrderLine</literal> possui uma collection, ela também tem uma 
            chave estrangeira composta.
        </para>

        <programlisting><![CDATA[<class name="OrderLine">
    ....
    ....
    <list name="deliveryAttempts">
        <key>   <!-- a collection inherits the composite key type -->
            <column name="lineId"/>
            <column name="orderId"/>
            <column name="customerId"/>
        </key>
        <list-index column="attemptId" base="1"/>
        <composite-element class="DeliveryAttempt">
            ...
        </composite-element>
    </set>
</class>]]></programlisting>

    </sect1>

    <sect1 id="components-dynamic" revision="1">
        <title>Componentes Dinâmicos</title>

        <para>
            Você pode até mesmo mapear uma propriedade do tipo <literal>Map</literal>:
        </para>

    <programlisting><![CDATA[<dynamic-component name="userAttributes">
    <property name="foo" column="FOO" type="string"/>
    <property name="bar" column="BAR" type="integer"/>
    <many-to-one name="baz" class="Baz" column="BAZ_ID"/>
</dynamic-component>]]></programlisting>

        <para>
            A semântica de um mapeamento <literal>&lt;dynamic-component&gt;</literal> é idêntica 
            à <literal>&lt;component&gt;</literal>. A vantagem deste tipo de mapeamento é a 
            habilidade de determinar as propriedades atuais do bean no momento de deploy, 
            apenas editando o documento de mapeamento. A Manipulação em tempo de execução do 
            documento de mapeamento também é possível, usando o parser DOM. Até melhor, 
            você pode acessar (e mudar) o metamodelo configuration-time do Hibernate 
            através do objeto <literal>Configuration</literal>.
        </para>

    </sect1>

</chapter>
