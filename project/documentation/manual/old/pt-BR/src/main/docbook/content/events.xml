<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="events">
    <title>Interceptadores e Eventos</title>

    <para>
        É muito útil quando a aplicação precisa executar alguma "coisa" no momento em 
        que o Hibernate executa uma de suas ações. Isso permite a implementação de 
        certas funções genéricas, assim como permite estender as funcionalidades do 
        Hibernate
    </para>

    <sect1 id="objectstate-interceptors" revision="3">
        <title>Interceptadores</title>

        <para>
            A interface <literal>Interceptor</literal> permite fornecer informações da session para o 
            aplicativo, permitindo ao aplicativo inspecionar e/ou manipular as propriedades de um 
            objeto persistente antes de ser salvo, atualizado, excluído ou salvo. Um dos possíveis usos é 
            gerar informações de auditoria. Por exemplo, o seguinte <literal>Interceptor</literal> seta 
            automaticamente o atributo <literal>createTimestamp</literal> quando um 
            <literal>Auditable</literal> é criada e atualiza o atributo <literal>lastUpdateTimestamp</literal> 
            quando um <literal>Auditable</literal> é atualizado.
        </para>

        <para>
            Você pode implementar <literal>Auditable</literal> diretamente ou pode estender 
            <literal>EmptyInterceptor</literal>, sendo que a segunda é considerada a melhor opção.
        </para>

        <programlisting><![CDATA[package org.hibernate.test;

import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;

import org.hibernate.EmptyInterceptor;
import org.hibernate.Transaction;
import org.hibernate.type.Type;

public class AuditInterceptor extends EmptyInterceptor {

    private int updates;
    private int creates;
    private int loads;

    public void onDelete(Object entity,
                         Serializable id,
                         Object[] state,
                         String[] propertyNames,
                         Type[] types) {
        // do nothing
    }

    public boolean onFlushDirty(Object entity,
                                Serializable id,
                                Object[] currentState,
                                Object[] previousState,
                                String[] propertyNames,
                                Type[] types) {

        if ( entity instanceof Auditable ) {
            updates++;
            for ( int i=0; i < propertyNames.length; i++ ) {
                if ( "lastUpdateTimestamp".equals( propertyNames[i] ) ) {
                    currentState[i] = new Date();
                    return true;
                }
            }
        }
        return false;
    }

    public boolean onLoad(Object entity,
                          Serializable id,
                          Object[] state,
                          String[] propertyNames,
                          Type[] types) {
        if ( entity instanceof Auditable ) {
            loads++;
        }
        return false;
    }

    public boolean onSave(Object entity,
                          Serializable id,
                          Object[] state,
                          String[] propertyNames,
                          Type[] types) {

        if ( entity instanceof Auditable ) {
            creates++;
            for ( int i=0; i<propertyNames.length; i++ ) {
                if ( "createTimestamp".equals( propertyNames[i] ) ) {
                    state[i] = new Date();
                    return true;
                }
            }
        }
        return false;
    }

    public void afterTransactionCompletion(Transaction tx) {
        if ( tx.wasCommitted() ) {
            System.out.println("Creations: " + creates + ", Updates: " + updates, "Loads: " + loads);
        }
        updates=0;
        creates=0;
        loads=0;
    }

}]]></programlisting>

        <para>
            Os interceptadores podem ser aplicados em dois diferentes escopos:  
            No escopo da <literal>Session</literal> e no escopo 
            <literal>SessionFactory</literal>.
        </para>

        <para>
            Um interceptador no escopo da <literal>Session</literal> é definido quando 
            uma sessão é aberta usando o método sobrecarregado da SessionFactory.openSession() 
            que aceita um <literal>Interceptor</literal> como parâmetro.
        </para>

        <programlisting><![CDATA[Session session = sf.openSession( new AuditInterceptor() );]]></programlisting>

        <para>
            Um interceptador no escopo da <literal>SessionFactory</literal> é definido no objeto 
            <literal>Configuration</literal> antes da <literal>SessionFactory</literal> ser instanciada. 
            Nesse caso, o interceptador fornecido será aplicado para todas as sessões abertas por aquela 
            <literal>SessionFactory</literal>; Isso apenas não ocorrerá caso seja especificado um 
            interceptador no momento em que a sessão for aberta.  Um interceptador no escopo de
            <literal>SessionFactory</literal> deve ser thread safe, tomando-se o cuidado de não 
            armazenar atributos de estado específicos da sessão, pois, provavelmente, múltiplas 
            sessões irão utilizar esse interceptador simultaneamente.            
        </para>
    
        <programlisting><![CDATA[new Configuration().setInterceptor( new AuditInterceptor() );]]></programlisting>

    </sect1>

     <sect1 id="objectstate-events" revision="4">
        <title>Sistema de Eventos</title>

        <para>
            Se você precisa executar uma ação em determinados eventos da camada de persistência, 
            você também pode usar a arquitetura de <emphasis>event</emphasis> do Hibernate3. 
            Um evento do sistema pode ser utilizado como complemento ou em 
            substituição a um interceptador.
        </para>

        <para>
            Essencialmente todos os métodos da interface <literal>Session</literal> possuem um evento 
            correlacionado. Se você tiver um <literal>LoadEvent</literal>, um <literal>LoadEvent</literal>, 
            etc (consulte o DTD do XML de configuração ou o pacote <literal>org.hibernate.event</literal>
            para a lista completa dos tipos de eventos). Quando uma requisição é feita em um desses métodos, 
            a <literal>Session</literal> do hibernate gera um evento apropriado e o envia para o listener 
            de evento correspondente àquele tipo de evento. Esses listeners implementam a mesma lógica 
            que aqueles métodos, trazendo os mesmos resultados. Entretanto, você é livre para implementar 
            uma customização de um desses listeners (isto é, o  <literal>LoadEvent</literal> é processado 
            pela implementação registrada da interface <literal>LoadEventListener</literal>), então sua  
            implementação vai ficar responsável por processar qualquer requisição <literal>load()</literal>
            feita pela <literal>Session</literal>.
        </para>

        <para>
            Para todos os efeitos esses listeners deve ser considerados singletons; ou seja, eles são 
            compartilhados entre as requisições, e  assim sendo, não devem salvar nenhum estado das 
            variáveis instanciadas.
        </para>

        <para>
            Um listener personalizado deve implementar a interface referente ao evento a ser 
            processado e/ou deve estender a classes base equivalente (ou mesmo os listeners padrões 
            usados pelo Hibernate, eles não são declarados como finais com esse objetivo). O listener 
            personalizado pode ser registrado programaticamente no objeto <literal>Configuration</literal>, 
            ou declarativamente no XML de configuração do Hibernate (o registro do listener no propertie 
            de configuração não é suportado). Aqui temos um exemplo de como carregar um listener 
            personalizado:
        </para>

        <programlisting><![CDATA[public class MyLoadListener implements LoadEventListener {
    // this is the single method defined by the LoadEventListener interface
    public void onLoad(LoadEvent event, LoadEventListener.LoadType loadType)
            throws HibernateException {
        if ( !MySecurity.isAuthorized( event.getEntityClassName(), event.getEntityId() ) ) {
            throw MySecurityException("Unauthorized access");
        }
    }
}]]></programlisting>

        <para>
            Você também precisa adicionar uma entrada no XML de configuração do Hibernate para 
            registrar declarativamente qual listener deve se utilizado em conjunto com o listener 
            padrão:
        </para>

<programlisting><![CDATA[<hibernate-configuration>
    <session-factory>
        ...
        <event type="load">
            <listener class="com.eg.MyLoadListener"/>
            <listener class="org.hibernate.event.def.DefaultLoadEventListener"/>
        </event>
    </session-factory>
</hibernate-configuration>]]></programlisting>

        <para>
            Ou, você pode registrar o listener programaticamente:            
        </para>

        <programlisting><![CDATA[Configuration cfg = new Configuration();
LoadEventListener[] stack = { new MyLoadListener(), new DefaultLoadEventListener() };
cfg.EventListeners().setLoadEventListeners(stack);]]></programlisting>

        <para>
            Listeners registrados declarativamente não compartilham da mesma instancia. Se o mesmo 
            nome da classe é utilizado em vários elementos e <literal>&lt;listener/&gt;</literal>,  
            cada um vai resultar em uma instancia separada dessa classe. Se você tem a necessidade 
            de compartilhar uma instancia de um listener entre diversos tipos de listeners você 
            deve registrar o listener programaticamente.
           
        </para>

        <para>
            Mas porque implementar uma interface e definir o tipo específico durante a configuração? 
            Bem, um listener pode implementar vários listeners de evento. Com o tipo sendo definido 
            durante o registro, fica fácil ligar ou desligar listeners personalizados durante 
            a configuração. 
        </para>

    </sect1>
    
    <sect1 id="objectstate-decl-security" revision="2">
        <title>Hibernate declarative security</title>
        <para>
            Usually, declarative security in Hibernate applications is managed in a session facade
            layer. Now, Hibernate3 allows certain actions to be permissioned via JACC, and authorized 
            via JAAS. This is optional functionality built on top of the event architecture.
        </para>
        
        <para>
            First, you must configure the appropriate event listeners, to enable the use of JAAS
            authorization.
        </para>
        
        <programlisting><![CDATA[<listener type="pre-delete" class="org.hibernate.secure.JACCPreDeleteEventListener"/>
<listener type="pre-update" class="org.hibernate.secure.JACCPreUpdateEventListener"/>
<listener type="pre-insert" class="org.hibernate.secure.JACCPreInsertEventListener"/>
<listener type="pre-load" class="org.hibernate.secure.JACCPreLoadEventListener"/>]]></programlisting>

        <para>
            Note that <literal>&lt;listener type="..." class="..."/&gt;</literal> is just a shorthand
            for <literal>&lt;event type="..."&gt;&lt;listener class="..."/&gt;&lt;/event&gt;</literal>
            when there is exactly one listener for a particular event type.
        </para>

        <para>
            Next, still in <literal>hibernate.cfg.xml</literal>, bind the permissions to roles:
        </para>
        
        <programlisting><![CDATA[<grant role="admin" entity-name="User" actions="insert,update,read"/>
<grant role="su" entity-name="User" actions="*"/>]]></programlisting>
        
        <para>
            The role names are the roles understood by your JACC provider.
        </para>
       
    </sect1>

</chapter>

