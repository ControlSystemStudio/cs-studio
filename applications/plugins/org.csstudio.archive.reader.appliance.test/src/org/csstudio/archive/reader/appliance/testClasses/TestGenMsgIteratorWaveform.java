package org.csstudio.archive.reader.appliance.testClasses;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import org.epics.archiverappliance.retrieval.client.EpicsMessage;

import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.InvalidProtocolBufferException;

import edu.stanford.slac.archiverappliance.PB.EPICSEvent.PayloadInfo;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.PayloadType;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorChar;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorDouble;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorEnum;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorFloat;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorInt;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorShort;
import edu.stanford.slac.archiverappliance.PB.EPICSEvent.VectorString;

/**
 * 
 * <code>TestGenMsgIteratorWaveform</code> is a message generator for waveform data.
 *
 * @author <a href="mailto:jaka.bobnar@cosylab.com">Jaka Bobnar</a>
 *
 */
public class TestGenMsgIteratorWaveform extends TestGenMsgIteratorRaw {

	private static final byte[][] BYTES = new byte[][]{
			{8, -44, -117, -90, 4, 16, -19, -70, -25, -128, 1, 26, -128, 1, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64},
			{8, -44, -117, -90, 4, 16, -76, -40, -10, -113, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64},
			{8, -44, -117, -90, 4, 16, -58, -92, -3, -98, 3, 26, -128, 1, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64},
			{8, -43, -117, -90, 4, 16, -102, -15, -10, 81, 26, -128, 1, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64},
			{8, -43, -117, -90, 4, 16, -119, -76, -17, -32, 1, 26, -128, 1, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64},
			{8, -43, -117, -90, 4, 16, -119, -85, -11, -17, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64},
			{8, -42, -117, -90, 4, 16, -108, -64, -107, 34, 26, -128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0},
			{8, -42, -117, -90, 4, 16, -88, -67, -94, -79, 1, 26, -128, 1, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64},
			{8, -17, -115, -90, 4, 16, -3, -22, -91, -94, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64},
			{8, -70, -111, -52, 1, 16, -35, -61, -15, -105, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64, 58, 21, 10, 4, 68, 69, 83, 67, 18, 13, 116, 101, 115, 116, 32, 112, 118, 32, 119, 97, 118, 101, 49, 58, 12, 10, 3, 69, 71, 85, 18, 5, 117, 110, 105, 116, 115, 58, 9, 10, 4, 80, 82, 69, 67, 18, 1, 50, 64, 0}
	};
			
	
	public static final double[][] VALUE_DOUBLE = {
		{3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0, 3.0},
		{5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0},
		{7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0},
		{9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0},
		{11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0},
		{13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0},
		{0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0},
		{2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 0.0, 1.0, 2.0},
		{13.0, 14.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0},
		{6.0, 8.0, 3.0, 2.0, 5.0, 8.0, 9.0, 0.0, 3.0, 4.0, 6.0, 7.0, 9.0, 7.0, 10.0, 5.0},
	};
	public static final double[][] VALUE_FLOAT = {
		{0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125},
		{0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125},
		{0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375},
		{0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125},
		{0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375},
		{0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625},
		{0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0},
		{0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0},
		{0.0, 2.65625, 0.0, 2.6875, 0.0, 0.0, 0.0, 1.875, 0.0, 2.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.3125, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.5, 0.0, 2.53125, 0.0, 2.5625, 0.0, 2.59375, 0.0, 2.625, 0.0, 2.65625},
		{0.0, 2.375, 0.0, 2.5, 0.0, 2.125, 0.0, 2.0, 0.0, 2.3125, 0.0, 2.5, 0.0, 2.53125, 0.0, 0.0, 0.0, 2.125, 0.0, 2.25, 0.0, 2.375, 0.0, 2.4375, 0.0, 2.53125, 0.0, 2.4375, 0.0, 2.5625, 0.0, 2.3125}
	};
	public static final short[][] VALUE_SHORT = {
		{0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32},
		{0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32},
		{0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32},
		{0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32},
		{0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32},
		{0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32},
		{0, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0, 0, 0, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4088, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 21, 32},
		{0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 10, 32, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 17, 32, 0, 0, 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 0, 18, 32, 0, 0, 0, 0, 0, 0, 10, 32}
	};
	public static final byte[][] VALUE_BYTE = {
		{0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64},
		{0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64},
		{0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64},
		{0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64},
		{0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64},
		{0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64},
		{0, 0, 0, 0, 0, 0, 42, 64, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 38, 64, 0, 0, 0, 0, 0, 0, 40, 64, 0, 0, 0, 0, 0, 0, 42, 64},
		{0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64},
	};
	public static final int[][] VALUE_INT = {
		{0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112},
		{0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544},
		{0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832},
		{0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048},
		{0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192},
		{0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336},
		{0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0},
		{0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824},
		{0, 1076494336, 0, 1076625408, 0, 0, 0, 1072693248, 0, 1073741824, 0, 1074266112, 0, 1074790400, 0, 1075052544, 0, 1075314688, 0, 1075576832, 0, 1075838976, 0, 1075970048, 0, 1076101120, 0, 1076232192, 0, 1076363264, 0, 1076494336},
		{0, 1075314688, 0, 1075838976, 0, 1074266112, 0, 1073741824, 0, 1075052544, 0, 1075838976, 0, 1075970048, 0, 0, 0, 1074266112, 0, 1074790400, 0, 1075314688, 0, 1075576832, 0, 1075970048, 0, 1075576832, 0, 1076101120, 0, 1075052544}
	};
	
	/**
	 * Constructs a new message iterator.
	 * 
	 * @param name the pv name
	 * @param start the start time 
	 * @param end the end time
	 */
	public TestGenMsgIteratorWaveform(String name, Timestamp start, Timestamp end) {
		super(name, start, end);
	}
		
	/**
	 * Initializes the epics messages.
	 * 
	 * @param name the name of the PV
	 * @param start the start time of the requested samples
	 * @param end the end time of the requested samples
	 * @throws InvalidProtocolBufferException 
	 */
	protected void initialize(String name, Timestamp start, Timestamp end) throws InvalidProtocolBufferException {
		
		if (name.contains("nth")) {
			initializeNth(name,start,end);
		} else {
			initializeNormal(name,start,end);
		}	
	}
	
	private void initializeNormal(String name, Timestamp start, Timestamp end) throws InvalidProtocolBufferException {
		Calendar startCal = Calendar.getInstance();
		startCal.setTime(start);
		PayloadType payloadType = PayloadType.WAVEFORM_DOUBLE;
		GeneratedMessage[] message = new GeneratedMessage[MESSAGE_LIST_LENGTH];
		Number[][] values = new Number[MESSAGE_LIST_LENGTH][];
		
		if (name.contains("double")) {
			payloadType = PayloadType.WAVEFORM_DOUBLE;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				values[i] = new Number[VALUE_DOUBLE[i].length];
				for (int j = 0; j < VALUE_DOUBLE[i].length; j++) {
					values[i][j] = VALUE_DOUBLE[i][j];
				}
				message[i] = VectorDouble.parseFrom(BYTES[i]);
			}
			
		} else if (name.contains("float")) {
			payloadType = PayloadType.WAVEFORM_FLOAT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				values[i] = new Number[VALUE_FLOAT[i].length];
				for (int j = 0; j < VALUE_FLOAT[i].length; j++) {
					values[i][j] = VALUE_FLOAT[i][j];
				}
				message[i] = VectorFloat.parseFrom(BYTES[i]);
			}
		} else if (name.contains("int")) {
			payloadType = PayloadType.WAVEFORM_INT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				values[i] = new Number[VALUE_INT[i].length];
				for (int j = 0; j < VALUE_INT[i].length; j++) {
					values[i][j] = VALUE_INT[i][j];
				}
				message[i] = VectorInt.parseFrom(BYTES[i]);
			}
			
		} else if (name.contains("short")) {
			payloadType = PayloadType.WAVEFORM_SHORT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				values[i] = new Number[VALUE_SHORT[i].length];
				for (int j = 0; j < VALUE_SHORT[i].length; j++) {
					values[i][j] = VALUE_SHORT[i][j];
				}
				message[i] = VectorShort.parseFrom(BYTES[i]);
			}
		} else if (name.contains("byte")) {
			payloadType = PayloadType.WAVEFORM_BYTE;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				values[i] = new Number[VALUE_BYTE[i].length];
				for (int j = 0; j < VALUE_BYTE[i].length; j++) {
					values[i][j] = VALUE_BYTE[i][j];
				}
				message[i] = VectorChar.parseFrom(BYTES[i]);
			}
		} else if (name.contains("string")) {
			payloadType = PayloadType.WAVEFORM_STRING;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				message[i] = VectorString.parseFrom(new byte[]{8, -70, -111, -52, 1, 16, -35, -61, -15, -105, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64, 58, 21, 10, 4, 68, 69, 83, 67, 18, 13, 116, 101, 115, 116, 32, 112, 118, 32, 119, 97, 118, 101, 49, 58, 12, 10, 3, 69, 71, 85, 18, 5, 117, 110, 105, 116, 115, 58, 9, 10, 4, 80, 82, 69, 67, 18, 1, 50, 64, 0});
			}
		} else if (name.contains("enum")) {
			payloadType = PayloadType.WAVEFORM_ENUM;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
				message[i] = VectorEnum.parseFrom(new byte[]{8, -70, -111, -52, 1, 16, -35, -61, -15, -105, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64, 58, 21, 10, 4, 68, 69, 83, 67, 18, 13, 116, 101, 115, 116, 32, 112, 118, 32, 119, 97, 118, 101, 49, 58, 12, 10, 3, 69, 71, 85, 18, 5, 117, 110, 105, 116, 115, 58, 9, 10, 4, 80, 82, 69, 67, 18, 1, 50, 64, 0});
			}
		}
		
		info = PayloadInfo.newBuilder().setPvname(name)
				.setType(payloadType)
				.setYear(startCal.get(Calendar.YEAR)).build();
		epicsMessageList = new ArrayList<EpicsMessage>();
		
		long s = start.getTime();
		for (int i = 0; i < MESSAGE_LIST_LENGTH; i++) {
			epicsMessageList.add(new TestEpicsMessage(s + i, values[i],SEVERITIES[i],STATUS[i%STATUS.length],message[i], info));
		}
	}

	private void initializeNth(String name, Timestamp start, Timestamp end) throws InvalidProtocolBufferException {
		Calendar startCal = Calendar.getInstance();
		startCal.setTime(start);
		
		int n = Integer.parseInt(name.substring(4,name.indexOf('(')));
		
		PayloadType payloadType = PayloadType.WAVEFORM_DOUBLE;
		GeneratedMessage[] message = new GeneratedMessage[MESSAGE_LIST_LENGTH/n];
		Number[][] values = new Number[MESSAGE_LIST_LENGTH/n][];
		
		if (name.contains("double")) {
			payloadType = PayloadType.WAVEFORM_DOUBLE;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				values[i/n] = new Number[VALUE_DOUBLE[i].length];
				for (int j = 0; j < VALUE_DOUBLE[i].length; j++) {
					values[i/n][j] = VALUE_DOUBLE[i][j];
				}
				message[i/n] = VectorDouble.parseFrom(BYTES[i]);
			}
			
		} else if (name.contains("float")) {
			payloadType = PayloadType.WAVEFORM_FLOAT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				values[i/n] = new Number[VALUE_FLOAT[i].length];
				for (int j = 0; j < VALUE_FLOAT[i].length; j++) {
					values[i/n][j] = VALUE_FLOAT[i][j];
				}
				message[i/n] = VectorFloat.parseFrom(BYTES[i]);
			}
		} else if (name.contains("int")) {
			payloadType = PayloadType.WAVEFORM_INT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				values[i/n] = new Number[VALUE_INT[i].length];
				for (int j = 0; j < VALUE_INT[i].length; j++) {
					values[i/n][j] = VALUE_INT[i][j];
				}
				message[i/n] = VectorInt.parseFrom(BYTES[i]);
			}
			
		} else if (name.contains("short")) {
			payloadType = PayloadType.WAVEFORM_SHORT;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				values[i/n] = new Number[VALUE_SHORT[i].length];
				for (int j = 0; j < VALUE_SHORT[i].length; j++) {
					values[i/n][j] = VALUE_SHORT[i][j];
				}
				message[i/n] = VectorShort.parseFrom(BYTES[i]);
			}
		} else if (name.contains("byte")) {
			payloadType = PayloadType.WAVEFORM_BYTE;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				values[i/n] = new Number[VALUE_BYTE[i].length];
				for (int j = 0; j < VALUE_BYTE[i].length; j++) {
					values[i/n][j] = VALUE_BYTE[i][j];
				}
				message[i/n] = VectorChar.parseFrom(BYTES[i]);
			}
		} else if (name.contains("string")) {
			payloadType = PayloadType.WAVEFORM_STRING;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				message[i/n] = VectorString.parseFrom(new byte[]{8, -70, -111, -52, 1, 16, -35, -61, -15, -105, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64, 58, 21, 10, 4, 68, 69, 83, 67, 18, 13, 116, 101, 115, 116, 32, 112, 118, 32, 119, 97, 118, 101, 49, 58, 12, 10, 3, 69, 71, 85, 18, 5, 117, 110, 105, 116, 115, 58, 9, 10, 4, 80, 82, 69, 67, 18, 1, 50, 64, 0});
			}
		} else if (name.contains("enum")) {
			payloadType = PayloadType.WAVEFORM_ENUM;
			for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
				message[i/n] = VectorEnum.parseFrom(new byte[]{8, -70, -111, -52, 1, 16, -35, -61, -15, -105, 2, 26, -128, 1, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 24, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 34, 64, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 0, 0, 0, 0, 36, 64, 0, 0, 0, 0, 0, 0, 20, 64, 58, 21, 10, 4, 68, 69, 83, 67, 18, 13, 116, 101, 115, 116, 32, 112, 118, 32, 119, 97, 118, 101, 49, 58, 12, 10, 3, 69, 71, 85, 18, 5, 117, 110, 105, 116, 115, 58, 9, 10, 4, 80, 82, 69, 67, 18, 1, 50, 64, 0});
			}
		}
		
		info = PayloadInfo.newBuilder().setPvname(name)
				.setType(payloadType)
				.setYear(startCal.get(Calendar.YEAR)).build();
		epicsMessageList = new ArrayList<EpicsMessage>();
		
		long s = start.getTime();
		for (int i = 0; i < MESSAGE_LIST_LENGTH; i+=n) {
			epicsMessageList.add(new TestEpicsMessage(s + i, values[i/n],SEVERITIES[i],STATUS[i%STATUS.length],message[i/n], info));
		}
	}

	
}
