/*******************************************************************************
 * Copyright (c) 2014 Oak Ridge National Laboratory.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
package org.csstudio.display.pvtable.persistence;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.csstudio.display.pvtable.Preferences;
import org.csstudio.display.pvtable.model.PVTableItem;
import org.csstudio.display.pvtable.model.PVTableModel;
import org.csstudio.display.pvtable.model.TimestampHelper;
import org.epics.util.time.Timestamp;
import org.epics.vtype.VType;

/** Persist PVTableModel as EPICS Autosave file
 *  <p>
 *  This file format is used by the EPICS synApps 'autosave' module,
 *  written by APS/AOD/BCDA Tim Mooney,
 *  http://www.aps.anl.gov/bcda/synApps/autosave/autosave.html
 *  
 *  @author Kay Kasemir
 */
@SuppressWarnings("nls")
public class PVTableAutosavePersistence extends PVTablePersistence
{
    /** File extension used for autosave files */
    final public static String FILE_EXTENSION = "sav";

    final private static String END_MARKER = "<END>";
    
    /** {@inheritDoc} */
    @Override
    public String getFileExtension()
    {
        return FILE_EXTENSION;
    }
    
    /** {@inheritDoc} */
    @Override
    public PVTableModel read(final InputStream stream) throws Exception
    {
        final BufferedReader input = new BufferedReader(new InputStreamReader(stream));
        
        final PVTableModel model = new PVTableModel();
        int line_no = 0;
        for (String line = input.readLine();  line != null;   line = input.readLine())
        {
            ++line_no;
            line = line.trim();
            // Skip comments, empty lines
            if (line.startsWith("#")  ||  line.isEmpty())
                continue;
            // Ignore the end marker (and stop reading)
            if (line.startsWith(END_MARKER))
                break;
            
            // Parse "PV Value"
            final int sep = line.indexOf(' ');
            if (sep < 0)
            {
                Logger.getLogger(getClass().getName()).log(Level.WARNING, "Missing space after PV name in line {0}", line_no);
                continue;
            }
            final String pv_name = line.substring(0, sep);
            final String value = line.substring(sep + 1);
            model.addItem(pv_name, Preferences.getTolerance(), createValue(value));
        }
        input.close();
        
        return model;
    }
    
    /** {@inheritDoc} */
    @Override
    public void write(final PVTableModel model, final OutputStream stream) throws Exception
    {
        final PrintWriter out = new PrintWriter(stream);
        
        out.println("# save/restore file generated by CSS PVTable, " + TimestampHelper.format(Timestamp.now()));
        final int n = model.getItemCount();
        for (int row=0; row<n; ++row)
        {
            final PVTableItem item = model.getItem(row);
            final VType saved = item.getSavedValue();
            if (saved == null)
                out.println("# " + item.getName() + " - No saved value");
            else
                out.println(item.getName() + " " + formatValue(saved));
        }
        out.println(END_MARKER);
        out.close();
    }
}
