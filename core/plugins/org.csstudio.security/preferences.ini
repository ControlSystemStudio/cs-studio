# Security Settings

##
## Authentication
##

# Option 1:
# Use a JAAS config file as in normal use of JAAS

# Path to JAAS configuration file
#
# When located inside a plugin, use
#  "platform:/plugin/name.of.plugin/path/within/plugin.conf"
#
# When a file "my_jaas_settings.conf" is placed
# inside the product's "configuration/" directory, use
#  "platform:/config/my_jaas_settings.conf"
#
# For plain files, use either
#  "file:/full/path/to/my_jaas_settings.conf"
# or just
#  "/full/path/to/my_jaas_settings.conf"
jaas_config_file=platform:/plugin/org.csstudio.security/jaas.conf

# Name of a JAAS login configuration to use.
# This must match the name of one of the entries
# in the jaas_config_file.
jaas_config_name=dummy

# Option 2:
# Do not use a JAAS config file.
# Instead, provide what would the desired entry in the config file
# as an Eclipse preference.
#
# If the preference "jaas_config" is defined, it will have
# precedence. "jaas_config_file" and "jaas_config_name" will
# be ignored!

# Format:
#	ModuleClass Flag option1=value1 option2=value2 ...; ModuleClass Flag ModuleOptions; ...
# ModuleClass, Flag and value options are in the same format as in auth.conf, but all on one line.
# Value strings must be quoted.
#
# Examples:
#jaas_config=com.sun.jmx.remote.security.FileLoginModule required debug="true" passwordFile="/path/to/my_passwords.conf";
#jaas_config=com.sun.security.auth.module.LdapLoginModule required debug="true" useSSL="false" userProvider="ldap://localhost:389/ou=Users,dc=css-demo,dc=org" authIdentity="uid={USERNAME},ou=Users,dc=css-demo,dc=org";
jaas_config=

##
## Authorization
##

# Select authorization provider
#
# Standard implementations:
# FileBased, see org.csstudio.security.authorization.FileBasedAuthorizationProvider
# LDAPGroup, see org.csstudio.security.authorization.LDAPGroupAuthorizationProvider
# Script, see org.csstudio.security.authorization.ScriptAuthorizationProvider
#
# Additional providers can be added via extension point,
# see org.csstudio.security.authorization.AuthorizationProvider
authorization_provider=FileBased

# Path to FileBased authorization configuration file
authorization_file_name=platform:/plugin/org.csstudio.security/authorization.conf

# Settings for authorization_provider=LDAPGroup:
# URL of LDAP server. May list several space-separated URLs.
ldap_group_url=ldap://localhost/dc=css-demo,dc=org
# Start of search for LDAPGroup-based authorization
ldap_group_base=ou=Groups
#
# The LDAP search will combine the group of interest with the 'base' and URL path.
#
# Example:
# ldap_group_url=ldap://localhost/dc=css-demo,dc=org
# ldap_group_base=ou=Groups
#
# Authorization for which to determine members: alarm_config
# => Locate "cn=alarm_config,ou=Groups,dc=css-demo,dc=org"
#    and every "memberUid" will then provide a user name
#    who has the alarm_config authorization.

# Path to command used by Script authorization
authorization_script_name=/usr/local/bin/id_auth


##
## Secure Preferences
##

# Where secure preferences are located.
#
# "Default":
# Use the default location, which is typically
# the user's home directory.
#  @see SecurePreferencesFactory#getDefault()
#  
# Advantage: It's the default
# Disadvantage: You won't always know where the preferences are.
#
# "Instance":
# Use the Eclipse 'instance', i.e. the workspace.
# 
# Advantage: You know where it is, and each workspace
# will have its own settings.
# Disadvantage: Each workspace has different settings.
#
# "Install":
# Use the Eclipse 'install' location, i.e. where the product is installed.
# 
# Advantage: You know where it is, and every workspace for that
# product will have the same settings. Good for a "global" setup.
# Disadvantage: Ordinary users cannot (should not) have write permissions.
secure_preference_location=Default

# Define if the location where the encrypted settings are stored defined by 'secure_preference_location' preference is read only or can be overwritten
#
# false = default behavior, the encrypted settings can be overwritten
#
# true = the encrypted settings are loaded from the 'secure_preference_location' but are written in a secure store located within the workspace. 
# The encrypted settings are restored/reloaded from 'secure_preference_location'
secure_read_only=false

