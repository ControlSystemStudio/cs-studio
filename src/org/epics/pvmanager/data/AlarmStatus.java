/*
 * Copyright 2010-11 Brookhaven National Laboratory
 * All rights reserved. Use is subject to license terms.
 */

package org.epics.pvmanager.data;

/**
 * Source of the alarm.
 * <p>
 * The alarm status reflect where the error has been generated. The same category
 * is used by both EPICS 3 and EPICS 4.
 * <p>
 * EPICS 3 status is converted according to the following table:
 * <table>
 * <tr><td>DEVICE</td><td>HW_LIMIT_ALARM</td></tr>
 * <tr><td>DRIVER</td><td>READ_ALARM, WRITE_ALARM, COMM_ALARM, TIMEOUT_ALARM, READ_ACCESS_ALARM, WRITE_ACCESS_ALARM</td></tr>
 * <tr><td>RECORD</td><td>HIHI_ALARM, HIGH_ALARM, LOLO_ALARM, LOW_ALARM, STATE_ALARM, CALC_ALARM, DISABLE_ALARM, SIMM_ALARM</td></tr>
 * <tr><td>DB</td><td>SCAN_ALARM, LINK_ALARM</td></tr>
 * <tr><td>CONF</td><td>SOFT_ALARM, BAD_SUB_ALARM</td></tr>
 * <tr><td>UNDEFINED</td><td>UDF_ALARM</td></tr>
 * </table>
 *
 * @author carcassi
 */
public enum AlarmStatus {

    /**
     * An error conditioned generated by the hardware.
     */
    DEVICE,

    /**
     * An error conditioned raised by the driver (e.g. the device is not responding,
     * cannot write to it, ...)
     */
    DRIVER,

    /**
     * An error generated as part of the record calculation (e.g. alarm limits,
     * state alarm, error in the calculation)
     */
    RECORD,

    /**
     * An error generated by the interaction of multiple records.
     */
    DB,

    /**
     * An error generated by an error in configuration of one or multiple records.
     */
    CONF,

    /**
     * The status for a record that was never processed.
     */
    UNDEFINED,

    /**
     * An error generated by the client (e.g channel not found, disconnected, ...)
     */
    CLIENT,

    /**
     * No alarm associated.
     */
    NONE
}
