<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="filters">
    <title>Filtrando datos</title>
    
    <para>
        Hibernate3 provee un nuevo enfoque innovador para manejar datos con reglas de "visibilidad".
        Un <emphasis>filtro de Hibernate</emphasis> es un filtro global, con nombre y parametrizado
        que puede ser habilitado o deshabilitado para una sesión de Hibernate en particular.
    </para>

    <sect1 id="objectstate-filters">
        <title>Filtros de Hibernate</title>

        <para>
            Hibernate3 añade la habilidad de predefinir criterios de filtros y unir esos filtros tanto a
            nivel de una clase como de una colección. Un criterio de filtro es la habilidad de definir una
            cláusula de restricción muy similar al atributo existente "where" disponible en el elemento
            class y varios elementos de colección. Excepto en que estos filtros pueden ser parametrizados.
            La aplicación puede tomar la decisión en tiempo de ejecución de qué filtros deben estar
            habilitados y cuáles deben ser sus parámetros. Los filtros pueden ser usados como vistas de
            base de datos, pero parametrizados dentro de la aplicación.
        </para>

        <para>
            Para usar los filtros, éstos deben primero ser definidos y luego unidos a los elementos de mapeo
            apropiados. Para definir un filtro, usa el elemento <literal>&lt;filter-def/&gt;</literal> dentro
            de un elemento <literal>&lt;hibernate-mapping/&gt;</literal>:
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter">
    <filter-param name="myFilterParam" type="string"/>
</filter-def>]]></programlisting>

        <para>
            Entonces este filtro puede ser unido a una clase:
        </para>

        <programlisting><![CDATA[<class name="myClass" ...>
    ...
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</class>]]></programlisting>

        <para>
            o a una colección:
        </para>

        <programlisting><![CDATA[<set ...>
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</set>]]></programlisting>

        <para>
            o incluso a ambos (o muchos de cada uno) al mismo tiempo.
        </para>

        <para>
            Los métodos en <literal>Session</literal> son: <literal>enableFilter(String filterName)</literal>,
            <literal>getEnabledFilter(String filterName)</literal>, y <literal>disableFilter(String filterName)</literal>.
            Por defecto, los filtros <emphasis>no</emphasis> están habilitados para una sesión dada; deben ser
            habilitados explícitamente por medio del uso del método <literal>Session.enableFilter()</literal>,
            que devuelve una instancia de la interface <literal>Filter</literal>. Usando el filtro simple definido
            arriba, esto se vería así:
        </para>

        <programlisting><![CDATA[session.enableFilter("myFilter").setParameter("myFilterParam", "some-value");]]></programlisting>

        <para>
            Nota que los métodos en la interface org.hibernate.Filter permiten el encadenamiento de métodos
            común en gran parte de Hibernate.
        </para>

        <para>
            Un ejemplo completo, usando datos temporales con un patrón efectivo de fechas de registro:
        </para>

        <programlisting><![CDATA[<filter-def name="effectiveDate">
    <filter-param name="asOfDate" type="date"/>
</filter-def>

<class name="Employee" ...>
...
    <many-to-one name="department" column="dept_id" class="Department"/>
    <property name="effectiveStartDate" type="date" column="eff_start_dt"/>
    <property name="effectiveEndDate" type="date" column="eff_end_dt"/>
...
    <!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake
    -->
    <filter name="effectiveDate"
            condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
</class>

<class name="Department" ...>
...
    <set name="employees" lazy="true">
        <key column="dept_id"/>
        <one-to-many class="Employee"/>
        <filter name="effectiveDate"
                condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
    </set>
</class>]]></programlisting>

        <para>
            Entonces, en orden de asegurar que siempre tendrás de vuelta registros actualmente efectivos,
            simplemente habilita el filtro en la sesión previo a recuperar los datos de empleados:
        </para>

<programlisting><![CDATA[Session session = ...;
session.enableFilter("effectiveDate").setParameter("asOfDate", new Date());
List results = session.createQuery("from Employee as e where e.salary > :targetSalary")
         .setLong("targetSalary", new Long(1000000))
         .list();
]]></programlisting>

        <para>
            En el HQL de arriba, aunque sólo hemos mencionado explícitamente una restricción de salario en
            los resultados, debido al filtro habilitado la consulta sólo devolverá empleados actualmente activos
            que tengan un salario mayor que un millón de dólares.
        </para>

        <para>
            Nota: si planeas usar filtros con unión externa (outer joining) (bien a través de HQL, o bien
            de recuperación de carga) sé cuidadoso en la dirección de expresión de la condición. Lo más seguro
            es establecer esto para unión externa izquierda (left outer joining). En general, coloca el primer
            parámetro seguido del nombre(s) de columna(s) después del operador.
        </para>

    </sect1>

</chapter>

