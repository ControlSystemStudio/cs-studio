<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="architecture">

    <title>Arquitectura</title>

    <sect1 id="architecture-overview" revision="1">
        <title>Visi&#x00f3;n General</title>
        
        <para>
            Una visi&#x00f3;n a (muy) alto nivel de la arquitectura de Hibernate:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/overview.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/overview.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Este diagrama muestra a Hibernate usando la base de datos y los datos de
            configuraci&#x00f3;n para proveer servicios de persistencia (y objetos
            persistentes) a la aplicaci&#x00f3;n.
        </para>

        <para>
            Nos gustar&#x00ed;a mostrar una vista m&#x00e1;s detallada de la arquitectura de tiempo
            de ejecuci&#x00f3;n. Desafortunadamente, Hibernate es flexible y soporta diferentes
            enfoques. Mostraremos los dos extremos. En la arquitectura "sencilla", es la
            aplicaci&#x00f3;n la que provee su propias conexiones JDBC y gestiona sus propias
            transacciones. Este enfoque usa un m&#x00ed;nimo subconjunto de la API de Hibernate:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/lite.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/lite.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            La arquitectura "full cream" abstrae a la aplicaci&#x00f3;n de las APIs
            de JDBC/JTA y deja que Hibernate se encargue de los detalles.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/full_cream.svg" format="SVG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/full_cream.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            He aqu&#x00ed; algunas definiciones de los objetos en los diagramas:
            <variablelist spacing="compact">
                <varlistentry>
                    <term>SessionFactory (<literal>org.hibernate.SessionFactory</literal>)</term>
                    <listitem>
                        <para>
                            Cach&#x00e9; threadsafe (inmutable) de mapeos compilados para
                            una sola base de datos. Es una f&#x00e1;brica de <literal>Session</literal>
                            y un cliente de <literal>ConnectionProvider</literal>. Opcionalmente,
                            puede mantener una cach&#x00e9; (de segundo nivel) de datos reusables
                            entre transacciones, a un nivel de proceso o de cluster.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Session (<literal>org.hibernate.Session</literal>)</term>
                    <listitem>
                        <para>
                            Objeto mono-hebra, de corta vida que representa una conversaci&#x00f3;n
                            entre la aplicaci&#x00f3;n y el almacenamiento persistente. Envuelve una
                            conexi&#x00f3;n JDBC. Es una f&#x00e1;brica de <literal>Transaction</literal>.
                            Mantiene una cach&#x00e9; requerida (de primer nivel) de objetos persistentes,
                            usada mientras se navega el grafo de objetos o se recuperen objetos por
                            identificador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Objetos y colecciones persistentes</term>
                    <listitem>
                        <para>
                            Objetos de corta vida, mono-hebra conteniendo estado persistente y
                            funci&#x00f3;nalidad de negocio. Estos pueden ser JavaBeans/POJOs
                            (Plain Old Java Objects, o sea, cualquier objeto Java), la &#x00fa;nica
                            cosa especial en ellos es que estan asociados actualmente con una
                            (y s&#x00f3;lo una) <literal>Session</literal>. Tan pronto como la 
                            <literal>Session</literal> sea cerrada, ser&#x00e1;n separados y
                            estar&#x00e1;n libres para ser usados en cualquier capa de aplicaci&#x00f3;n.
                            (por ejemplo, directamente como objetos de transferencia de datos hacia
                            y desde la capa de presentaci&#x00f3;n).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Objetos y colecciones transitorios y separados</term>
                    <listitem>
                        <para>
                            Instancias de clases persistentes que no estan acutualmente asociadas
                            con una <literal>Session</literal>. Pueden haber sido instanciadas por
                            la aplicaci&#x00f3;n y (a&#x00fa;n) no haber sido hechas persistentes,
                            o pueden haber sido instanciadas por una <literal>Session</literal> cerrada.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Transaction (<literal>org.hibernate.Transaction</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Un objeto de corta vida, mono-hebra, usado por la aplicaci&#x00f3;n
                            para especificar unidades at&#x00f3;micas de trabajo. Abstrae a la aplicaci&#x00f3;n
                            de las subyacentes transacciones JDBC, JTA o CORBA. En algunos casos, una
                            <literal>Session</literal> puede extenderse sobre varias <literal>Transaction</literal>s.
                            Sin embargo, la demarcaci&#x00f3;n de la transacci&#x00f3;n, ya sea usando la API
                            subyacente o <literal>Transaction</literal>, nunca es opcional!
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ConnectionProvider (<literal>org.hibernate.connection.ConnectionProvider</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Una f&#x00e1;brica (y pool) de conexiones JDBC. Abstrae a la aplicaci&#x00f3;n
                            del <literal>Datasource</literal> o <literal>DriverManager</literal> subyacente.
                            No se expone a la aplicaci&#x00f3;n, pero puede ser extendido/implementado por
                            el desarrollador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>TransactionFactory (<literal>org.hibernate.TransactionFactory</literal>)</term>
                    <listitem>
                        <para>
                            (Opcional) Una f&#x00e1;brica de instancias de <literal>Transaction</literal>.
                            No se expone a la aplicaci&#x00f3;n, pero puede ser extendido/implementado por
                            el desarrollador.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Interfaces de Extensi&#x00f3;n</emphasis></term>
                    <listitem>
                        <para>
                            Hibernate ofrece muchas interfaces de extensi&#x00f3;n opcional que puedes
                            implementar para modificar a medida el comportamiento de tu capa de persistencia.
                            Para m&#x00e1;s detalles, mira la documentaci&#x00f3;n de la API.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>

        <para>
            Dada una arquitectura "sencilla", la aplicaci&#x00f3;n pasa por alto las APIs
            de <literal>Transaction</literal>/<literal>TransactionFactory</literal> y/o
            <literal>ConnectionProvider</literal>, para hablar directamente a JTA o JDBC.
        </para>
    </sect1>

    <sect1 id="architecture-states" revision="1">
        <title>Estados de instancia</title>
        <para>
            Una instancia de una clase persistente puede estar en uno de tres estados
            diferentes, definidos respecto de su <emphasis>contexto de persistencia</emphasis>.
            El objeto <literal>Session</literal> de Hibernate es el contexto de persistencia:
        </para>
        
       <variablelist spacing="compact">
            <varlistentry>
                <term>transitorio</term>
                <listitem>
                    <para>
                        La instancia no est&#x00e1; y nunca estuvo asociada con
                        un contexto de persistencia. No tiene identidad persistente
                        (valor de clave primaria).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>persistente</term>
                <listitem>
                    <para>
                        La instancia est&#x00e1; actualmente asociada con un
                        contexto de persistencia. Tiene una identidad persistente
                        (valor de clave primaria) y, quiz&#x00e1;s, una fila
                        correspondiente en la base de datos. Para un contexto de
                        persistencia en particular, Hibernate <emphasis>garantiza</emphasis>
                        que la identidad persistente es equivalente a la identidad
                        Java (localizaci&#x00f3;n en memoria del objeto).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>separado</term>
                <listitem>
                    <para>
                        La instancia estuvo una vez asociada con un contexto
                        de persistencia, pero ese contexto fue cerrado, o la
                        instancia fue serializada a otro proceso. Tiene una
                        identidad persistente y, quiz&#x00e1;s, una fila correspondiente
                        en la base de datos. Para las instancias separadas,
                        Hibernate no establece ninguna garant&#x00ed;a sobre
                        la relaci&#x00f3;n entre identidad persistente e identidad Java.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>    

    <sect1 id="architecture-jmx" revision="1">
        <title>Integraci&#x00f3;n JMX</title>

        <para>
            JMX es el est&#x00e1;ndar J2EE para la gesti&#x00f3;n de componentes Java. Hibernate
            puede ser gestionado por medio de un servicio est&#x00e1;ndar JMX.
            Proveemos una implementaci&#x00f3;n de MBean en la distribuci&#x00f3;n,
            <literal>org.hibernate.jmx.HibernateService</literal>.
        </para>

        <para>
            Para ejemplo de c&#x00f3;mo desplegar Hibernate como un servicio JMX en un Servidor
            de Aplicaciones JBoss, por favor, mira la Gu&#x00ed;a del Usuario de JBoss.
            En JBoss AS, tienes adem&#x00e1;s estos beneficios si despliegas usando JMX:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>Gesti&#x00f3;n de Sesi&#x00f3;n:</emphasis> El ciclo de vida de la <literal>Session</literal>
                    de Hibernate puede estar autom&#x00e1;ticamente ligado al &#x00e1;mbito de una transacci&#x00f3;n
                    JTA. Esto significa que ya no tienes que abrir ni cerrar la <literal>Session</literal> manualmente,
                    esto pasa a ser trabajo de un interceptor EJB de JBoss. Adem&#x00e1;s tampoco tienes
                    que preocuparte m&#x00e1;s de la demarcaci&#x00f3;n de la transacci&#x00f3;n (a menos que
                    que quieras escribir una capa de persitencia portable, por supuesto, usa la API de
                    <literal>Transaction</literal> de Hibernate para esto). Para acceder a una
                    <literal>Session</literal> llama al <literal>HibernateContext</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>Despliegue de HAR:</emphasis> Usualmente despliegas el servicio JMX de Hibernate
                    usando un descriptor de despliegue de servicio de JBoss (en un fichero EAR y/o SAR), que soporta
                    todas las opciones de configuraci&#x00f3;n usuales de una <literal>SessionFactory</literal> de
                    Hibernate. Sin embargo, todav&#x00ed;a tienes que nombrar todos tus ficheros de mapeo en el
                    descriptor de despliegue. Si decides usar el depliegue de HAR opcional, JBoss detectar&#x00e1;
                    autom&#x00e1;ticamente todos los ficheros de mapeo en tu fichero HAR.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Para m&#x00e1;s informaci&#x00f3;n sobre estas opciones, consulta la
            Gu&#x00ed;a de Usuario del JBoss AS.
        </para>

        <para>
            Otra funcionalidad disponible como un servicio JMX son las estad&#x00ed;sticas en
            tiempo de ejecuci&#x00f3;n de Hibernate. Mira <xref linkend="configuration-optional-statistics"/>.
        </para>
    </sect1>

    <sect1 id="architecture-jca" revision="1">
        <title>Soporte JCA:</title>
        <para>
            Hiberate puede adem&#x00e1;s ser configurado como un conector JCA. Por favor mira el
            sitio web para m&#x00e1;s detalles. Por favor ten en cuenta que el soporte de JCA
            de Hibernate est&#x00e1; a&#x00fa;n considerado experimental.
        </para>
    </sect1>

</chapter>

