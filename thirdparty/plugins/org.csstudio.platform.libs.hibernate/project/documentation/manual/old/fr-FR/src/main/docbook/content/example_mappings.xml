<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="example-mappings">
    <title>Exemple : quelques mappings</title>

    <para>
        Ce chapitre montre quelques mappings plus complexes.
    </para>

    <sect1 id="example-mappings-emp">
        <title>Employeur/Employé (Employer/Employee)</title>

        <para>
            Le modèle suivant de relation entre <literal>Employer</literal> et
            <literal>Employee</literal> utilise une vraie classe entité (<literal>Employment</literal>)
            pour représenter l'association. On a fait cela parce qu'il peut y avoir plus d'une période
            d'emploi pour les deux mêmes parties. Des composants sont utilisés pour modéliser les
            valeurs monétaires et les noms des employés.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/EmployerEmployee.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/EmployerEmployee.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Voici un document de mapping possible :
        </para>

        <programlisting><![CDATA[<hibernate-mapping>

    <class name="Employer" table="employers">
        <id name="id">
            <generator class="sequence">
                <param name="sequence">employer_id_seq</param>
            </generator>
        </id>
        <property name="name"/>
    </class>

    <class name="Employment" table="employment_periods">

        <id name="id">
            <generator class="sequence">
                <param name="sequence">employment_id_seq</param>
            </generator>
        </id>
        <property name="startDate" column="start_date"/>
        <property name="endDate" column="end_date"/>

        <component name="hourlyRate" class="MonetaryAmount">
            <property name="amount">
                <column name="hourly_rate" sql-type="NUMERIC(12, 2)"/>
            </property>
            <property name="currency" length="12"/>
        </component>

        <many-to-one name="employer" column="employer_id" not-null="true"/>
        <many-to-one name="employee" column="employee_id" not-null="true"/>

    </class>

    <class name="Employee" table="employees">
        <id name="id">
            <generator class="sequence">
                <param name="sequence">employee_id_seq</param>
            </generator>
        </id>
        <property name="taxfileNumber"/>
        <component name="name" class="Name">
            <property name="firstName"/>
            <property name="initial"/>
            <property name="lastName"/>
        </component>
    </class>

</hibernate-mapping>]]></programlisting>

    <para>
        Et voici le schéma des tables générées par <literal>SchemaExport</literal>.
    </para>

    <programlisting><![CDATA[create table employers (
    id BIGINT not null,
    name VARCHAR(255),
    primary key (id)
)

create table employment_periods (
    id BIGINT not null,
    hourly_rate NUMERIC(12, 2),
    currency VARCHAR(12),
    employee_id BIGINT not null,
    employer_id BIGINT not null,
    end_date TIMESTAMP,
    start_date TIMESTAMP,
    primary key (id)
)

create table employees (
    id BIGINT not null,
    firstName VARCHAR(255),
    initial CHAR(1),
    lastName VARCHAR(255),
    taxfileNumber VARCHAR(255),
    primary key (id)
)

alter table employment_periods
    add constraint employment_periodsFK0 foreign key (employer_id) references employers
alter table employment_periods
    add constraint employment_periodsFK1 foreign key (employee_id) references employees
create sequence employee_id_seq
create sequence employment_id_seq
create sequence employer_id_seq]]></programlisting>

    </sect1>

    <sect1 id="example-mappings-authorwork">
        <title>Auteur/Travail (Author/Work)</title>

        <para>
            Soit le modèle de la relation entre <literal>Work</literal>, <literal>Author</literal>
            et <literal>Person</literal>. Nous représentons la relation entre <literal>Work</literal>
            et <literal>Author</literal> comme une association plusieurs-vers-plusieurs. Nous avons choisi de
            représenter la relation entre <literal>Author</literal> et <literal>Person</literal>
            comme une association un-vers-un. Une autre possibilité aurait été que
            <literal>Author</literal> hérite de <literal>Person</literal>.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/AuthorWork.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/AuthorWork.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Le mapping suivant représente exactement ces relations :
        </para>

        <programlisting><![CDATA[<hibernate-mapping>

    <class name="Work" table="works" discriminator-value="W">

        <id name="id" column="id">
            <generator class="native"/>
        </id>
        <discriminator column="type" type="character"/>

        <property name="title"/>
        <set name="authors" table="author_work">
            <key column name="work_id"/>
            <many-to-many class="Author" column name="author_id"/>
        </set>

        <subclass name="Book" discriminator-value="B">
            <property name="text"/>
        </subclass>

        <subclass name="Song" discriminator-value="S">
            <property name="tempo"/>
            <property name="genre"/>
        </subclass>

    </class>

    <class name="Author" table="authors">

        <id name="id" column="id">
            <!-- The Author must have the same identifier as the Person -->
            <generator class="assigned"/>
        </id>

        <property name="alias"/>
        <one-to-one name="person" constrained="true"/>

        <set name="works" table="author_work" inverse="true">
            <key column="author_id"/>
            <many-to-many class="Work" column="work_id"/>
        </set>

    </class>

    <class name="Person" table="persons">
        <id name="id" column="id">
            <generator class="native"/>
        </id>
        <property name="name"/>
    </class>

</hibernate-mapping>]]></programlisting>

    <para>
        Il y a quatre tables dans ce mapping. <literal>works</literal>,
        <literal>authors</literal> et <literal>persons</literal> qui contiennent
        respectivement les données de work, author et person.
        <literal>author_work</literal> est une table d'association qui lie authors
        à works. Voici le schéma de tables, généré par <literal>SchemaExport</literal>.
    </para>

    <programlisting><![CDATA[create table works (
    id BIGINT not null generated by default as identity,
    tempo FLOAT,
    genre VARCHAR(255),
    text INTEGER,
    title VARCHAR(255),
    type CHAR(1) not null,
    primary key (id)
)

create table author_work (
    author_id BIGINT not null,
    work_id BIGINT not null,
    primary key (work_id, author_id)
)

create table authors (
    id BIGINT not null generated by default as identity,
    alias VARCHAR(255),
    primary key (id)
)

create table persons (
    id BIGINT not null generated by default as identity,
    name VARCHAR(255),
    primary key (id)
)

alter table authors
    add constraint authorsFK0 foreign key (id) references persons
alter table author_work
    add constraint author_workFK0 foreign key (author_id) references authors
alter table author_work
    add constraint author_workFK1 foreign key (work_id) references works]]></programlisting>

    </sect1>

    <sect1 id="example-mappings-customerorderproduct">
        <title>Client/Commande/Produit (Customer/Order/Product)</title>

        <para>
            Imaginons maintenant le modèle de relation entre <literal>Customer</literal>,
            <literal>Order</literal>, <literal>LineItem</literal> et <literal>Product</literal>.
            Il y a une association un-vers-plusieurs entre <literal>Customer</literal> et
            <literal>Order</literal>, mais comment devrions nous représenter <literal>Order</literal> /
            <literal>LineItem</literal> / <literal>Product</literal>? J'ai choisi de mapper
            <literal>LineItem</literal> comme une classe d'association représentant l'association
            plusieurs-vers-plusieurs entre <literal>Order</literal> et <literal>Product</literal>. Dans
            Hibernate, on appelle cela un élément composite.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="../images/CustomerOrderProduct.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../images/CustomerOrderProduct.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Le document de mapping :
        </para>

        <programlisting><![CDATA[<hibernate-mapping>

    <class name="Customer" table="customers">
        <id name="id">
            <generator class="native"/>
        </id>
        <property name="name"/>
        <set name="orders" inverse="true">
            <key column="customer_id"/>
            <one-to-many class="Order"/>
        </set>
    </class>

    <class name="Order" table="orders">
        <id name="id">
            <generator class="native"/>
        </id>
        <property name="date"/>
        <many-to-one name="customer" column="customer_id"/>
        <list name="lineItems" table="line_items">
            <key column="order_id"/>
            <list-index column="line_number"/>
            <composite-element class="LineItem">
                <property name="quantity"/>
                <many-to-one name="product" column="product_id"/>
            </composite-element>
        </list>
    </class>

    <class name="Product" table="products">
        <id name="id">
            <generator class="native"/>
        </id>
        <property name="serialNumber"/>
    </class>

</hibernate-mapping>]]></programlisting>

    <para>
        <literal>customers</literal>, <literal>orders</literal>, <literal>line_items</literal> et
        <literal>products</literal> contiennent les données de customer, order, order line item et product.
        <literal>line_items</literal> est aussi la table d'association liant orders à products.
    </para>

    <programlisting><![CDATA[create table customers (
    id BIGINT not null generated by default as identity,
    name VARCHAR(255),
    primary key (id)
)

create table orders (
    id BIGINT not null generated by default as identity,
    customer_id BIGINT,
    date TIMESTAMP,
    primary key (id)
)

create table line_items (
    line_number INTEGER not null,
    order_id BIGINT not null,
    product_id BIGINT,
    quantity INTEGER,
    primary key (order_id, line_number)
)

create table products (
    id BIGINT not null generated by default as identity,
    serialNumber VARCHAR(255),
    primary key (id)
)

alter table orders
    add constraint ordersFK0 foreign key (customer_id) references customers
alter table line_items
    add constraint line_itemsFK0 foreign key (product_id) references products
alter table line_items
    add constraint line_itemsFK1 foreign key (order_id) references orders]]></programlisting>

    </sect1>

    <sect1 id="misc">
        <title>Divers mappings d'exemple</title>

        <para>
            Ces exemples sont tous pris de la suite de tests d'Hibernate. Vous en trouverez beaucoup d'autres.
            Regardez dans le dossier <literal>test</literal> de la distribution d'Hibernate.
        </para>

        <para>TODO: put words around this stuff</para>

        <sect2 id="example-mappings-typed-onetone">
            <title>"Typed" one-to-one association</title>
<programlisting><![CDATA[<class name="Person">
    <id name="name"/>
    <one-to-one name="address"
            cascade="all">
        <formula>name</formula>
        <formula>'HOME'</formula>
    </one-to-one>
    <one-to-one name="mailingAddress"
            cascade="all">
        <formula>name</formula>
        <formula>'MAILING'</formula>
    </one-to-one>
</class>

<class name="Address" batch-size="2"
        check="addressType in ('MAILING', 'HOME', 'BUSINESS')">
    <composite-id>
        <key-many-to-one name="person"
                column="personName"/>
        <key-property name="type"
                column="addressType"/>
    </composite-id>
    <property name="street" type="text"/>
    <property name="state"/>
    <property name="zip"/>
</class>]]></programlisting>
        </sect2>

        <sect2 id="example-mappings-composite-key">
            <title>Exemple de clef composée</title>
<programlisting><![CDATA[<class name="Customer">

    <id name="customerId"
        length="10">
        <generator class="assigned"/>
    </id>

    <property name="name" not-null="true" length="100"/>
    <property name="address" not-null="true" length="200"/>

    <list name="orders"
            inverse="true"
            cascade="save-update">
        <key column="customerId"/>
        <index column="orderNumber"/>
        <one-to-many class="Order"/>
    </list>

</class>

<class name="Order" table="CustomerOrder" lazy="true">
    <synchronize table="LineItem"/>
    <synchronize table="Product"/>

    <composite-id name="id"
            class="Order$Id">
        <key-property name="customerId" length="10"/>
        <key-property name="orderNumber"/>
    </composite-id>

    <property name="orderDate"
            type="calendar_date"
            not-null="true"/>

    <property name="total">
        <formula>
            ( select sum(li.quantity*p.price)
            from LineItem li, Product p
            where li.productId = p.productId
                and li.customerId = customerId
                and li.orderNumber = orderNumber )
        </formula>
    </property>

    <many-to-one name="customer"
            column="customerId"
            insert="false"
            update="false"
            not-null="true"/>

    <bag name="lineItems"
            fetch="join"
            inverse="true"
            cascade="save-update">
        <key>
            <column name="customerId"/>
            <column name="orderNumber"/>
        </key>
        <one-to-many class="LineItem"/>
    </bag>

</class>

<class name="LineItem">

    <composite-id name="id"
            class="LineItem$Id">
        <key-property name="customerId" length="10"/>
        <key-property name="orderNumber"/>
        <key-property name="productId" length="10"/>
    </composite-id>

    <property name="quantity"/>

    <many-to-one name="order"
            insert="false"
            update="false"
            not-null="true">
        <column name="customerId"/>
        <column name="orderNumber"/>
    </many-to-one>

    <many-to-one name="product"
            insert="false"
            update="false"
            not-null="true"
            column="productId"/>

</class>

<class name="Product">
    <synchronize table="LineItem"/>

    <id name="productId"
        length="10">
        <generator class="assigned"/>
    </id>

    <property name="description"
        not-null="true"
        length="200"/>
    <property name="price" length="3"/>
    <property name="numberAvailable"/>

    <property name="numberOrdered">
        <formula>
            ( select sum(li.quantity)
            from LineItem li
            where li.productId = productId )
        </formula>
    </property>

</class>]]></programlisting>
        </sect2>

        <sect2 id="example-mappings-composite-key-manytomany">
            <title>Many-to-many avec une clef composée partagée</title>
<programlisting><![CDATA[<class name="User" table="`User`">
    <composite-id>
        <key-property name="name"/>
        <key-property name="org"/>
    </composite-id>
    <set name="groups" table="UserGroup">
        <key>
            <column name="userName"/>
            <column name="org"/>
        </key>
        <many-to-many class="Group">
            <column name="groupName"/>
            <formula>org</formula>
        </many-to-many>
    </set>
</class>

<class name="Group" table="`Group`">
    <composite-id>
        <key-property name="name"/>
        <key-property name="org"/>
    </composite-id>
    <property name="description"/>
    <set name="users" table="UserGroup" inverse="true">
        <key>
            <column name="groupName"/>
            <column name="org"/>
        </key>
        <many-to-many class="User">
            <column name="userName"/>
            <formula>org</formula>
        </many-to-many>
    </set>
</class>
]]></programlisting>
        </sect2>

        <sect2 id="example-mappings-content-discrimination">
            <title>Contenu basé sur une discrimination</title>
<programlisting><![CDATA[<class name="Person"
    discriminator-value="P">

    <id name="id"
        column="person_id"
        unsaved-value="0">
        <generator class="native"/>
    </id>


    <discriminator
        type="character">
        <formula>
            case
                when title is not null then 'E'
                when salesperson is not null then 'C'
                else 'P'
            end
        </formula>
    </discriminator>

    <property name="name"
        not-null="true"
        length="80"/>

    <property name="sex"
        not-null="true"
        update="false"/>

    <component name="address">
        <property name="address"/>
        <property name="zip"/>
        <property name="country"/>
    </component>

    <subclass name="Employee"
        discriminator-value="E">
            <property name="title"
                length="20"/>
            <property name="salary"/>
            <many-to-one name="manager"/>
    </subclass>

    <subclass name="Customer"
        discriminator-value="C">
            <property name="comments"/>
            <many-to-one name="salesperson"/>
    </subclass>

</class>]]></programlisting>
        </sect2>

        <sect2 id="example-mappings-association-alternatekeys" revision="2">
            <title>Associations sur des clefs alternées</title>
<programlisting><![CDATA[<class name="Person">

    <id name="id">
        <generator class="hilo"/>
    </id>

    <property name="name" length="100"/>

    <one-to-one name="address"
        property-ref="person"
        cascade="all"
        fetch="join"/>

    <set name="accounts"
        inverse="true">
        <key column="userId"
            property-ref="userId"/>
        <one-to-many class="Account"/>
    </set>

    <property name="userId" length="8"/>

</class>

<class name="Address">

    <id name="id">
        <generator class="hilo"/>
    </id>

    <property name="address" length="300"/>
    <property name="zip" length="5"/>
    <property name="country" length="25"/>
    <many-to-one name="person" unique="true" not-null="true"/>

</class>

<class name="Account">
    <id name="accountId" length="32">
        <generator class="uuid"/>
    </id>

    <many-to-one name="user"
        column="userId"
        property-ref="userId"/>

    <property name="type" not-null="true"/>

</class>]]></programlisting>
        </sect2>

    </sect1>

</chapter>

