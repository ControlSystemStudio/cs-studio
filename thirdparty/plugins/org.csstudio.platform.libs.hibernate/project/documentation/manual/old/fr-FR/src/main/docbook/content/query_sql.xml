<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="querysql" revision="2">
    <title>SQL natif</title>

    <para>
        Vous pouvez aussi écrire vos requêtes dans le dialecte SQL natif de votre base de données.
        Ceci est utile si vous souhaitez utiliser les fonctionnalités spécifiques de votre base de
        données comme le mot clé <literal>CONNECT</literal> d'Oracle. Cette fonctionnalité offre par ailleurs un moyen
        de migration plus propre et doux d'une application basée sur SQL/JDBC vers
        une application Hibernate.
    </para>

  <para>Hibernate3 vous permet de spécifier du SQL écrit à la main (incluant les procédures stockées) 
  pour toutes les opérations de création, mise à jour, suppression et chargement.</para>

  <sect1 id="querysql-creating" revision="3">
    <title>Utiliser une <literal>SQLQuery</literal></title>

    <para>L'exécution des requêtes en SQL natif est contrôlée par l'interface <literal>SQLQuery</literal>,
        laquelle est obtenue en appelant <literal>Session.createSQLQuery()</literal>.
        Dans des cas extrêmement simples, nous pouvons utiliser la forme suivante :
    </para>

    
    <sect2>
	    <title>Scalar queries</title>
	    
	    <para>The most basic SQL query is to get a list of scalars
		    (values).</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").list();
								 sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").list();
								 ]]></programlisting>
	    
	    <para>These will both return a List of Object arrays (Object[]) with
		    scalar values for each column in the CATS table. Hibernate will use
		    ResultSetMetadata to deduce the actual order and types of the returned
		    scalar values.</para>
	    
	    <para>To avoid the overhead of using
		    <literal>ResultSetMetadata</literal> or simply to be more explicit in
		    what is returned one can use <literal>addScalar()</literal>.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
								 .addScalar("ID", Hibernate.LONG)
								 .addScalar("NAME", Hibernate.STRING)
								 .addScalar("BIRTHDATE", Hibernate.DATE)
								 ]]></programlisting>
	    
	    <para>This query specified:</para>
	    
	    <itemizedlist>
		    <listitem>
			    <para>the SQL query string</para>
		    </listitem>
		    
		    <listitem>
			    <para>the columns and types to return</para>
		    </listitem>
	    </itemizedlist>
	    
	    <para>This will still return Object arrays, but now it will not use
		    <literal>ResultSetMetdata</literal> but will instead explicitly get the
		    ID, NAME and BIRTHDATE column as respectively a Long, String and a Short
		    from the underlying resultset. This also means that only these three
		    columns will be returned, even though the query is using
		    <literal>*</literal> and could return more than the three listed
		    columns.</para>
	    
	    <para>It is possible to leave out the type information for all or some
		    of the scalars.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
								 .addScalar("ID", Hibernate.LONG)
								 .addScalar("NAME")
								 .addScalar("BIRTHDATE")
								 ]]></programlisting>
	    
	    <para>This is essentially the same query as before, but now
		    <literal>ResultSetMetaData</literal> is used to decide the type of NAME
		    and BIRTHDATE where as the type of ID is explicitly specified.</para>
	    
	    <para>How the java.sql.Types returned from ResultSetMetaData is mapped
		    to Hibernate types is controlled by the Dialect. If a specific type is
		    not mapped or does not result in the expected type it is possible to
		    customize it via calls to <literal>registerHibernateType</literal> in
		    the Dialect.</para>
    </sect2>
    
    <sect2>
	    <title>Entity queries</title>
	    
	    <para>The above queries were all about returning scalar values,
		    basically returning the "raw" values from the resultset. The following
		    shows how to get entity objects from a native sql query via
		    <literal>addEntity()</literal>.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").addEntity(Cat.class);
								 sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").addEntity(Cat.class);
								 ]]></programlisting>
	    
	    <para>This query specified:</para>
	    
	    <itemizedlist>
		    <listitem>
			    <para>the SQL query string</para>
		    </listitem>
		    
		    <listitem>
			    <para>the entity returned by the query</para>
		    </listitem>
	    </itemizedlist>
	    
	    <para>Assuming that Cat is mapped as a class with the columns ID, NAME
		    and BIRTHDATE the above queries will both return a List where each
		    element is a Cat entity.</para>
	    
	    <para>If the entity is mapped with a <literal>many-to-one</literal> to
		    another entity it is required to also return this when performing the
		    native query, otherwise a database specific "column not found" error
		    will occur. The additional columns will automatically be returned when
		    using the * notation, but we prefer to be explicit as in the following
		    example for a <literal>many-to-one</literal> to a
		    <literal>Dog</literal>:</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS").addEntity(Cat.class);
								 ]]></programlisting>
	    
	    <para>This will allow cat.getDog() to function properly.</para>
    </sect2>
    
    <sect2>
	    <title>Handling associations and collections</title>
	    
	    <para>It is possible to eagerly join in the <literal>Dog</literal> to
		    avoid the possible extra roundtrip for initializing the proxy. This is
		    done via the <literal>addJoin()</literal> method, which allows you to
		    join in an association or collection.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID")
								 .addEntity("cat", Cat.class)
								 .addJoin("cat.dog");
								 ]]></programlisting>
	    
	    <para>In this example the returned <literal>Cat</literal>'s will have
		    their <literal>dog</literal> property fully initialized without any
		    extra roundtrip to the database. Notice that we added a alias name
		    ("cat") to be able to specify the target property path of the join. It
		    is possible to do the same eager joining for collections, e.g. if the
		    <literal>Cat</literal> had a one-to-many to <literal>Dog</literal>
		    instead.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID")
								 .addEntity("cat", Cat.class)
								 .addJoin("cat.dogs");
								 ]]></programlisting>
	    
	    <para>
		    At this stage we are reaching the limits of what is possible with native queries without starting to
		    enhance the sql queries to make them usable in Hibernate; the problems starts to arise when returning
		    multiple entities of the same type or when the default alias/column names are not enough.
	    </para>
    </sect2>
    
    <sect2>
	    <title>Returning multiple entities</title>
	    
	    <para>Until now the result set column names are assumed to be the same
		    as the column names specified in the mapping document. This can be
		    problematic for SQL queries which join multiple tables, since the same
		    column names may appear in more than one table.</para>
	    
	    <para>Column alias injection is needed in the following query (which
		    most likely will fail):</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT c.*, m.*  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
								 .addEntity("cat", Cat.class)
								 .addEntity("mother", Cat.class)
								 ]]></programlisting>
	    
	    <para>The intention for this query is to return two Cat instances per
		    row, a cat and its mother. This will fail since there is a conflict of
		    names since they are mapped to the same column names and on some
		    databases the returned column aliases will most likely be on the form
		    "c.ID", "c.NAME", etc. which are not equal to the columns specificed in
		    the mappings ("ID" and "NAME").</para>
	    
	    <para>The following form is not vulnerable to column name
		    duplication:</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT {cat.*}, {mother.*}  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
								 .addEntity("cat", Cat.class)
								 .addEntity("mother", Cat.class)
								 ]]></programlisting>
	    
	    <para>This query specified:</para>
	    
	    <itemizedlist>
		    <listitem>
			    <para>the SQL query string, with placeholders for Hibernate to
				    inject column aliases</para>
		    </listitem>
		    
		    <listitem>
			    <para>the entities returned by the query</para>
		    </listitem>
	    </itemizedlist>
	    
	    <para>The {cat.*} and {mother.*} notation used above is a shorthand for
		    "all properties". Alternatively, you may list the columns explicity, but
		    even in this case we let Hibernate inject the SQL column aliases for
		    each property. The placeholder for a column alias is just the property
		    name qualified by the table alias. In the following example, we retrieve
		    Cats and their mothers from a different table (cat_log) to the one
		    declared in the mapping metadata. Notice that we may even use the
		    property aliases in the where clause if we like.</para>
	    
	    <programlisting><![CDATA[String sql = "SELECT ID as {c.id}, NAME as {c.name}, " + 
					    "BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} " +
					    "FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID";
					    
					    List loggedCats = sess.createSQLQuery(sql)
					    .addEntity("cat", Cat.class)
					    .addEntity("mother", Cat.class).list()
					    ]]></programlisting>
	    
	    <sect3 id="querysql-aliasreferences" revision="2">
		    <title>Alias and property references</title>
		    
		    <para>For most cases the above alias injection is needed, but for
			    queries relating to more complex mappings like composite properties,
			    inheritance discriminators, collections etc. there are some specific
			    aliases to use to allow Hibernate to inject the proper aliases.</para>
		    
		    <para>The following table shows the different possibilities of using
			    the alias injection. Note: the alias names in the result are examples,
			    each alias will have a unique and probably different name when
			    used.</para>
		    
		    <table frame="topbot" id="aliasinjection-summary">
			    <title>Alias injection names</title>
			    
			    <tgroup cols="3">
				    <colspec colwidth="1*" />
				    
				    <colspec colwidth="1*" />
				    
				    <colspec colwidth="2.5*" />
				    
				    <thead>
					    <row>
						    <entry>Description</entry>
						    
						    <entry>Syntax</entry>
						    
						    <entry>Example</entry>
					    </row>
				    </thead>
				    
				    <tbody>
					    <row>
						    <entry>A simple property</entry>
						    
						    <entry><literal>{[aliasname].[propertyname]</literal></entry>
						    
						    <entry><literal>A_NAME as {item.name}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>A composite property</entry>
						    
						    <entry><literal>{[aliasname].[componentname].[propertyname]}</literal></entry>
						    
						    <entry><literal>CURRENCY as {item.amount.currency}, VALUE as
								    {item.amount.value}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>Discriminator of an entity</entry>
						    
						    <entry><literal>{[aliasname].class}</literal></entry>
						    
						    <entry><literal>DISC as {item.class}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>All properties of an entity</entry>
						    
						    <entry><literal>{[aliasname].*}</literal></entry>
						    
						    <entry><literal>{item.*}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>A collection key</entry>
						    
						    <entry><literal>{[aliasname].key}</literal></entry>
						    
						    <entry><literal>ORGID as {coll.key}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>The id of an collection</entry>
						    
						    <entry><literal>{[aliasname].id}</literal></entry>
						    
						    <entry><literal>EMPID as {coll.id}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>The element of an collection</entry>
						    
						    <entry><literal>{[aliasname].element}</literal></entry>
						    
						    <entry><literal>XID as {coll.element}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>roperty of the element in the collection</entry>
						    
						    <entry><literal>{[aliasname].element.[propertyname]}</literal></entry>
						    
						    <entry><literal>NAME as {coll.element.name}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>All properties of the element in the collection</entry>
						    
						    <entry><literal>{[aliasname].element.*}</literal></entry>
						    
						    <entry><literal>{coll.element.*}</literal></entry>
					    </row>
					    
					    <row>
						    <entry>All properties of the the collection</entry>
						    
						    <entry><literal>{[aliasname].*}</literal></entry>
						    
						    <entry><literal>{coll.*}</literal></entry>
					    </row>
				    </tbody>
			    </tgroup>
		    </table>
	    </sect3>
    </sect2>
    
    <sect2>
	    <title>Returning non-managed entities</title>
	    
	    <para>It is possible to apply a ResultTransformer to native sql queries. Allowing it to e.g. return non-managed entities.</para>
	    
	    <programlisting><![CDATA[sess.createSQLQuery("SELECT NAME, BIRTHDATE FROM CATS")
								 .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]></programlisting>
	    
	    <para>This query specified:</para>
	    
	    <itemizedlist>
		    <listitem>
			    <para>the SQL query string</para>
		    </listitem>
		    
		    <listitem>
			    <para>a result transformer</para>
		    </listitem>
	    </itemizedlist>
	    
	    <para>
		    The above query will return a list of <literal>CatDTO</literal> which has been instantiated and injected the values of NAME and BIRTHNAME into its corresponding
		    properties or fields.
	    </para>
    </sect2>
    
    <sect2>
	    <title>Handling inheritance</title>
	    
	    <para>Native sql queries which query for entities that is mapped as part
		    of an inheritance must include all properties for the baseclass and all
		    it subclasses.</para>
    </sect2>
    
    <sect2>
	    <title>Parameters</title>
	    
	    <para>Native sql queries support positional as well as named
		    parameters:</para>
	    
	    <programlisting><![CDATA[Query query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like ?").addEntity(Cat.class);
					   List pusList = query.setString(0, "Pus%").list();
					   
					   query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like :name").addEntity(Cat.class);
					   List pusList = query.setString("name", "Pus%").list();          ]]></programlisting>
    </sect2>
    
    
</sect1>

  <sect1 id="querysql-namedqueries" revision="3">
    <title>Requêtes SQL nommées</title>

    <para>
        Les requêtes SQL nommées peuvent être définies dans le document de mapping
        et appelées exactement de la même manière qu'un requête HQL nommée. Dans ce
        cas, nous <emphasis>n'avons pas besoin</emphasis> d'appeler <literal>addEntity()</literal>.
    </para>

    <programlisting><![CDATA[<sql-query name="persons">
		    <return alias="person" class="eg.Person"/>
		    SELECT person.NAME AS {person.name},
		    person.AGE AS {person.age},
		    person.SEX AS {person.sex}
		    FROM PERSON person
		    WHERE person.NAME LIKE :namePattern
	    </sql-query>]]></programlisting>
    
    <programlisting><![CDATA[List people = sess.getNamedQuery("persons")
				  .setString("namePattern", namePattern)
				  .setMaxResults(50)
    .list();]]></programlisting>

    <para>
        Les éléments <literal>&lt;return-join&gt;</literal> et
        <literal>&lt;load-collection&gt;</literal> sont respectivement utilisés pour lier
        des associations et définir des requêtes qui initialisent des collections.
    </para>

    <programlisting><![CDATA[<sql-query name="personsWith">
		    <return alias="person" class="eg.Person"/>
		    <return-join alias="address" property="person.mailingAddress"/>
		    SELECT person.NAME AS {person.name},
		    person.AGE AS {person.age},
		    person.SEX AS {person.sex},
		    address.STREET AS {address.street},
		    address.CITY AS {address.city},
		    address.STATE AS {address.state},
		    address.ZIP AS {address.zip}
		    FROM PERSON person
		    JOIN ADDRESS address
		    ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
		    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>

    <para>
        Une requête SQL nommée peut retourner une valeur scalaire. Vous devez
        spécifier l'alias de colonne et le type Hibernate utilisant l'élément
        <literal>&lt;return-scalar&gt;</literal> :</para>

<programlisting><![CDATA[<sql-query name="mySqlQuery">
		<return-scalar column="name" type="string"/>
		<return-scalar column="age" type="long"/>
		SELECT p.NAME AS name,
		p.AGE AS age,
		FROM PERSON p WHERE p.NAME LIKE 'Hiber%'
</sql-query>]]></programlisting>

    <para>
        Vous pouvez externaliser les informations de mapping des résultats dans un
        élément <literal>&lt;resultset&gt;</literal> pour soit les réutiliser
        dans différentes requêtes nommées, soit à travers l'API
        <literal>setResultSetMapping()</literal>.
    </para>

    <programlisting><![CDATA[<resultset name="personAddress">
		    <return alias="person" class="eg.Person"/>
		    <return-join alias="address" property="person.mailingAddress"/>
	    </resultset>
	    
	    <sql-query name="personsWith" resultset-ref="personAddress">
		    SELECT person.NAME AS {person.name},
		    person.AGE AS {person.age},
		    person.SEX AS {person.sex},
		    address.STREET AS {address.street},
		    address.CITY AS {address.city},
		    address.STATE AS {address.state},
		    address.ZIP AS {address.zip}
		    FROM PERSON person
		    JOIN ADDRESS address
		    ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
		    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>
<para>You can alternatively use the resultset mapping information in your
	hbm files directly in java code.</para>

<programlisting><![CDATA[List cats = sess.createSQLQuery(
			      "select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id"
			      )
			      .setResultSetMapping("catAndKitten")
    .list();]]></programlisting>

    <sect2 id="propertyresults">
      <title>Utilisation de return-property pour spécifier explicitement les noms des colonnes/alias</title>

      <para>
          Avec <literal>&lt;return-property&gt;</literal> vous pouvez explicitement dire
          à Hibernate quels alias de colonne utiliser, plutot que d'employer la syntaxe
          <literal>{}</literal> pour laisser Hibernate injecter ses propres alias.
      </para>

      <programlisting><![CDATA[<sql-query name="mySqlQuery">
		      <return alias="person" class="eg.Person">
			      <return-property name="name" column="myName"/>
			      <return-property name="age" column="myAge"/>
			      <return-property name="sex" column="mySex"/>
		      </return>
		      SELECT person.NAME AS myName,
		      person.AGE AS myAge,
		      person.SEX AS mySex,
		      FROM PERSON person WHERE person.NAME LIKE :name
	      </sql-query>
]]></programlisting>

      <para>
          <literal>&lt;return-property&gt;</literal> fonctionne aussi avec de
          multiple colonnes. Cela résout une limitation de la syntaxe <literal>{}</literal>
          qui ne peut pas permettre une bonne granularité des propriétés multi-colonnes.
      </para>

      
      <programlisting><![CDATA[<sql-query name="organizationCurrentEmployments">
		      <return alias="emp" class="Employment">
			      <return-property name="salary">
				      <return-column name="VALUE"/>
				      <return-column name="CURRENCY"/>
			      </return-property>
			      <return-property name="endDate" column="myEndDate"/>
		      </return>
		      SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer},
		      STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
		      REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY
		      FROM EMPLOYMENT
		      WHERE EMPLOYER = :id AND ENDDATE IS NULL
		      ORDER BY STARTDATE ASC
</sql-query>]]></programlisting>

      <para>
          Notez que dans cet exemple nous avons utilisé <literal>&lt;return-property&gt;</literal>
          en combinaison avec la syntaxe <literal>{}</literal> pour l'injection. Cela autorise les
          utilisateurs à choisir comment ils veulent référencer les colonnes et les propriétés.
      </para>

      <para>
          Si votre mapping a un discriminant vous devez utiliser
          <literal>&lt;return-discriminator&gt;</literal> pour spécifier la colonne
          discriminante.
      </para>
    </sect2>

    <sect2 id="sp_query" revision="1">
      <title>Utilisation de procédures stockées pour les requêtes</title>

      <para>
          Hibernate 3 introduit le support des requêtes via procédures stockées et les fonctions. 
          La documentation suivante est valable pour les deux.
          Les procédures stockées/fonctions doivent retourner l'ensemble de résultats en tant que
          premier paramètre sortant (NdT: "out-parameter") pour être capable de fonctionner
          avec Hibernate. Un exemple d'une telle procédure stockée en Oracle 9 et
          version supérieure :
      </para>

      <programlisting><![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments
				      RETURN SYS_REFCURSOR
				      AS
				      st_cursor SYS_REFCURSOR;
				      BEGIN
				      OPEN st_cursor FOR
				      SELECT EMPLOYEE, EMPLOYER,
				      STARTDATE, ENDDATE,
				      REGIONCODE, EID, VALUE, CURRENCY
				      FROM EMPLOYMENT;
				      RETURN  st_cursor;
				      END;]]></programlisting>


      <para>Pour utiliser cette requête dans Hibernate vous avez besoin de la mapper via une requête nommée.</para>

      <programlisting><![CDATA[<sql-query name="selectAllEmployees_SP" callable="true">
		      <return alias="emp" class="Employment">
			      <return-property name="employee" column="EMPLOYEE"/>
			      <return-property name="employer" column="EMPLOYER"/>
			      <return-property name="startDate" column="STARTDATE"/>
			      <return-property name="endDate" column="ENDDATE"/>
			      <return-property name="regionCode" column="REGIONCODE"/>
			      <return-property name="id" column="EID"/>
			      <return-property name="salary">
				      <return-column name="VALUE"/>
				      <return-column name="CURRENCY"/>
			      </return-property>
		      </return>
		      { ? = call selectAllEmployments() }
</sql-query>]]></programlisting>

      <para>
          Notez que les procédures stockées retournent, pour le moment, seulement des
          scalaires et des entités. <literal>&lt;return-join&gt;</literal> et
          <literal>&lt;load-collection&gt;</literal> ne sont pas supportés.
      </para>

      <sect3 id="querysql-limits-storedprocedures" revision="1">
        <title>Règles/limitations lors de l'utilisation des procédures stockées</title>

        <para>
            Pur utiliser des procédures stockées avec Hibernate, les procédures doivent
            suivre certaines règles. Si elles ne suivent pas ces règles, elles ne sont pas
            utilisables avec Hibernate. Si vous voulez encore utiliser ces procédures vous
            devez les exécuter via <literal>session.connection()</literal>. Les règles
            sont différentes pour chaque base de données, puisque les vendeurs de base
            de données ont des sémantiques/syntaxes différentes pour les procédures stockées.
        </para>

        <para>Les requêtes de procédures stockées ne peuvent pas être paginées avec
            <literal>setFirstResult()/setMaxResults()</literal>.</para>
    <para>Recommended call form is standard SQL92: <literal>{ ? = call
		    functionName(&lt;parameters&gt;) }</literal> or <literal>{ ? = call
		    procedureName(&lt;parameters&gt;}</literal>. Native call syntax is not
        supported.</para>
        <para>Pour Oracle les règles suivantes s'appliquent :</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>
                La procédure doit retourner un ensemble de résultats. Le
                prmeier paramètre d'une procédure doit être un <literal>OUT</literal> 
                qui retourne un ensemble de résultats. Ceci est fait en
                retournant un <literal>SYS_REFCURSOR</literal> dans Oracle 9 ou 10. Dans
                Oracle vous avez besoin de définir un type <literal>REF CURSOR</literal>.</para>
          </listitem>

        </itemizedlist>

        <para>Pour Sybase ou MS SQL server les règles suivantes s'appliquent :</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>La procédure doit retourner un ensemble de résultats. Notez que comme
            ces serveurs peuvent retourner de multiples ensembles de résultats et mettre à jour
            des compteurs, Hibernate itérera les résultats et prendra le premier résultat qui est
            un ensemble de résultat comme valeur de retour. Tout le reste sera ignoré.</para>
          </listitem>

          <listitem>
            <para>Si vous pouvez activer <literal>SET NOCOUNT ON</literal> dans votre procédure,
                elle sera probablement plus efficace, mais ce n'est pas une obligation.</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="querysql-cud">
    <title>SQL personnalisé pour créer, mettre à jour et effacer</title>

    <para>
        Hibernate3 peut utiliser des expression SQL personnalisées pour des opérations de création,
        de mise à jour, et de suppression. Les objets persistants les classes et les collections
        dans Hibernate contiennent déjà un ensemble de chaînes de caractères générées lors de la
        configuration (insertsql, deletesql, updatesql, etc). Les tages de mapping
    <literal>&lt;sql-insert&gt;</literal>,
    <literal>&lt;sql-delete&gt;</literal>, et
    <literal>&lt;sql-update&gt;</literal> surchargent ces chaînes de caractères :</para>

<programlisting><![CDATA[<class name="Person">
		<id name="id">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>
		<sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>
</class>]]></programlisting>

    <para>Le SQL est directement exécuté dans votre base de données, donc vous êtes libre d'utiliser
        le dialecte que vous souhaitez. Cela réduira bien sûr la portabilité de votre mapping si vous
        utilisez du SQL spécifique à votre base de données.</para>

    <para>Les procédures stockées sont supportées si l'attribut <literal>callable</literal> est paramétré :</para>

    
    <programlisting><![CDATA[<class name="Person">
		    <id name="id">
			    <generator class="increment"/>
		    </id>
		    <property name="name" not-null="true"/>
		    <sql-insert callable="true">{call createPerson (?, ?)}</sql-insert>
		    <sql-delete callable="true">{? = call deletePerson (?)}</sql-delete>
		    <sql-update callable="true">{? = call updatePerson (?, ?)}</sql-update>
</class>]]></programlisting>

    <para>L'ordre des paramètres positionnels est actuellement vital, car ils doivent être dans la
        même séquence qu'Hibernate les attend.</para>

    <para>
        Vous pouvez voir l'ordre attendu en activant les journaux de debug pour le
        niveau <literal>org.hibernate.persister.entity</literal> level. Avec ce niveau activé,
        Hibernate imprimera le SQL statique qui est utilisé pour créer, mettre à jour,
        supprimer, etc. des entités. (Pour voir la séquence attendue, rappelez-vous de ne pas
        inclure votre SQL personnalisé dans les fichiers de mapping de manière à surcharger le
        SQL statique généré par Hibernate.)</para>

    <para>Les procédures stockées sont dans la plupart des cas (lire : il vaut mieux le faire)
    requises pour retourner le nombre de lignes insérées/mises à jour/supprimées, puisque
    Hibernate fait quelques vérifications de succès lors de l'exécution de l'expression.
    Hibernate inscrit toujours la première expression comme un paramètre de sortie numérique pour les
    opérations CUD :</para>


<programlisting><![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN VARCHAR2)
				RETURN NUMBER IS
				BEGIN
				
				update PERSON
				set
				NAME = uname,
				where
				ID = uid;
				
				return SQL%ROWCOUNT;
				
END updatePerson;]]></programlisting>
  </sect1>

  <sect1 id="querysql-load">
    <title>SQL personnalisé pour le chargement</title>

    <para>Vous pouvez aussi déclarer vos propres requêtes SQL (ou HQL) pour le chargement d'entité :</para>

    
    <programlisting><![CDATA[<sql-query name="person">
		    <return alias="pers" class="Person" lock-mode="upgrade"/>
		    SELECT NAME AS {pers.name}, ID AS {pers.id}
		    FROM PERSON
		    WHERE ID=?
		    FOR UPDATE
</sql-query>]]></programlisting>

    <para>Ceci est juste une déclaration de requête nommée, comme vu plus tôt. Vous pouvez référencer
    cette requête nommée dans un mapping de classe :</para>
<programlisting><![CDATA[<class name="Person">
		<id name="id">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<loader query-ref="person"/>
</class>]]></programlisting>

    <para>Ceci fonctionne même avec des procédures stockées.</para>

    <para>Vous pouvez même définir une requête pour le chargement d'une collection :</para>
    <programlisting><![CDATA[<set name="employments" inverse="true">
		    <key/>
		    <one-to-many class="Employment"/>
		    <loader query-ref="employments"/>
	    </set>]]></programlisting>
    
    <programlisting><![CDATA[<sql-query name="employments">
		    <load-collection alias="emp" role="Person.employments"/>
		    SELECT {emp.*}
		    FROM EMPLOYMENT emp
		    WHERE EMPLOYER = :id
		    ORDER BY STARTDATE ASC, EMPLOYEE ASC
</sql-query>]]></programlisting>

    <para>Vous pourriez même définir un chargeur d'entité qui charge une collection par jointure :</para>

    <programlisting><![CDATA[<sql-query name="person">
		    <return alias="pers" class="Person"/>
		    <return-join alias="emp" property="pers.employments"/>
		    SELECT NAME AS {pers.*}, {emp.*}
		    FROM PERSON pers
		    LEFT OUTER JOIN EMPLOYMENT emp
		    ON pers.ID = emp.PERSON_ID
		    WHERE ID=?
</sql-query>]]></programlisting>
  </sect1>
</chapter>
