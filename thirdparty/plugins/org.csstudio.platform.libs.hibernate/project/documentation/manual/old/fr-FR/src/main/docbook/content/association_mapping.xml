<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="associations">

    <title>Mapper les associations</title>

    <sect1 id="assoc-intro" revision="1">
        <title>Introduction</title>
        
        <para>
            Correctement mapper les associations est souvent la tâche la plus difficile.
            Dans cette section nous traiterons les cas classiques les uns après les autres.
            Nous commencerons d'abbord par les mappings unidirectionnels, puis nous aborderons
            la question des mappings bidirectionnels. Nous illustrerons tous nos exemples 
            avec les classes <literal>Person</literal> et <literal>Address</literal>.
        </para>
        
        <para>
        	Nous utiliserons deux critères pour classer les associations : le premier 
        	sera de savoir si l'association est bâti sur une table supplémentaire d'association
        	et le deuxieme sera basé sur la multiplicité de cette association.
        </para>
        
        <para>
        	Autoriser une clé étrangère nulle est considéré comme un mauvais choix dans 
        	la construction d'un modèle de données. Nous supposerons donc que dans tous 
        	les exemples qui vont suivre on aura interdit la valeur nulle pour les clés 
        	étrangères. Attention, ceci ne veut pas dire que Hibernate ne supporte pas 
        	les clés étrangères pouvant prendre des valeurs nulles, les exemples qui suivent 
        	continueront de fonctionner si vous décidiez ne plus imposer la contrainte 
        	de non-nullité sur les clés étrangères.
        </para>
        
    </sect1>

    <sect1 id="assoc-unidirectional" revision="1">
        <title>Association unidirectionnelle</title>
        
        <sect2 id="assoc-unidirectional-m21" >
        <title>plusieurs à un</title>
        
        <para>
            Une <emphasis>association plusieurs-à-un (many-to-one) unidirectionnelle </emphasis> 
            est le type que l'on rencontre le plus souvent dans les associations unidirectionnelles.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>

        
        </sect2>

        <sect2 id="assoc-unidirectional-121">
        <title>un à un</title>
        
        <para>
            une <emphasis>association un-à-un (one-to-one) sur une clé étrangère</emphasis>
            est presque identique. La seule différence est sur la contrainte d'unicité que
            l'on impose à cette colonne.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId" 
        unique="true"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        <para>
            Une <emphasis>association un-à-un (one-to-one) unidirectionnelle sur une clé primaire</emphasis>
            utilise un générateur d'identifiant particulier. (Remarquez que nous avons inversé le sens de cette
            association dans cet exemple.)
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
</class>

<class name="Address">
    <id name="id" column="personId">
        <generator class="foreign">
            <param name="property">person</param>
        </generator>
    </id>
    <one-to-one name="person" constrained="true"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
        <sect2 id="assoc-unidirectional-12m">
        <title>un à plusieurs</title>
        
        <para>
            Une <emphasis>association un-à-plusieurs (one-to-many) unidirectionnelle sur une 
            clé étrangère</emphasis> est vraiment inhabituelle, et n'est pas vraiment recommandée.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses">
        <key column="personId" 
            not-null="true"/>
        <one-to-many class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( addressId bigint not null primary key, personId bigint not null )
        ]]></programlisting>
        
        <para>
            Nous pensons qu'il est préférable d'utiliser une table de jointure pour ce type d'association.
        </para>
        
        </sect2>
    
    </sect1>

    <sect1 id="assoc-unidirectional-join" revision="1">
        <title>Associations unidirectionnelles avec tables de jointure</title>
        
        <sect2 id="assoc-unidirectional-join-12m">
        <title>un à plusieurs</title>
        
        <para>
            Une <emphasis>association unidirectionnelle un-à-plusieurs (one-to-many) avec
            une table de jointure</emphasis> est un bien meilleur choix. 
            Remarquez qu'en spécifiant <literal>unique="true"</literal>,
            on a changé la multiplicité plusieurs-à-plusieurs (many-to-many) pour 
            un-à-plusieurs (one-to-many).
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            unique="true"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-m21">
        <title>plusieurs à un</title>
        
        <para>
            Une <emphasis>assiociation plusieurs-à-un (many-to-one) unidirectionnelle sur
            une table de jointure</emphasis> est très fréquente quand l'association est optionnelle.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-121">
        <title>un à un</title>
        
        <para>
            Une <emphasis>association unidirectionnelle un-à-un (one-to-one) sur une table
            de jointure</emphasis> est extrèmement rare mais envisageable.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" 
            unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"
            unique="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

        <sect2 id="assoc-unidirectional-join-m2m">
        <title>plusieurs à plusieurs</title>
        
        <para>
            Finallement, nous avons <emphasis>l'association unidirectionnelle plusieurs-à-plusieurs (many-to-many)</emphasis>.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

    </sect1>

    <sect1 id="assoc-bidirectional" revision="1">
        <title>Associations bidirectionnelles</title>
        
        <sect2 id="assoc-bidirectional-m21" revision="2">
        <title>un à plusieurs / plusieurs à un</title>
        
        <para>
            Une <emphasis>association bidirectionnelle plusieurs à un (many-to-one)</emphasis>  
            est le type d'association que l'on rencontre le plus souvent. (c'est la façon standard de créer
            des relations parents/enfants.)
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <set name="people" inverse="true">
        <key column="addressId"/>
        <one-to-many class="Person"/>
    </set>
</class>]]></programlisting>

        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        <para>
            Si vous utilisez une <literal>List</literal> (ou toute autre collection indexée) vous devez
            paramétrer la colonne <literal>key</literal> de la clé étrangère à <literal>not null</literal>,
            et laisser Hibernate gérer l'association depuis l'extrémité collection pour maintenir l'index
            de chaque élément (rendant l'autre extrémité virtuellement inverse en paramétrant
            <literal>update="false"</literal> et <literal>insert="false"</literal>):
        </para>

        <programlisting><![CDATA[<class name="Person">
   <id name="id"/>
   ...
   <many-to-one name="address"
      column="addressId"
      not-null="true"
      insert="false"
      update="false"/>
</class>

<class name="Address">
   <id name="id"/>
   ...
   <list name="people">
      <key column="addressId" not-null="true"/>
      <list-index column="peopleIdx"/>
      <one-to-many class="Person"/>
   </list>
</class>]]></programlisting>
<para>
	It is important that you define <literal>not-null="true"</literal> on the
	<literal>&lt;key&gt;</literal> element of the collection mapping if the
	underlying foreign key column is <literal>NOT NULL</literal>. Don't only
	declare <literal>not-null="true"</literal> on a possible nested
	<literal>&lt;column&gt;</literal> element, but on the <literal>&lt;key&gt;</literal>
	element.
            </para>        
        </sect2>
        
        <sect2 id="assoc-bidirectional-121">
        <title>Un à un</title>
        
        <para>
            Une <emphasis>association bidirectionnelle un à un (one-to-one) sur une clé étrangère</emphasis>
            est aussi très fréquente.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <many-to-one name="address" 
        column="addressId" 
        unique="true"
        not-null="true"/>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
   <one-to-one name="person" 
        property-ref="address"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        <para>
            Une <emphasis>association bidirectionnelle un-à-un (one-to-one) sur une clé primaire</emphasis>
            utilise un générateur particulier d'id.
        </para>
        
       <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <one-to-one name="address"/>
</class>

<class name="Address">
    <id name="id" column="personId">
        <generator class="foreign">
            <param name="property">person</param>
        </generator>
    </id>
    <one-to-one name="person" 
        constrained="true"/>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
    </sect1>

    <sect1 id="assoc-bidirectional-join" revision="1">
        <title>Associations bidirectionnelles avec table de jointure</title>
        
        <sect2 id="assoc-bidirectional-join-12m">
        <title>un à plusieurs / plusieurs à un</title>
        
        <para>
            Une <emphasis>association bidirectionnelle un-à-plusieurs (one-to-many) sur une table de jointure </emphasis>.
            Remarquez que <literal>inverse="true"</literal> peut s'appliquer sur les deux extrémités de l'
            association, sur la collection, ou sur la jointure.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" 
        table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            unique="true"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        inverse="true" 
        optional="true">
        <key column="addressId"/>
        <many-to-one name="person"
            column="personId"
            not-null="true"/>
    </join>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>

         <sect2 id="assoc-bidirectional-join-121">
        <title>Un à un</title>
        
        <para>
            Une <emphasis>association bidirectionnelle un-à-un (one-to-one) sur une table de jointure</emphasis> 
            est extrèmement rare mais envisageable.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true">
        <key column="personId" 
            unique="true"/>
        <many-to-one name="address"
            column="addressId" 
            not-null="true"
            unique="true"/>
    </join>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <join table="PersonAddress" 
        optional="true"
        inverse="true">
        <key column="addressId" 
            unique="true"/>
        <many-to-one name="person"
            column="personId" 
            not-null="true"
            unique="true"/>
    </join>
</class>]]></programlisting>
        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>

        </sect2>
        
        <sect2 id="assoc-bidirectional-join-m2m" revision="1">
        <title>plusieurs à plusieurs</title>
        
        <para>
            Finallement nous avons <emphasis>l'association bidirectionnelle plusieurs à plusieurs</emphasis>.
        </para>
        
        <programlisting><![CDATA[<class name="Person">
    <id name="id" column="personId">
        <generator class="native"/>
    </id>
    <set name="addresses" table="PersonAddress">
        <key column="personId"/>
        <many-to-many column="addressId"
            class="Address"/>
    </set>
</class>

<class name="Address">
    <id name="id" column="addressId">
        <generator class="native"/>
    </id>
    <set name="people" inverse="true"  table="PersonAddress">
        <key column="addressId"/>
        <many-to-many column="personId"
            class="Person"/>
    </set>
</class>]]></programlisting>

        <programlisting><![CDATA[
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        ]]></programlisting>
        
        </sect2>
        
    </sect1>
    
    <sect1 id="assoc-complex">
        <title>Des mappings plus complexes</title>
        
        <para>
            Des associations encore plus complexes sont <emphasis>extrêmement</emphasis> rares. 
            Hibernate permet de gérer des situations plus complexes en utilisant des
            parties SQL dans les fichiers de mapping. Par exemple, si une table
            avec l'historiques des informations d'un compte définit les colonnes
            <literal>accountNumber</literal>, <literal>effectiveEndDate</literal> 
            et <literal>effectiveStartDate</literal>, mappées de telle sorte:
        </para>
        
        <programlisting><![CDATA[<properties name="currentAccountKey">
    <property name="accountNumber" type="string" not-null="true"/>
    <property name="currentAccount" type="boolean">
        <formula>case when effectiveEndDate is null then 1 else 0 end</formula>
    </property>
</properties>
<property name="effectiveEndDate" type="date"/>
<property name="effectiveStateDate" type="date" not-null="true"/>]]></programlisting>

        <para>
            alors nous pouvons mapper une association à l'instance <emphasis>courante</emphasis>  
            (celle avec une <literal>effectiveEndDate</literal>) nulle en utilisant:
        </para>
        
        <programlisting><![CDATA[<many-to-one name="currentAccountInfo" 
        property-ref="currentAccountKey"
        class="AccountInfo">
    <column name="accountNumber"/>
    <formula>'1'</formula>
</many-to-one>]]></programlisting>

        <para>
            Dans un exemple plus complexe, imaginez qu'une association entre
            <literal>Employee</literal> et <literal>Organization</literal> est gérée
            dans une table <literal>Employment</literal> pleines de données historiques.
            Dans ce cas, une association vers l'employeur <emphasis>le plus récent</emphasis>
            (celui avec la <literal>startDate</literal> la plus récente) pourrait être mappée comme cela:
        </para>
        
        <programlisting><![CDATA[<join>
    <key column="employeeId"/>
    <subselect>
        select employeeId, orgId 
        from Employments 
        group by orgId 
        having startDate = max(startDate)
    </subselect>
    <many-to-one name="mostRecentEmployer" 
            class="Organization" 
            column="orgId"/>
</join>]]></programlisting>

        <para>
            Vous pouvez être créatif grace à ces possibilités, mais il est généralement plus pratique
            d'utiliser des requêtes HQL ou criteria dans ce genre de situation.
        </para>

    </sect1>


</chapter>

