<chapter id="toolsetguide" revision="2">
    <title>工具箱指南</title>

    <para>
		可以通过一系列Eclipse插件、命令行工具和Ant任务来进行与Hibernate关联的转换。

    </para>

    <para>
        除了Ant任务外，当前的<emphasis>Hibernate Tools</emphasis>也包含了Eclipse IDE的插件，用于与现存数据库的逆向工程。
    </para>

    <itemizedlist>
        <listitem><para>

            <emphasis>Mapping Editor:</emphasis> Hibernate XML映射文件的编辑器，支持自动完成和语法高亮。它也支持对类名和属性/字段名的语义自动完成，比通常的XML编辑器方便得多。
        </para></listitem>
        <listitem><para>
            <emphasis>Console:</emphasis> Console是Eclipse的一个新视图。除了对你的console配置的树状概览，你还可以获得对你持久化类及其关联的交互式视图。Console允许你对数据库执行HQL查询，并直接在Eclipse中浏览结果。
        </para></listitem>
        <listitem><para>
            <emphasis>Development Wizards:</emphasis> 在Hibernate Eclipse tools中还提供了几个向导；你可以用向导快速生成Hibernate 配置文件（cfg.xml），你甚至还可以同现存的数据库schema中反向工程出POJO源代码与Hibernate 映射文件。反向工程支持可定制的模版。
        </para></listitem>
        <listitem><para>
            <emphasis>Ant Tasks:</emphasis>
        </para></listitem>

    </itemizedlist>

    <para>
        要得到更多信息，请查阅 <emphasis>Hibernate Tools</emphasis> 包及其文档。
    </para>

    <para>
        同时，Hibernate主发行包还附带了一个集成的工具（它甚至可以在Hibernate“内部”快速运行）<emphasis>SchemaExport</emphasis> ，也就是        <literal>hbm2ddl</literal>。

    </para>

    <sect1 id="toolsetguide-s1" revision="2">
        <title>Schema自动生成（Automatic schema generation）</title>

        <para>
            可以从你的映射文件使用一个Hibernate工具生成DDL。 生成的schema包含有对实体和集合类表的完整性引用约束（主键和外键）。涉及到的标示符生成器所需的表和sequence也会同时生成。
        </para>
        
        <para>
            在使用这个工具的时候，你<emphasis>必须</emphasis> 通过<literal>hibernate.dialet</literal>属性指定一个SQL<literal>方言(Dialet)</literal>，因为DDL是与供应商高度相关的。
        </para>

        <para>
            首先，要定制你的映射文件，来改善生成的schema。
        </para>

        <sect2 id="toolsetguide-s1-2" revision="3">
            <title>对schema定制化(Customizing the schema)</title>

            <para>
                很多Hibernate映射元素定义了可选的<literal>length</literal>、<literal>precision</literal> 或者 <literal>scale</literal>属性。你可以通过这个属性设置字段的长度、精度、小数点位数。 
            </para>

            <programlisting><![CDATA[<property name="zip" length="5"/>]]></programlisting>
            <programlisting><![CDATA[<property name="balance" precision="12" scale="2"/>]]></programlisting>

            <para>
                有些tag还接受<literal>not-null</literal>属性（用来在表字段上生成<literal>NOT NULL</literal>约束）和<literal>unique</literal>属性（用来在表字段上生成<literal>UNIQUE</literal>约束）。
            </para>

            <programlisting><![CDATA[<many-to-one name="bar" column="barId" not-null="true"/>]]></programlisting>
            <programlisting><![CDATA[<element column="serialNumber" type="long" not-null="true" unique="true"/>]]></programlisting>

            <para>
                <literal>unique-key</literal>属性可以对成组的字段指定一个唯一键约束(unique key constraint)。目前，<literal>unique-key</literal>属性指定的值在生成DDL时<emphasis>并不会</emphasis>被当作这个约束的名字，它们只是在用来在映射文件内部用作区分的。
            </para>

            <programlisting><![CDATA[<many-to-one name="org" column="orgId" unique-key="OrgEmployeeId"/>
<property name="employeeId" unique-key="OrgEmployee"/>]]></programlisting>
            
            <para>
                <literal>index</literal>属性会用对应的字段（一个或多个）生成一个index,它指出了这个index的名字。如果多个字段对应的index名字相同，就会生成包含这些字段的index。
            </para>

            <programlisting><![CDATA[<property name="lastName" index="CustName"/>
<property name="firstName" index="CustName"/>]]></programlisting>

            <para>
                <literal>foreign-key</literal>属性可以用来覆盖任何生成的外键约束的名字。
            </para>

            <programlisting><![CDATA[<many-to-one name="bar" column="barId" foreign-key="FKFooBar"/>]]></programlisting>

            <para>
                很多映射元素还接受<literal>&lt;column&gt;</literal>子元素。这在定义跨越多字段的类型时特别有用。
            </para>

            <programlisting><![CDATA[<property name="name" type="my.customtypes.Name"/>
    <column name="last" not-null="true" index="bar_idx" length="30"/>
    <column name="first" not-null="true" index="bar_idx" length="20"/>
    <column name="initial"/>
</property>]]></programlisting>

            <para>
                <literal>default</literal>属性为字段指定一个默认值 (在保存被映射的类的新实例之前，你应该将同样的值赋于对应的属性)。
            </para>

            <programlisting><![CDATA[<property name="credits" type="integer" insert="false">
    <column name="credits" default="10"/>
</property>]]></programlisting>

            <programlisting><![CDATA[<version name="version" type="integer" insert="false">
    <column name="version" default="0"/>
</property>]]></programlisting>

            <para>
                <literal>sql-type</literal>属性允许用户覆盖默认的Hibernate类型到SQL数据类型的映射。
            </para>	
            
            <programlisting><![CDATA[<property name="balance" type="float">
    <column name="balance" sql-type="decimal(13,3)"/>
</property>]]></programlisting>
            
            <para>
                <literal>check</literal>属性允许用户指定一个约束检查。
            </para>
            
            <programlisting><![CDATA[<property name="foo" type="integer">
    <column name="foo" check="foo > 10"/>
</property>]]></programlisting>

		<programlisting><![CDATA[<class name="Foo" table="foos" check="bar < 100.0">
    ...
    <property name="bar" type="float"/>
</class>]]></programlisting>
            

            <table frame="topbot" id="schemattributes-summary" revision="1">
                <title>Summary</title>
                <tgroup cols="2">
                    <colspec colwidth="1*"/>
                    <colspec colwidth="2.5*"/>
                    <thead>
                        <row>
                            <entry>属性(Attribute)</entry>
                            <entry>值（Values）</entry>
                            <entry>解释（Interpretation）</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>length</literal></entry>
                            <entry>数字</entry>
                            <entry>字段长度</entry>
                            
                        </row>
                        <row>
                            <entry><literal>precision</literal></entry>
                            <entry>数字</entry>
                            <entry>精度(decimal precision)</entry>
                        </row>
                        <row>
                            <entry><literal>scale</literal></entry>
                            <entry>数字</entry>
                            <entry>小数点位数(decimal scale)</entry>
                        </row>
                        <row>
                            <entry><literal>not-null</literal></entry>
                            <entry><literal>true|false</literal></entry>
                            <entry>指明字段是否应该是非空的</entry>
                        </row>
                        <row>
                            <entry><literal>unique</literal></entry>
                            <entry><literal>true|false</literal></entry>
                            <entry>指明是否该字段具有惟一约束</entry>
                        </row>
                        <row>
                            <entry><literal>index</literal></entry>
                            <entry><literal>index_name</literal></entry>
                            <entry>指明一个（多字段）的索引(index)的名字</entry>
                        </row>
                        <row>
                            <entry><literal>unique-key</literal></entry>
                            <entry><literal>unique_key_name</literal></entry>
                            <entry>指明多字段惟一约束的名字（参见上面的说明）</entry>
                        </row>
                        <row>
                            <entry><literal>foreign-key</literal></entry>
                            <entry><literal>foreign_key_name</literal></entry>
                            <entry>
                                指明一个外键的名字，它是为关联生成的，或者<literal>&lt;one-to-one&gt;</literal>，<literal>&lt;many-to-one&gt;</literal>, <literal>&lt;key&gt;</literal>, 或者<literal>&lt;many-to-many&gt;</literal>映射元素。注意<literal>inverse="true"</literal>在<literal>SchemaExport</literal>时会被忽略。

                            </entry>
                        </row>
                        <row>
                            <entry><literal>sql-type</literal></entry>
                            <entry><literal>SQL 字段类型</literal></entry>
                            <entry>
                                覆盖默认的字段类型(只能用于<literal>&lt;column&gt;</literal>属性）
                            </entry>
                       </row>
                       <row>
                            <entry><literal>default</literal></entry>
                            <entry>SQL表达式</entry>
                            <entry>
                                为字段指定默认值
                            </entry>
                       </row>
                       <row>
                            <entry><literal>check</literal></entry>
                            <entry>SQL 表达式</entry>
                            <entry>
                            	对字段或表加入SQL约束检查
                            </entry>
                       </row>
                       
                   </tbody>
                </tgroup>
            </table>

            <para>
                <literal>&lt;comment&gt;</literal>元素可以让你在生成的schema中加入注释。
            </para>
            
            <programlisting><![CDATA[<class name="Customer" table="CurCust">
    <comment>Current customers only</comment>
    ...
</class>]]></programlisting>

            <programlisting><![CDATA[<property name="balance">
    <column name="bal">
        <comment>Balance in USD</comment>
    </column>
</property>]]></programlisting>
            
            <para>
                结果是在生成的DDL中包含<literal>comment on table</literal> 或者
                <literal>comment on column</literal>语句(假若支持的话)。
            </para>

        </sect2>

        <sect2 id="toolsetguide-s1-3"  revision="2">
            <title>运行该工具</title>

            <para>
                <literal>SchemaExport</literal>工具把DDL脚本写到标准输出，同时/或者执行DDL语句。
            </para>

            <para>
                <literal>java -cp </literal><emphasis>hibernate_classpaths</emphasis>
                <literal>org.hibernate.tool.hbm2ddl.SchemaExport</literal> <emphasis>options mapping_files</emphasis>
            </para>

            <table frame="topbot">
                <title><literal>SchemaExport</literal>命令行选项</title>
                <tgroup cols="2">
                    <colspec colwidth="1.5*"/>
                    <colspec colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>选项</entry>
                            <entry>说明</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>--quiet</literal></entry>
                            <entry>不要把脚本输出到stdout</entry>
                        </row>
                        <row>
                            <entry><literal>--drop</literal></entry>
                            <entry>只进行drop tables的步骤</entry>
                        </row>
                        <row>
                            <entry><literal>--create</literal></entry>
                            <entry>只创建表</entry>
                        </row>
                        <row>
                            <entry><literal>--text</literal></entry>
                            <entry>不执行在数据库中运行的步骤</entry>
                        </row>
                        <row>
                            <entry><literal>--output=my_schema.ddl</literal></entry>
                            <entry>把输出的ddl脚本输出到一个文件</entry>
                        </row>
                        <row>
                            <entry><literal>--naming=eg.MyNamingStrategy</literal></entry>
                            <entry>选择一个命名策略(<literal>NamingStrategy</literal>)</entry>
                        </row>
                        <row>
                            <entry><literal>--config=hibernate.cfg.xml</literal></entry>
                            <entry>从XML文件读入Hibernate配置</entry>
                        </row>
                        <row>
                            <entry><literal>--properties=hibernate.properties</literal></entry>
                            <entry>从文件读入数据库属性</entry>
                        </row>
                        <row>
                            <entry><literal>--format</literal></entry>
                            <entry>把脚本中的SQL语句对齐和美化</entry>
                        </row>
                        <row>
                            <entry><literal>--delimiter=;</literal></entry>
                            <entry>为脚本设置行结束符</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>
                你甚至可以在你的应用程序中嵌入<literal>SchemaExport</literal>工具:
            </para>

            <programlisting><![CDATA[Configuration cfg = ....;
new SchemaExport(cfg).create(false, true);]]></programlisting>

        </sect2>

        <sect2 id="toolsetguide-s1-4">
            <title>属性(Properties)</title>

            <para>
                可以通过如下方式指定数据库属性:
            </para>

            <itemizedlist spacing="compact">
                <listitem>
                    <para>通过<literal>-D</literal><emphasis>&lt;property&gt;</emphasis>系统参数</para>
                </listitem>
                <listitem>
                    <para>在<literal>hibernate.properties</literal>文件中</para>
                </listitem>
                <listitem>
                    <para>位于一个其它名字的properties文件中,然后用 <literal>--properties</literal>参数指定</para>
                </listitem>
            </itemizedlist>

            <para>
                所需的参数包括:
            </para>

            <table frame="topbot">
                <title>SchemaExport 连接属性</title>
                <tgroup cols="2">
                    <colspec colwidth="1.5*"/>
                    <colspec colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>属性名</entry>
                            <entry>说明</entry>
                        </row>
                    </thead>
                    <tbody>
                    <row>
                        <entry><literal>hibernate.connection.driver_class</literal></entry>
                        <entry>jdbc driver class</entry>
                    </row>
                    <row>
                        <entry><literal>hibernate.connection.url</literal></entry>
                        <entry>jdbc url</entry>
                    </row>
                    <row>
                        <entry><literal>hibernate.connection.username</literal></entry>
                        <entry>database user</entry>
                    </row>
                    <row>
                        <entry><literal>hibernate.connection.password</literal></entry>
                        <entry>user password</entry>
                    </row>
                    <row>
                        <entry><literal>hibernate.dialect</literal></entry>
                        <entry>方言(dialect)</entry>
                    </row>
                    </tbody>
                </tgroup>
            </table>

        </sect2>

        <sect2 id="toolsetguide-s1-5">
            <title>使用Ant(Using Ant)</title>

            <para>
                你可以在你的Ant build脚本中调用<literal>SchemaExport</literal>:
            </para>

            <programlisting><![CDATA[<target name="schemaexport">
    <taskdef name="schemaexport"
        classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
        classpathref="class.path"/>
    
    <schemaexport
        properties="hibernate.properties"
        quiet="no"
        text="no"
        drop="no"
        delimiter=";"
        output="schema-export.sql">
        <fileset dir="src">
            <include name="**/*.hbm.xml"/>
        </fileset>
    </schemaexport>
</target>]]></programlisting>

        </sect2>

        <sect2 id="toolsetguide-s1-6"  revision="2">
            <title>对schema的增量更新(Incremental schema updates)</title>

            <para>
                <literal>SchemaUpdate</literal>工具对已存在的schema采用"增量"方式进行更新。注意<literal>SchemaUpdate</literal>严重依赖于JDBC metadata API,所以它并非对所有JDBC驱动都有效。
            </para>

            <para>
                <literal>java -cp </literal><emphasis>hibernate_classpaths</emphasis>
                <literal>org.hibernate.tool.hbm2ddl.SchemaUpdate</literal> <emphasis>options mapping_files</emphasis>
            </para>

            <table frame="topbot">
                <title><literal>SchemaUpdate</literal>命令行选项</title>
                <tgroup cols="2">
                    <colspec colwidth="1.5*"/>
                    <colspec colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>选项</entry>
                            <entry>说明</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>--quiet</literal></entry>
                            <entry>不要把脚本输出到stdout</entry>
                        </row>
                        <row>
                            <entry><literal>--text</literal></entry>
                            <entry>不把脚本输出到数据库</entry>
                        </row>
                        <row>
                            <entry><literal>--naming=eg.MyNamingStrategy</literal></entry>
                            <entry>选择一个命名策略 (<literal>NamingStrategy</literal>)</entry>
                        </row>
                        <row>
                            <entry><literal>--properties=hibernate.properties</literal></entry>
                            <entry>从指定文件读入数据库属性</entry>
                        </row>
                        <row>
                            <entry><literal>--config=hibernate.cfg.xml</literal></entry>
                            <entry>指定一个 <literal>.cfg.xml</literal>文件</entry>
                        </row>
                     </tbody>
                </tgroup>
            </table>

            <para>
                你可以在你的应用程序中嵌入<literal>SchemaUpdate</literal>工具:
            </para>

            <programlisting><![CDATA[Configuration cfg = ....;
new SchemaUpdate(cfg).execute(false);]]></programlisting>

        </sect2>

        <sect2 id="toolsetguide-s1-7">
            <title>用Ant来增量更新schema(Using Ant for incremental schema updates)</title>

            <para>
                你可以在Ant脚本中调用<literal>SchemaUpdate</literal>：
            </para>

            <programlisting><![CDATA[<target name="schemaupdate">
    <taskdef name="schemaupdate"
        classname="org.hibernate.tool.hbm2ddl.SchemaUpdateTask"
        classpathref="class.path"/>
    
    <schemaupdate
        properties="hibernate.properties"
        quiet="no">
        <fileset dir="src">
            <include name="**/*.hbm.xml"/>
        </fileset>
    </schemaupdate>
</target>]]></programlisting>

        </sect2>

        <sect2 id="toolsetguide-s1-8" revision="1">
            <title>Schema 校验</title>

            <para>
                <literal>SchemaValidator</literal>工具会比较数据库现状是否与映射文档“匹配”。注意，<literal>SchemaValidator</literal> 严重依赖于JDBC的metadata API，因此不是对所有的JDBC驱动都适用。这一工具在测试的时候特别有用。
            </para>

            <para>
                <literal>java -cp </literal><emphasis>hibernate_classpaths</emphasis>
                <literal>org.hibernate.tool.hbm2ddl.SchemaValidator</literal> <emphasis>options mapping_files</emphasis>
            </para>

            <table frame="topbot">
                <title><literal>SchemaValidator</literal>命令行参数</title>
                <tgroup cols="2">
                    <colspec colwidth="1.5*"/>
                    <colspec colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>选项</entry>
                            <entry>描述</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>--naming=eg.MyNamingStrategy</literal></entry>
                            <entry>选择一个命名策略 (<literal>NamingStrategy</literal>)</entry>
                        </row>
                        <row>
                            <entry><literal>--properties=hibernate.properties</literal></entry>
                            <entry>从文件中读取数据库属性</entry>
                        </row>
                        <row>
                            <entry><literal>--config=hibernate.cfg.xml</literal></entry>
                            <entry>指定一个<literal>.cfg.xml</literal>文件</entry>
                        </row>
                     </tbody>
                </tgroup>
            </table>

            <para>
               你可以在你的应用程序中嵌入<literal>SchemaValidator</literal>：
            </para>

            <programlisting><![CDATA[Configuration cfg = ....;
new SchemaValidator(cfg).validate();]]></programlisting>

        </sect2>

        <sect2 id="toolsetguide-s1-9">
            <title>使用Ant进行schema校验</title>

            <para>
                你可以在Ant脚本中调用<literal>SchemaValidator</literal>:
            </para>

            <programlisting><![CDATA[<target name="schemavalidate">
    <taskdef name="schemavalidator"
        classname="org.hibernate.tool.hbm2ddl.SchemaValidatorTask"
        classpathref="class.path"/>
    
    <schemavalidator
        properties="hibernate.properties">
        <fileset dir="src">
            <include name="**/*.hbm.xml"/>
        </fileset>
    </schemavalidator>
</target>]]></programlisting>

        </sect2>
    </sect1>

</chapter>

