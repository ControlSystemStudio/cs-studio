<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="filters">
    <title>过滤数据</title>
    <para>

                Hibernate3 提供了一种创新的方式来处理具有“显性(visibility)”规则的数据，那就是使用<emphasis>Hibernate filter</emphasis>。
                <emphasis>Hibernate filter</emphasis>是全局有效的、具有名字、可以带参数的过滤器，
                对于某个特定的Hibernate session您可以选择是否启用（或禁用）某个过滤器。
    </para>

    <sect1 id="objectstate-filters" revision="1">
        <title>Hibernate 过滤器(filters)</title>

        <para>
                        Hibernate3新增了对某个类或者集合使用预先定义的过滤器条件(filter criteria)的功能。过滤器条件相当于定义一个
                        非常类似于类和各种集合上的“where”属性的约束子句，但是过滤器条件可以带参数。
                        应用程序可以在运行时决定是否启用给定的过滤器，以及使用什么样的参数值。
                        过滤器的用法很像数据库视图，只不过是在应用程序中确定使用什么样的参数的。
                        
        </para>

        <para>

            要使用过滤器，必须首先在相应的映射节点中定义。而定义一个过滤器，要用到位于<literal>&lt;hibernate-mapping/&gt;</literal>
			节点之内的<literal>&lt;filter-def/&gt;</literal>节点：
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter">
    <filter-param name="myFilterParam" type="string"/>
</filter-def>]]></programlisting>

        <para>
			定义好之后，就可以在某个类中使用这个过滤器：
        </para>

        <programlisting><![CDATA[<class name="myClass" ...>
    ...
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</class>]]></programlisting>

        <para>
			也可以在某个集合使用它：
        </para>

        <programlisting><![CDATA[<set ...>
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</set>]]></programlisting>

        <para>
                        可以在多个类或集合中使用某个过滤器；某个类或者集合中也可以使用多个过滤器。
        </para>

        <para>

			<literal>Session</literal>对象中会用到的方法有：<literal>enableFilter(String filterName)</literal>,
            <literal>getEnabledFilter(String filterName)</literal>, 和 <literal>disableFilter(String filterName)</literal>.
			Session中默认是<emphasis>不</emphasis>启用过滤器的，必须通过<literal>Session.enableFilter()</literal>方法显式的启用。
			该方法返回被启用的<literal>Filter</literal>的实例。以上文定义的过滤器为例：
        </para>

        <programlisting><![CDATA[session.enableFilter("myFilter").setParameter("myFilterParam", "some-value");]]></programlisting>

        <para>
			注意，org.hibernate.Filter的方法允许链式方法调用。（类似上面例子中启用Filter之后设定Filter参数这个“方法链”）
                        Hibernate的其他部分也大多有这个特性。
        </para>

        <para>
			下面是一个比较完整的例子，使用了记录生效日期模式过滤有时效的数据：
        </para>

        <programlisting><![CDATA[<filter-def name="effectiveDate">
    <filter-param name="asOfDate" type="date"/>
</filter-def>

<class name="Employee" ...>
...
    <many-to-one name="department" column="dept_id" class="Department"/>
    <property name="effectiveStartDate" type="date" column="eff_start_dt"/>
    <property name="effectiveEndDate" type="date" column="eff_end_dt"/>
...
    <!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake

		注意，为了简单起见，此处假设雇用关系生效期尚未结束的记录的eff_end_dt字段的值等于数据库最大的日期
    -->
    <filter name="effectiveDate"
            condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
</class>

<class name="Department" ...>
...
    <set name="employees" lazy="true">
        <key column="dept_id"/>
        <one-to-many class="Employee"/>
        <filter name="effectiveDate"
                condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
    </set>
</class>]]></programlisting>

        <para>
			定义好后，如果想要保证取回的都是目前处于生效期的记录，只需在获取雇员数据的操作之前先开启过滤器即可：
        </para>

<programlisting><![CDATA[Session session = ...;
session.enableFilter("effectiveDate").setParameter("asOfDate", new Date());
List results = session.createQuery("from Employee as e where e.salary > :targetSalary")
         .setLong("targetSalary", new Long(1000000))
         .list();
]]></programlisting>

        <para>

			在上面的HQL中，虽然我们仅仅显式的使用了一个薪水条件，但因为启用了过滤器，查询将仅返回那些目前雇用
			关系处于生效期的，并且薪水高于一百万美刀的雇员的数据。

        </para>

        <para>

			注意：如果你打算在使用外连接（或者通过HQL或load fetching）的同时使用过滤器，要注意条件表达式的方向（左还是右）。
			最安全的方式是使用左外连接（left outer joining）。并且通常来说，先写参数，
			然后是操作符，最后写数据库字段名。
        </para>
        
        <para>
            在Filter定义之后,它可能被附加到多个实体和/或集合类,每个都有自己的条件。假若这些条件都是一样的，每次都要定义就显得很繁琐。因此，<literal>&lt;filter-def/&gt;</literal>被用来定义一个默认条件，它可能作为属性或者CDATA出现：
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter" condition="abc > xyz">...</filter-def>
<filter-def name="myOtherFilter">abc=xyz</filter-def>]]></programlisting>

        <para>
        	当这个filter被附加到任何目的地，而又没有指明条件时，这个条件就会被使用。注意，换句话说，你可以通过给filter附加特别的条件来重载默认条件。
        </para>


    </sect1>

</chapter>
