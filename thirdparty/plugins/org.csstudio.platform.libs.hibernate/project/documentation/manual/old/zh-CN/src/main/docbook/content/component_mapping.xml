<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="components">
  <title>组件（Component）映射</title>

  <para>
      <emphasis>组件</emphasis>(Component)这个概念在Hibernate中几处不同的地方为了不同的目的被重复使用.
  </para>

  <sect1 id="components-dependentobjects" revision="2">
    <title>依赖对象（Dependent objects）</title>

    <para>
        组件(Component)是一个被包含的对象，在持久化的过程中，它被当作值类型，而并非一个实体的引用。在这篇文档中，组件这一术语指的是面向对象的合成概念（而并不是系统构架层次上的组件的概念）。举个例子, 你对人(Person)这个概念可以像下面这样来建模：
    </para>

    <programlisting><![CDATA[public class Person {
    private java.util.Date birthday;
    private Name name;
    private String key;
    public String getKey() {
        return key;
    }
    private void setKey(String key) {
        this.key=key;
    }
    public java.util.Date getBirthday() {
        return birthday;
    }
    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }
    public Name getName() {
        return name;
    }
    public void setName(Name name) {
        this.name = name;
    }
    ......
    ......
}]]></programlisting>

    <programlisting><![CDATA[public class Name {
    char initial;
    String first;
    String last;
    public String getFirst() {
        return first;
    }
    void setFirst(String first) {
        this.first = first;
    }
    public String getLast() {
        return last;
    }
    void setLast(String last) {
        this.last = last;
    }
    public char getInitial() {
        return initial;
    }
    void setInitial(char initial) {
        this.initial = initial;
    }
}]]></programlisting>

        <para>
            在持久化的过程中,<literal>姓名(Name)</literal>可以作为<literal>人(Person)</literal>的一个组件。需要注意的是:你应该为<literal>姓名</literal>的持久化属性定义getter和setter方法,但是你不需要实现任何的接口或申明标识符字段。
        </para>

        <para>
            以下是这个例子的Hibernate映射文件:
        </para>

        <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date"/>
    <component name="Name" class="eg.Name"> <!-- class attribute optional -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component>
</class>]]></programlisting>

    <para>
        人员(Person)表中将包括<literal>pid</literal>,
        <literal>birthday</literal>,
        <literal>initial</literal>,
        <literal>first</literal>和
        <literal>last</literal>等字段。</para>

    <para>
        就像所有的值类型一样, 组件不支持共享引用。
        换句话说，两个人可能重名，但是两个Person对象应该包含两个独立的Name对象，只不过这两个Name对象具有“同样”的值。
        组件的值可以为空，其定义如下。
        每当Hibernate重新加载一个包含组件的对象,如果该组件的所有字段为空，Hibernate将假定整个组件为空。
        在大多数情况下,这样假定应该是没有问题的。
    </para>

    <para>
        组件的属性可以是任意一种Hibernate类型（包括集合, 多对多关联，
        以及其它组件等等）。嵌套组件不应该被当作一种特殊的应用(Nested components should not be considered an
        exotic usage)。 Hibernate倾向于支持细致的(fine-grained)对象模型。
    </para>
    
    <para>
        <literal>&lt;component&gt;</literal> 元素还允许有 <literal>&lt;parent&gt;</literal>子元素，用来表明component类中的一个属性是指向包含它的实体的引用。
    </para>

    <programlisting><![CDATA[<class name="eg.Person" table="person">
    <id name="Key" column="pid" type="string">
        <generator class="uuid"/>
    </id>
    <property name="birthday" type="date">
    <component name="Name" class="eg.Name" unique="true">
        <parent name="namedPerson"/> <!-- reference back to the Person -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>
    </component&gt;
</class>]]></programlisting>

  </sect1>

  <sect1 id="components-incollections" revision="1">
    <title>在集合中出现的依赖对象 (Collections of dependent objects)</title>

    <para>
        Hibernate支持组件的集合(例如: 一个元素是姓名(Name)这种类型的数组)。
        你可以使用<literal>&lt;composite-element&gt;</literal>标签替代<literal>&lt;element&gt;</literal>标签来定义你的组件集合。
    </para>

    <programlisting><![CDATA[<set name="someNames" table="some_names" lazy="true">
    <key column="id"/&gt;
    <composite-element class="eg.Name"> <!-- class attribute required -->
        <property name="initial"/>
        <property name="first"/>
        <property name="last"/>;
    </composite-element>
</set>]]></programlisting>

    <para>
        注意，如果你定义的Set包含组合元素(composite-element)，正确地实现<literal>equals()</literal>和<literal>hashCode()</literal>是非常重要的。
    </para>

    <para>
        组合元素可以包含组件，但是不能包含集合。如果你的组合元素自身包含组件, 你必须使用<literal>&lt;nested-composite-element&gt;</literal>标签。这是一个相当特殊的案例 - 在一个组件的集合里，那些组件本身又可以包含其他的组件。这个时候你就应该考虑一下使用one-to-many关联是否会更恰当。
		尝试对这个组合元素重新建模为一个实体－但是需要注意的是，虽然Java模型和重新建模前是一样的，关系模型和持久性语义会有细微的变化。
    </para>

    <para>
        请注意如果你使用<literal>&lt;set&gt;</literal>标签,一个组合元素的映射不支持可能为空的属性. 当删除对象时， Hibernate必须使用每一个字段的值来确定一条记录(在组合元素表中，没有单独的关键字段)，
		如果有为null的字段，这样做就不可能了。你必须作出一个选择，要么在组合元素中使用不能为空的属性，要么选择使用<literal>&lt;list&gt;</literal>,<literal>&lt;map&gt;</literal>,<literal>&lt;bag&gt;</literal> 或者 <literal>&lt;idbag&gt;</literal>而不是 <literal>&lt;set&gt;</literal>。
    </para>

    <para>
        组合元素有个特别的用法是它可以包含一个<literal>&lt;many-to-one&gt;</literal>元素。类似这样的映射允许你将一个many-to-many关联表映射为组合元素的集合。(A mapping like this allows you to map extra columns of a many-to-many association table to the composite element class.) 接下来的的例子是从<literal>Order</literal>到<literal>Item</literal>的一个多对多的关联关系, 关联属性是 <literal>purchaseDate</literal>, <literal>price</literal> 和 <literal>quantity</literal> 。
    </para>

    <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.Purchase">
            <property name="purchaseDate"/>
            <property name="price"/>
            <property name="quantity"/>
            <many-to-one name="item" class="eg.Item"/> <!-- class attribute is optional -->
        </composite-element>
    </set>
</class>]]></programlisting>
    <para>
        当然，当你定义Item时，你无法引用这些purchase，因此你无法实现双向关联查询。记住组件是值类型，并且不允许共享引用。某一个特定的<literal>Purchase</literal> 可以放在<literal>Order</literal>的集合中，但它不能同时被<literal>Item</literal>所引用。
    </para>

    <para>其实组合元素的这个用法可以扩展到三重或多重关联:</para>

    <programlisting><![CDATA[<class name="eg.Order" .... >
    ....
    <set name="purchasedItems" table="purchase_items" lazy="true">
        <key column="order_id">
        <composite-element class="eg.OrderLine">
            <many-to-one name="purchaseDetails" class="eg.Purchase"/>
            <many-to-one name="item" class="eg.Item"/>
        </composite-element>
    </set>
</class>]]></programlisting>

    <para>
        在查询中，表达组合元素的语法和关联到其他实体的语法是一样的。
     </para>
     
  </sect1>

  <sect1 id="components-asmapindex">
    <title>组件作为Map的索引（Components as Map indices ）</title>

    <para>
        <literal>&lt;composite-map-key&gt;</literal>元素允许你映射一个组件类作为一个<literal>Map</literal>的key，前提是你必须正确的在这个类中重写了<literal>hashCode()</literal> 和 <literal>equals()</literal>方法。
    </para>
  </sect1>

  <sect1 id="components-compositeid" revision="1">
    <title>组件作为联合标识符(Components as composite identifiers)</title>

    <para>
       你可以使用一个组件作为一个实体类的标识符。 你的组件类必须满足以下要求：
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
            它必须实现<literal>java.io.Serializable</literal>接口
        </para>
      </listitem>
      <listitem>
        <para>
            它必须重新实现<literal>equals()</literal>和<literal>hashCode()</literal>方法, 始终和组合关键字在数据库中的概念保持一致
        </para>
      </listitem>
    </itemizedlist>

    <para>
        <emphasis>注意：在Hibernate3中，第二个要求并非是Hibernate强制必须的。但最好这样做。</emphasis>
    </para>

    <para>
        你不能使用一个<literal>IdentifierGenerator</literal>产生组合关键字。一个应用程序必须分配它自己的标识符。
    </para>

    <para>
        使用<literal>&lt;composite-id&gt;</literal> 标签(并且内嵌<literal>&lt;key-property&gt;</literal>元素)代替通常的<literal>&lt;id&gt;</literal>标签。比如,<literal>OrderLine</literal>类具有一个主键，这个主键依赖于<literal>Order</literal>的(联合)主键。
    </para>

        <programlisting><![CDATA[<class name="OrderLine">
    
    <composite-id name="id" class="OrderLineId">
        <key-property name="lineId"/>
        <key-property name="orderId"/>
        <key-property name="customerId"/>
    </composite-id>
    
    <property name="name"/>
    
    <many-to-one name="order" class="Order"
            insert="false" update="false">
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-one>
    ....
    
</class>]]></programlisting>

    <para>
        现在，任何指向<literal>OrderLine</literal>的外键都是复合的。在你的映射文件中，必须为其他类也这样声明。例如，一个指向<literal>OrderLine</literal>的关联可能被这样映射：
    </para>

        <programlisting><![CDATA[<many-to-one name="orderLine" class="OrderLine">
<!-- the "class" attribute is optional, as usual -->
    <column name="lineId"/>
    <column name="orderId"/>
    <column name="customerId"/>
</many-to-one>]]></programlisting>

    <para>
        （注意在各个地方<literal>&lt;column&gt;</literal>标签都是<literal>column</literal>属性的替代写法。）
    </para>

    <para>
        指向<literal>OrderLine</literal>的<literal>多对多</literal>关联也使用联合外键:
    </para>

    <programlisting><![CDATA[<set name="undeliveredOrderLines">
    <key column name="warehouseId"/>
    <many-to-many class="OrderLine">
        <column name="lineId"/>
        <column name="orderId"/>
        <column name="customerId"/>
    </many-to-many>
</set>]]></programlisting>

    <para>
        在<literal>Order</literal>中,<literal>OrderLine</literal>的集合则是这样:
    </para>

    <programlisting><![CDATA[<set name="orderLines" inverse="true">
    <key>
        <column name="orderId"/>
        <column name="customerId"/>
    </key>
    <one-to-many class="OrderLine"/>
</set>]]></programlisting>

    <para>
        (与通常一样,<literal>&lt;one-to-many&gt;</literal>元素不声明任何列.)
    </para>

    <para>
        假若<literal>OrderLine</literal>本身拥有一个集合,它也具有组合外键。
    </para>

        <programlisting><![CDATA[<class name="OrderLine">
    ....
    ....
    <list name="deliveryAttempts">
        <key>   <!-- a collection inherits the composite key type -->
            <column name="lineId"/>
            <column name="orderId"/>
            <column name="customerId"/>
        </key>
        <list-index column="attemptId" base="1"/>
        <composite-element class="DeliveryAttempt">
            ...
        </composite-element>
    </set>
</class>]]></programlisting>

  </sect1>

  <sect1 id="components-dynamic" revision="1">
    <title>动态组件 （Dynamic components）</title>

    <para>
        你甚至可以映射<literal>Map</literal>类型的属性：
    </para>

    <programlisting><![CDATA[<dynamic-component name="userAttributes">
    <property name="foo" column="FOO" type="string"/>
    <property name="bar" column="BAR" type="integer"/>
    <many-to-one name="baz" class="Baz" column="BAZ_ID"/>
</dynamic-component>]]></programlisting>

    <para>
        从<literal>&lt;dynamic-component&gt;</literal>映射的语义上来讲，它和<literal>&lt;component&gt;</literal>是相同的。
        这种映射类型的优点在于通过修改映射文件，就可以具有在部署时检测真实属性的能力。利用一个DOM解析器，也可以在程序运行时操作映射文件。
        更好的是，你可以通过<literal>Configuration</literal>对象来访问（或者修改）Hibernate的运行时元模型。
     </para>
  </sect1>
</chapter>
