<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="querysql" revision="2">
    <title>Native SQL查询</title>
    <para>
		你也可以使用你的数据库的Native SQL语言来查询数据。这对你在要使用数据库的某些特性的时候(比如说在查询提示或者Oracle中的
		<literal>CONNECT</literal>关键字)，这是非常有用的。这就能够扫清你把原来直接使用SQL/JDBC 的程序迁移到基于
		Hibernate应用的道路上的障碍。
    </para>

    <para>
		Hibernate3允许你使用手写的sql来完成所有的create,update,delete,和load操作（包括存储过程）
    </para>

    <sect1 id="querysql-creating" revision="4">
    <title>使用<literal>SQLQuery</literal></title>

    <para>对原生SQL查询执行的控制是通过<literal>SQLQuery</literal>接口进行的，通过执行<literal>Session.createSQLQuery()</literal>获取这个接口。下面来描述如何使用这个API进行查询。</para>

    <sect2>
      <title>标量查询（Scalar queries）</title>

      <para>
      最基本的SQL查询就是获得一个标量（数值）的列表。      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").list();
sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").list();
]]></programlisting>

      <para>
      它们都将返回一个Object数组(Object[])组成的List，数组每个元素都是CATS表的一个字段值。Hibernate会使用ResultSetMetadata来判定返回的标量值的实际顺序和类型。
      </para>

      <para>
      如果要避免过多的使用<literal>ResultSetMetadata</literal>,或者只是为了更加明确的指名返回值，可以使用<literal>addScalar()</literal>。
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
 .addScalar("ID", Hibernate.LONG)
 .addScalar("NAME", Hibernate.STRING)
 .addScalar("BIRTHDATE", Hibernate.DATE)
]]></programlisting>


    <para>这个查询指定了:</para>

    <itemizedlist>
      <listitem>
        <para>SQL查询字符串</para>
      </listitem>

      <listitem>
        <para>要返回的字段和类型</para>
      </listitem>
    </itemizedlist>

      <para>
      它仍然会返回Object数组,但是此时不再使用<literal>ResultSetMetdata</literal>,而是明确的将ID,NAME和BIRTHDATE按照Long,String和Short类型从resultset中取出。同时，也指明了就算query是使用<literal>*</literal>来查询的，可能获得超过列出的这三个字段，也仅仅会返回这三个字段。
      </para>

      <para>
      对全部或者部分的标量值不设置类型信息也是可以的。
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
 .addScalar("ID", Hibernate.LONG)
 .addScalar("NAME")
 .addScalar("BIRTHDATE")
]]></programlisting>

      <para>
      基本上这和前面一个查询相同,只是此时使用<literal>ResultSetMetaData</literal>来决定NAME和BIRTHDATE的类型，而ID的类型是明确指出的。
      </para>

      <para>
      关于从ResultSetMetaData返回的java.sql.Types是如何映射到Hibernate类型，是由方言(Dialect)控制的。假若某个指定的类型没有被映射，或者不是你所预期的类型，你可以通过Dialet的<literal>registerHibernateType</literal>调用自行定义。
      </para>

    </sect2>

    <sect2>
      <title>实体查询(Entity queries)</title>

      <para>
      上面的查询都是返回标量值的，也就是从resultset中返回的“裸”数据。下面展示如何通过<literal>addEntity()</literal>让原生查询返回实体对象。
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").addEntity(Cat.class);
sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").addEntity(Cat.class);
]]></programlisting>

      <para>这个查询指定：</para>

      <itemizedlist>
        <listitem>
          <para>SQL查询字符串</para>
        </listitem>

        <listitem>
          <para>要返回的实体</para>
        </listitem>
      </itemizedlist>

      <para>
      假设Cat被映射为拥有ID,NAME和BIRTHDATE三个字段的类，以上的两个查询都返回一个List，每个元素都是一个Cat实体。
      </para>

      <para>      
      假若实体在映射时有一个<literal>many-to-one</literal>的关联指向另外一个实体，在查询时必须也返回那个实体，否则会导致发生一个"column not found"的数据库错误。这些附加的字段可以使用*标注来自动返回，但我们希望还是明确指明，看下面这个具有指向<literal>Dog</literal>的<literal>many-to-one</literal>的例子：
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS").addEntity(Cat.class);
]]></programlisting>

      <para>
      这样cat.getDog()就能正常运作。
      </para>
    </sect2>

    <sect2>
      <title>处理关联和集合类(Handling associations and collections)</title>

      <para>      
      通过提前抓取将<literal>Dog</literal>连接获得，而避免初始化proxy带来的额外开销也是可能的。这是通过<literal>addJoin()</literal>方法进行的，这个方法可以让你将关联或集合连接进来。
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID")
 .addEntity("cat", Cat.class)
 .addJoin("cat.dog");
]]></programlisting>

      <para>
            上面这个例子中，返回的<literal>Cat</literal>对象，其<literal>dog</literal>属性被完全初始化了，不再需要数据库的额外操作。注意，我们加了一个别名("cat")，以便指明join的目标属性路径。通过同样的提前连接也可以作用于集合类，例如，假若<literal>Cat</literal>有一个指向<literal>Dog</literal>的一对多关联。
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID")
 .addEntity("cat", Cat.class)
 .addJoin("cat.dogs");
]]></programlisting>

      <p>
      到此为止，我们碰到了天花板：若不对SQL查询进行增强，这些已经是在Hibernate中使用原生SQL查询所能做到的最大可能了。下面的问题即将出现：返回多个同样类型的实体怎么办？或者默认的别名/字段不够又怎么办？
      
      </p>
    </sect2>

    <sect2>
      <title>返回多个实体(Returning multiple entities)</title>

      <para>
      到目前为止,结果集字段名被假定为和映射文件中指定的的字段名是一致的。假若SQL查询连接了多个表，同一个字段名可能在多个表中出现多次，这就会造成问题。
      </para>

      <para>
      下面的查询中需要使用字段别名注射（这个例子本身会失败）：
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT c.*, m.*  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
 .addEntity("cat", Cat.class)
 .addEntity("mother", Cat.class)
]]></programlisting>

      <para>
      这个查询的本意是希望每行返回两个Cat实例，一个是cat,另一个是它的妈妈。但是因为它们的字段名被映射为相同的，而且在某些数据库中，返回的字段别名是“c.ID”,"c.NAME"这样的形式，而它们和在映射文件中的名字（"ID"和"NAME"）不匹配，这就会造成失败。
      
      </para>

      <para>
      下面的形式可以解决字段名重复：
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT {cat.*}, {mother.*}  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
 .addEntity("cat", Cat.class)
 .addEntity("mother", Cat.class)
]]></programlisting>

      <para>这个查询指明：</para>

      <itemizedlist>
        <listitem>
          <para>
          SQL查询语句，其中包含占位附来让Hibernate注射字段别名</para>
        </listitem>

        <listitem>
          <para>
          查询返回的实体
          </para>
        </listitem>
      </itemizedlist>

      <para>
      上面使用的{cat.*}和{mother.*}标记是作为“所有属性”的简写形式出现的。当然你也可以明确地罗列出字段名，但在这个例子里面我们让Hibernate来为每个属性注射SQL字段别名。字段别名的占位符是属性名加上表别名的前缀。在下面的例子中，我们从另外一个表（cat_log）中通过映射元数据中的指定获取Cat和它的妈妈。注意，要是我们愿意，我们甚至可以在where子句中使用属性别名。
      
      </para>

      <programlisting><![CDATA[String sql = "SELECT ID as {c.id}, NAME as {c.name}, " + 
         "BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} " +
         "FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID";

List loggedCats = sess.createSQLQuery(sql)
        .addEntity("cat", Cat.class)
        .addEntity("mother", Cat.class).list()
]]></programlisting>

      <sect3 id="querysql-aliasreferences" revision="2">
        <title>别名和属性引用(Alias and property references)</title>

        <para>
        大多数情况下，都需要上面的属性注射，但在使用更加复杂的映射，比如复合属性、通过标识符构造继承树，以及集合类等等情况下，也有一些特别的别名，来允许Hibernate注射合适的别名。
        </para>

    <para>
    下表列出了使用别名注射参数的不同可能性。注意：下面结果中的别名只是示例，实用时每个别名需要唯一并且不同的名字。
    </para>

    <table frame="topbot" id="aliasinjection-summary">
      <title>别名注射(alias injection names)</title>

      <tgroup cols="3">
        <colspec colwidth="1*" />

        <colspec colwidth="1*" />

        <colspec colwidth="2.5*" />

        <thead>
          <row>
            <entry>描述</entry>
            
            <entry>语法</entry>
            
            <entry>示例</entry>
            </row>
        </thead>
        <tbody>
          <row>
            <entry>简单属性</entry>
            <entry><literal>{[aliasname].[propertyname]</literal></entry>
            <entry><literal>A_NAME as {item.name}</literal></entry>
          </row>
          <row>
            <entry>复合属性</entry>
            <entry><literal>{[aliasname].[componentname].[propertyname]}</literal></entry>
            <entry><literal>CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}</literal></entry>
          </row>
          <row>
            <entry>实体辨别器(Discriminator of an entity)</entry>
            <entry><literal>{[aliasname].class}</literal></entry>
            <entry><literal>DISC as {item.class}</literal></entry>
          </row>
          <row>
            <entry>实体的所有属性</entry>
            <entry><literal>{[aliasname].*}</literal></entry>
            <entry><literal>{item.*}</literal></entry>
          </row>
          <row>
            <entry>集合键(collection key)</entry>
            <entry><literal>{[aliasname].key}</literal></entry>
            <entry><literal>ORGID as {coll.key}</literal></entry>
          </row>
          <row>
            <entry>集合id</entry>
            <entry><literal>{[aliasname].id}</literal></entry>
            <entry><literal>EMPID as {coll.id}</literal></entry>
          </row>
          <row>
            <entry>集合元素</entry>
            <entry><literal>{[aliasname].element}</literal></entry>
            <entry><literal>XID as {coll.element}</literal></entry>
            <entry></entry>
          </row>
          <row>
            <entry>集合元素的属性</entry>
            <entry><literal>{[aliasname].element.[propertyname]}</literal></entry>
            <entry><literal>NAME as {coll.element.name}</literal></entry>
          </row>
          <row>
            <entry>集合元素的所有属性</entry>
            <entry><literal>{[aliasname].element.*}</literal></entry>
            <entry><literal>{coll.element.*}</literal></entry>
          </row>
          <row>
            <entry>集合的所有属性</entry>
            <entry><literal>{[aliasname].*}</literal></entry>
            <entry><literal>{coll.*}</literal></entry>
          </row>
        </tbody>
      </tgroup>
    </table>


    </sect3>
   </sect2>
   
       <sect2>
      <title>返回非受管实体(Returning non-managed entities)</title>

      <para>
      可以对原生sql 查询使用ResultTransformer。这会返回不受Hibernate管理的实体。
      
      </para>

      <programlisting><![CDATA[sess.createSQLQuery("SELECT NAME, BIRTHDATE FROM CATS")
        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]></programlisting>
        
              <para>这个查询指定：</para>

      <itemizedlist>
        <listitem>
          <para>SQL查询字符串</para>
        </listitem>

        <listitem>
          <para>结果转换器(result transformer)</para>
        </listitem>
      </itemizedlist>
        
        <para>
        上面的查询将会返回<literal>CatDTO</literal>的列表,它将被实例化并且将NAME和BIRTHDAY的值注射入对应的属性或者字段。
        </para>
    </sect2>

    <sect2>
      <title>处理继承（Handling inheritance）</title>

      <para>
      原生SQL查询假若其查询结果实体是继承树中的一部分，它必须包含基类和所有子类的所有属性。
      </para>
    </sect2>

    <sect2>
      <title>参数（Parameters）</title>

      <para>
      原生查询支持位置参数和命名参数：
      </para>

      <programlisting><![CDATA[Query query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like ?").addEntity(Cat.class);
List pusList = query.setString(0, "Pus%").list();
     
query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like :name").addEntity(Cat.class);
List pusList = query.setString("name", "Pus%").list();          ]]></programlisting>
    </sect2>
    
    
        
  </sect1>

    
    <sect1 id="querysql-namedqueries" revision="3">
        <title>命名SQL查询</title>

        <para>
			可以在映射文档中定义查询的名字,然后就可以象调用一个命名的HQL查询一样直接调用命名SQL查询.在这种情况下,我们<emphasis>不</emphasis>
			需要调用<literal>addEntity()</literal>方法.
        </para>

         <programlisting><![CDATA[<sql-query name="persons">
    <return alias="person" class="eg.Person"/>
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex}
    FROM PERSON person
    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>

    <programlisting><![CDATA[List people = sess.getNamedQuery("persons")
    .setString("namePattern", namePattern)
    .setMaxResults(50)
    .list();]]></programlisting>
    
    <para><literal>&lt;return-join&gt;</literal>和
    <literal>&lt;load-collection&gt;</literal> 元素是用来连接关联以及将查询定义为预先初始化各个集合的。</para>

    <programlisting><![CDATA[<sql-query name="personsWith">
    <return alias="person" class="eg.Person"/>
    <return-join alias="address" property="person.mailingAddress"/>
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person
    JOIN ADDRESS address
        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>
    

        <para>
			一个命名查询可能会返回一个标量值.你必须使用<literal>&lt;return-scalar&gt;</literal>元素来指定字段的别名和
			Hibernate类型
        </para>
        
        <programlisting><![CDATA[<sql-query name="mySqlQuery">
    <return-scalar column="name" type="string"/>
    <return-scalar column="age" type="long"/>
    SELECT p.NAME AS name,
           p.AGE AS age,
    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'
</sql-query>]]></programlisting>

    <para>
    你可以把结果集映射的信息放在外部的<literal>&lt;resultset&gt;</literal>元素中，这样就可以在多个命名查询间，或者通过<literal>setResultSetMapping()</literal>API来访问。(此处原文即存疑。原文为：You can externalize the resultset mapping informations in a
    <literal>&lt;resultset&gt;</literal> element to either reuse them accross
    several named queries or through the
    <literal>setResultSetMapping()</literal> API.)
    </para>

    <programlisting><![CDATA[<resultset name="personAddress">
    <return alias="person" class="eg.Person"/>
    <return-join alias="address" property="person.mailingAddress"/>
</resultset>

<sql-query name="personsWith" resultset-ref="personAddress">
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person
    JOIN ADDRESS address
        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>

	    <para>
    	另外,你可以在java代码中直接使用hbm文件中的结果集定义信息。
    </para>

    <programlisting><![CDATA[List cats = sess.createSQLQuery(
        "select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id"
    )
    .setResultSetMapping("catAndKitten")
    .list();]]></programlisting>
         
         <sect2 id="propertyresults">
             <title>使用return-property来明确地指定字段/别名</title>
             
             <para>
				使用<literal>&lt;return-property&gt;</literal>你可以明确的告诉Hibernate使用哪些字段别名,这取代了使用<literal>{}</literal>-语法
				来让Hibernate注入它自己的别名.
             </para>
             
            <programlisting><![CDATA[<sql-query name="mySqlQuery">
    <return alias="person" class="eg.Person">
      <return-property name="name" column="myName"/>
      <return-property name="age" column="myAge"/>
      <return-property name="sex" column="mySex"/>
    </return>
    SELECT person.NAME AS myName,
           person.AGE AS myAge,
           person.SEX AS mySex,
    FROM PERSON person WHERE person.NAME LIKE :name
</sql-query>
]]></programlisting>
<para><literal>&lt;return-property&gt;</literal>也可用于多个字段,它解决了使用<literal>{}</literal>-语法不能细粒度控制多个字段的限制</para>
             <programlisting><![CDATA[<sql-query name="organizationCurrentEmployments">
            <return alias="emp" class="Employment">            
             <return-property name="salary"> 
               <return-column name="VALUE"/>
               <return-column name="CURRENCY"/>            
             </return-property>
             <return-property name="endDate" column="myEndDate"/>
            </return>
            SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
            STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
            REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY
            FROM EMPLOYMENT
            WHERE EMPLOYER = :id AND ENDDATE IS NULL
            ORDER BY STARTDATE ASC
</sql-query>]]></programlisting>
             
            <para>
				注意在这个例子中,我们使用了<literal>&lt;return-property&gt;</literal>结合<literal>{}</literal>的注入语法.
				允许用户来选择如何引用字段以及属性.
            </para>

            <para>
			 如果你映射一个识别器(discriminator),你必须使用<literal>&lt;return-discriminator&gt;</literal> 来指定识别器字段
            </para>
         </sect2>
         
         <sect2 id="sp_query"  revision="1">
             <title>使用存储过程来查询</title>
             
             <para>
				 Hibernate 3引入了对存储过程查询(stored procedure)和函数(function)的支持.以下的说明中，这二者一般都适用。
				 
				 存储过程/函数必须返回一个结果集,作为Hibernate能够使用的第一个外部参数.
				 
				 下面是一个Oracle9和更高版本的存储过程例子.</para>
                 
                 <programlisting><![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments 
    RETURN SYS_REFCURSOR 
AS 
    st_cursor SYS_REFCURSOR; 
BEGIN 
    OPEN st_cursor FOR 
 SELECT EMPLOYEE, EMPLOYER, 
 STARTDATE, ENDDATE, 
 REGIONCODE, EID, VALUE, CURRENCY 
 FROM EMPLOYMENT; 
      RETURN  st_cursor; 
 END;]]></programlisting>
             <para>    
				 在Hibernate里要要使用这个查询,你需要通过命名查询来映射它.
			 </para>
                 
             <programlisting><![CDATA[<sql-query name="selectAllEmployees_SP" callable="true">
    <return alias="emp" class="Employment">
        <return-property name="employee" column="EMPLOYEE"/>
        <return-property name="employer" column="EMPLOYER"/>            
        <return-property name="startDate" column="STARTDATE"/>
        <return-property name="endDate" column="ENDDATE"/>            
        <return-property name="regionCode" column="REGIONCODE"/>            
        <return-property name="id" column="EID"/>                        
        <return-property name="salary"> 
            <return-column name="VALUE"/>
            <return-column name="CURRENCY"/>            
        </return-property>
    </return>
    { ? = call selectAllEmployments() }
</sql-query>]]></programlisting>
             
             <para>
			  注意存储过程当前仅仅返回标量和实体.现在不支持<literal>&lt;return-join&gt;</literal>和<literal>&lt;load-collection&gt;</literal>
			  
             </para>
             
             <sect3 id="querysql-limits-storedprocedures"  revision="1">
               <title>使用存储过程的规则和限制</title>
               
               <para>
				   为了在Hibernate中使用存储过程,你必须遵循一些规则.不遵循这些规则的存储过程将不可用.如果你仍然想要使用他们,
				   你必须通过<literal>session.connection()</literal>来执行他们.这些规则针对于不同的数据库.因为数据库
				   提供商有各种不同的存储过程语法和语义.
               </para>
               
               <para>
                   对存储过程进行的查询无法使用<literal>setFirstResult()/setMaxResults()</literal>进行分页。
               </para>
               
               
        <para>建议采用的调用方式是标准SQL92: <literal>{ ? = call
        functionName(&lt;parameters&gt;) }</literal> 或者 <literal>{ ? = call
        procedureName(&lt;parameters&gt;}</literal>.原生调用语法不被支持。</para>

               <para>
				   对于Oracle有如下规则:
               </para>
               
               <itemizedlist spacing="compact">
          <listitem>
            <para>函数必须返回一个结果集。存储过程的第一个参数必须是<literal>OUT</literal>，它返回一个结果集。这是通过Oracle 9或10的<literal>SYS_REFCURSOR</literal>类型来完成的。在Oracle中你需要定义一个<literal>REF CURSOR</literal>类型，参见Oracle的手册。</para>
          </listitem>
              </itemizedlist>
                           
              <para>                   
				   对于Sybase或者MS SQL server有如下规则:
               </para>
                   
               <itemizedlist spacing="compact">
               <listitem>
               <para>    
				   存储过程必须返回一个结果集。.注意这些servers可能返回多个结果集以及更新的数目.Hibernate将取出第一条结果集作为它的返回值，
				   其他将被丢弃。
               </para>
               </listitem>    
               <listitem>
               <para>    
				   如果你能够在存储过程里设定<literal>SET NOCOUNT ON</literal>，这可能会效率更高，但这不是必需的。
               </para>
               </listitem>    
              </itemizedlist>
              </sect3>
         </sect2>

    </sect1>

    <sect1 id="querysql-cud">
        <title>定制SQL用来create，update和delete</title>

        <para>
			Hibernate3能够使用定制的SQL语句来执行create,update和delete操作。在Hibernate中，持久化的类和集合已经
			包含了一套配置期产生的语句(insertsql, deletesql, updatesql等等)，这些映射标记 <literal>&lt;sql-insert&gt;</literal>, 
			<literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</literal>重载了
			这些语句。
        </para>

        <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-insert>
    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>
    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>
</class>]]></programlisting>

        <para>
			这些SQL直接在你的数据库里执行，所以你可以自由的使用你喜欢的任意语法。但如果你使用数据库特定的语法，
			这当然会降低你映射的可移植性。
        </para>

        <para>
			如果设定<literal>callable</literal>，则能够支持存储过程了。
        </para>

    <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <sql-insert callable="true">{call createPerson (?, ?)}</sql-insert>
    <sql-delete callable="true">{? = call deletePerson (?)}</sql-delete>
    <sql-update callable="true">{? = call updatePerson (?, ?)}</sql-update>
</class>]]></programlisting>

        <para>
		  参数的位置顺序是非常重要的，他们必须和Hibernate所期待的顺序相同。
        </para>
        
        <para>
		  你能够通过设定日志调试级别为<literal>org.hiberante.persister.entity</literal>,来查看Hibernate所期待的顺序。在这个级别下，
		  Hibernate将会打印出create,update和delete实体的静态SQL。(如果想看到预计的顺序。记得不要将定制SQL包含在映射文件里，
		  因为他们会重载Hibernate生成的静态SQL。)
        </para>

        <para>
			在大多数情况下(最好这么做)，存储过程需要返回插入/更新/删除的行数，因为Hibernate对语句的成功执行有些运行时的检查。
			Hibernate常会把进行CUD操作的语句的第一个参数注册为一个数值型输出参数。
        </para>

        <programlisting><![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN VARCHAR2)
    RETURN NUMBER IS
BEGIN

    update PERSON
    set
        NAME = uname,
    where
        ID = uid;

    return SQL%ROWCOUNT;

END updatePerson;]]></programlisting>

        
    </sect1>

    <sect1 id="querysql-load">
        <title>定制装载SQL</title>

        <para>
			你可能需要声明你自己的SQL(或HQL)来装载实体
        </para>

    <programlisting><![CDATA[<sql-query name="person">
    <return alias="pers" class="Person" lock-mode="upgrade"/>
    SELECT NAME AS {pers.name}, ID AS {pers.id}
    FROM PERSON
    WHERE ID=?
    FOR UPDATE
</sql-query>]]></programlisting>

        <para>
			这只是一个前面讨论过的命名查询声明，你可以在类映射里引用这个命名查询。
        </para>

        <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <loader query-ref="person"/>
</class>]]></programlisting>
    
        <para>
		    这也可以用于存储过程
        </para>

    <para>你甚至可以定一个用于集合装载的查询:</para>

    <programlisting><![CDATA[<set name="employments" inverse="true">
    <key/>
    <one-to-many class="Employment"/>
    <loader query-ref="employments"/>
</set>]]></programlisting>

    <programlisting><![CDATA[<sql-query name="employments">
    <load-collection alias="emp" role="Person.employments"/>
    SELECT {emp.*}
    FROM EMPLOYMENT emp
    WHERE EMPLOYER = :id
    ORDER BY STARTDATE ASC, EMPLOYEE ASC
</sql-query>]]></programlisting>

    <para>你甚至还可以定义一个实体装载器，它通过连接抓取装载一个集合:</para>

    <programlisting><![CDATA[<sql-query name="person">
    <return alias="pers" class="Person"/>
    <return-join alias="emp" property="pers.employments"/>
    SELECT NAME AS {pers.*}, {emp.*}
    FROM PERSON pers
    LEFT OUTER JOIN EMPLOYMENT emp
        ON pers.ID = emp.PERSON_ID
    WHERE ID=?
</sql-query>]]></programlisting>
  </sect1>

</chapter>
