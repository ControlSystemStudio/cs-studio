<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="batch">
    <title>批量处理（Batch processing）</title>
    <para>
        使用Hibernate将 100 000 条记录插入到数据库的一个很自然的做法可能是这样的
    </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
}
tx.commit();
session.close();]]></programlisting>

    <para>
        这段程序大概运行到 50 000 条记录左右会失败并抛出 <literal>内存溢出异常（OutOfMemoryException）</literal> 。
        这是因为 Hibernate 把所有新插入的 <literal>客户（Customer）</literal>实例在 session级别的缓存区进行了缓存的缘故。
    </para>

    <para>
        我们会在本章告诉你如何避免此类问题。首先，如果你要执行批量处理并且想要达到一个理想的性能，
        那么使用JDBC的批量（batching）功能是至关重要。将JDBC的批量抓取数量（batch size）参数设置到一个合适值
        （比如，10-50之间）：
    </para>
    
<programlisting><![CDATA[hibernate.jdbc.batch_size 20]]></programlisting>

    <para id="disablebatching" revision="1">
        注意,假若你使用了<literal>identiy</literal>标识符生成器,Hibernate在JDBC级别透明的关闭插入语句的批量执行。
    </para>

    <para>
        你也可能想在执行批量处理时关闭二级缓存：
    </para>

<programlisting><![CDATA[hibernate.cache.use_second_level_cache false]]></programlisting>
    <para>
        但是，这不是绝对必须的，因为我们可以显式设置<literal>CacheMode</literal>来关闭与二级缓存的交互。
    </para>


    <sect1 id="batch-inserts">
        <title>批量插入（Batch inserts）</title>

        <para>
            如果要将很多对象持久化，你必须通过经常的调用 <literal>flush()</literal> 以及稍后调用 
            <literal>clear()</literal> 来控制第一级缓存的大小。
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, same as the JDBC batch size //20,与JDBC批量设置相同
        //flush a batch of inserts and release memory:
        //将本批插入的对象立即写入数据库并释放内存
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-update" >
        <title>批量更新（Batch updates）</title>

        <para>
            此方法同样适用于检索和更新数据。此外，在进行会返回很多行数据的查询时，
            你需要使用 <literal>scroll()</literal> 方法以便充分利用服务器端游标所带来的好处。
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .setCacheMode(CacheMode.IGNORE)
    .scroll(ScrollMode.FORWARD_ONLY);
int count=0;
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    if ( ++count % 20 == 0 ) {
        //flush a batch of updates and release memory:
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();]]></programlisting>

    </sect1>

    <sect1 id="batch-statelesssession">
        <title>StatelessSession (无状态session)接口</title>
        <para>
            作为选择，Hibernate提供了基于命令的API，可以用detached object的形式把数据以流的方法加入到数据库，或从数据库输出。<literal>StatelessSession</literal>没有持久化上下文，也不提供多少高层的生命周期语义。特别是，无状态session不实现第一级cache,也不和第二级缓存，或者查询缓存交互。它不实现事务化写，也不实现脏数据检查。用stateless session进行的操作甚至不级联到关联实例。stateless session忽略集合类(Collections)。通过stateless session进行的操作不触发Hibernate的事件模型和拦截器。无状态session对数据的混淆现象免疫，因为它没有第一级缓存。无状态session是低层的抽象，和低层JDBC相当接近。
        </para>
        
<programlisting><![CDATA[StatelessSession session = sessionFactory.openStatelessSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .scroll(ScrollMode.FORWARD_ONLY);
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    session.update(customer);
}
   
tx.commit();
session.close();]]></programlisting>

        <para>
            注意在上面的例子中，查询返回的<literal>Customer</literal>实例立即被脱管(detach)。它们与任何持久化上下文都没有关系。
        </para>
        
        <para>
            <literal>StatelessSession</literal> 接口定义的<literal>insert(), update()</literal> 和 <literal>delete()</literal>操作是直接的数据库行级别操作，其结果是立刻执行一条<literal>INSERT, UPDATE</literal> 或 <literal>DELETE</literal> 语句。因此，它们的语义和<literal>Session</literal> 接口定义的<literal>save(), saveOrUpdate()</literal> 和<literal>delete()</literal> 操作有很大的不同。
        </para>

    </sect1>

    <sect1 id="batch-direct" revision="3">
        <title>DML(数据操作语言)风格的操作(DML-style operations)</title>

        <para>
        hence manipulating (using the SQL <literal>Data Manipulation Language</literal>
            (DML) statements: <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>)
            data directly in the database will not affect in-memory state. However, Hibernate provides methods
            for bulk SQL-style DML statement execution which are performed through the
            Hibernate Query Language (<xref linkend="queryhql">HQL</xref>).
            
            
            就像已经讨论的那样，自动和透明的 对象/关系 映射（object/relational mapping）关注于管理对象的状态。
            这就意味着对象的状态存在于内存，因此直接操作 (使用 SQL <literal>Data Manipulation Language</literal>(DML,数据操作语言）语句 ：<literal>INSERT</literal> ,<literal>UPDATE</literal> 和
            <literal>DELETE</literal>) 数据库中的数据将不会影响内存中的对象状态和对象数据。
            不过，Hibernate提供通过Hibernate查询语言（<xref linkend="queryhql">HQL</xref>）来执行大批
            量SQL风格的DML语句的方法。
        </para>

	    <para>
            <literal>UPDATE</literal> 和 <literal>DELETE</literal>语句的语法为：
            <literal>( UPDATE | DELETE ) FROM? EntityName (WHERE where_conditions)?</literal>
            有几点说明：
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    在FROM子句（from-clause）中，FROM关键字是可选的
                </para>
            </listitem>
            <listitem>
                <para>
                    在FROM子句（from-clause）中只能有一个实体名，它可以是别名。如果实体名是别名，那么任何被引用的属性都必须加上此别名的前缀；如果不是别名，那么任何有前缀的属性引用都是非法的。
                </para>
            </listitem>
            <listitem>
                <para>
                    不能在大批量HQL语句中使用<xref linkend="queryhql-joins-forms">连接(join)</xref>（显式或者隐式的都不行）。不过在WHERE子句中可以使用子查询。可以在where子句中使用子查询，子查询本身可以包含join。

                </para>
            </listitem>
            <listitem>
                <para>
                       整个WHERE子句是可选的。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            举个例子，使用<literal>Query.executeUpdate()</literal>方法执行一个HQL
            <literal>UPDATE</literal>语句(：
             (方法命名是来源于JDBC's <literal>PreparedStatement.executeUpdate()</literal>):
        </para>

		<programlisting><![CDATA[Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		String hqlUpdate = "update Customer c set c.name = :newName where c.name = :oldName";
		// or String hqlUpdate = "update Customer set name = :newName where name = :oldName";
		int updatedEntities = s.createQuery( hqlUpdate )
		        .setString( "newName", newName )
		        .setString( "oldName", oldName )
		        .executeUpdate();
		tx.commit();
		session.close();]]></programlisting>

        <para>
            HQL <literal>UPDATE</literal>语句，默认不会影响更新实体的<xref linkend="mapping-declaration-version">version</xref>或者<xref linkend="mapping-declaration-timestamp">timestamp</xref>属性值。这和EJB3规范是一致的。但是，通过使用<literal>versioned update</literal>，你可以强制Hibernate正确的重置<literal>version</literal>或者<literal>timestamp</literal>属性值。这通过在<literal>UPDATE</literal>关键字后面增加<literal>VERSIONED</literal>关键字来实现的。
        </para>
<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
String hqlVersionedUpdate = "update versioned Customer set name = :newName where name = :oldName";
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( "newName", newName )
        .setString( "oldName", oldName )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

        <para>
            注意，自定义的版本类型(<literal>org.hibernate.usertype.UserVersionType</literal>)不允许和<literal>update versioned</literal>语句联用。
        </para>

        <para>
            执行一个HQL <literal>DELETE</literal>，同样使用 <literal>Query.executeUpdate()</literal> 方法:
        </para>

		<programlisting><![CDATA[Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		String hqlDelete = "delete Customer c where c.name = :oldName";
		// or String hqlDelete = "delete Customer where name = :oldName";
		int deletedEntities = s.createQuery( hqlDelete )
		        .setString( "oldName", oldName )
		        .executeUpdate();
		tx.commit();
		session.close();]]></programlisting>

        <para>
            由<literal>Query.executeUpdate()</literal>方法返回的<literal>整型</literal>值表明了受此操作影响的记录数量。
            注意这个数值可能与数据库中被（最后一条SQL语句）影响了的“行”数有关，也可能没有。一个大批量HQL操作可能导致多条实际的SQL语句被执行，
            举个例子，对joined-subclass映射方式的类进行的此类操作。这个返回值代表了实际被语句影响了的记录数量。在那个joined-subclass的例子中，
            对一个子类的删除实际上可能不仅仅会删除子类映射到的表而且会影响“根”表，还有可能影响与之有继承关系的joined-subclass映射方式的子类的表。
        </para>

        <para>
            <literal>INSERT</literal>语句的伪码是:
            <literal>INSERT INTO EntityName properties_list select_statement</literal>.  
            要注意的是:
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    只支持INSERT INTO ... SELECT ...形式,不支持INSERT INTO ... VALUES ...形式.
                </para>
                <para>
                    properties_list和SQL <literal>INSERT</literal>语句中的<literal>字段定义(column speficiation)</literal>类似。对参与继承树映射的实体而言，只有直接定义在给定的类级别的属性才能直接在properties_list中使用。超类的属性不被支持；子类的属性无意义。换句话说，<literal>INSERT</literal>天生不支持多态。
                </para>
            </listitem>
            <listitem>
                <para>
                    select_statement可以是任何合法的HQL选择查询，不过要保证返回类型必须和要插入的类型完全匹配。目前，这一检查是在查询编译的时候进行的，而不是把它交给数据库。注意，在Hibernate<literal>Type</literal>间如果只是<emphasis>等价（equivalent）</emphasis>而非<emphasis>相等(equal)</emphasis>，会导致问题。定义为<literal>org.hibernate.type.DateType</literal>和<literal>org.hibernate.type.TimestampType</literal>的两个属性可能会产生类型不匹配错误，虽然数据库级可能不加区分或者可以处理这种转换。
                </para>
            </listitem>
            <listitem>
                <para>
                    对id属性来说,insert语句给你两个选择。你可以明确地在properties_list表中指定id属性（这样它的值是从对应的select表达式中获得），或者在properties_list中省略它（此时使用生成指）。后一种选择只有当使用在数据库中生成值的id产生器时才能使用；如果是“内存”中计算的类型生成器，在解析时会抛出一个异常。注意，为了说明这一问题，数据库产生值的生成器是<literal>org.hibernate.id.SequenceGenerator</literal>（和它的子类），以及任何<literal>org.hibernate.id.PostInsertIdentifierGenerator</literal>接口的实现。这儿最值得注意的意外是<literal>org.hibernate.id.TableHiLoGenerator</literal>，它不能在此使用，因为它没有得到其值的途径。
                </para>
            </listitem>
            <listitem>
                <para>
                    对映射为<literal>version</literal> 或 <literal>timestamp</literal>的属性来说，insert语句也给你两个选择，你可以在properties_list表中指定（此时其值从对应的select表达式中获得），或者在properties_list中省略它（此时，使用在<literal>org.hibernate.type.VersionType</literal> 中定义的<literal>seed value(种子值)</literal>）。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            执行HQL <literal>INSERT</literal>语句的例子如下：
        </para>

<programlisting><![CDATA[Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlInsert = "insert into DelinquentAccount (id, name) select c.id, c.name from Customer c where ...";
int createdEntities = s.createQuery( hqlInsert )
        .executeUpdate();
tx.commit();
session.close();]]></programlisting>

    </sect1>

</chapter>
