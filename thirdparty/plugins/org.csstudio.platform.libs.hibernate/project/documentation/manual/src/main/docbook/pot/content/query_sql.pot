# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-02-11T05:38:15\n"
"PO-Revision-Date: 2010-02-11T05:38:15\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Native SQL"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can also express queries in the native SQL dialect of your database. This is useful if you want to utilize database-specific features such as query hints or the <literal>CONNECT</literal> keyword in Oracle. It also provides a clean migration path from a direct SQL/JDBC based application to Hibernate."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Hibernate3 allows you to specify handwritten SQL, including stored procedures, for all create, update, delete, and load operations."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using a <literal>SQLQuery</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Execution of native SQL queries is controlled via the <literal>SQLQuery</literal> interface, which is obtained by calling <literal>Session.createSQLQuery()</literal>. The following sections describe how to use this API for querying."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Scalar queries"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The most basic SQL query is to get a list of scalars (values)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "These will return a List of Object arrays (Object[]) with scalar values for each column in the CATS table. Hibernate will use ResultSetMetadata to deduce the actual order and types of the returned scalar values."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To avoid the overhead of using <literal>ResultSetMetadata</literal>, or simply to be more explicit in what is returned, one can use <literal>addScalar()</literal>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This query specified:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the SQL query string"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the columns and types to return"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This will return Object arrays, but now it will not use <literal>ResultSetMetadata</literal> but will instead explicitly get the ID, NAME and BIRTHDATE column as respectively a Long, String and a Short from the underlying resultset. This also means that only these three columns will be returned, even though the query is using <literal>*</literal> and could return more than the three listed columns."
msgstr ""

#. Tag: para
#, no-c-format
msgid "It is possible to leave out the type information for all or some of the scalars."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is essentially the same query as before, but now <literal>ResultSetMetaData</literal> is used to determine the type of NAME and BIRTHDATE, where as the type of ID is explicitly specified."
msgstr ""

#. Tag: para
#, no-c-format
msgid "How the java.sql.Types returned from ResultSetMetaData is mapped to Hibernate types is controlled by the Dialect. If a specific type is not mapped, or does not result in the expected type, it is possible to customize it via calls to <literal>registerHibernateType</literal> in the Dialect."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Entity queries"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The above queries were all about returning scalar values, basically returning the \"raw\" values from the resultset. The following shows how to get entity objects from a native sql query via <literal>addEntity()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "the entity returned by the query"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Assuming that Cat is mapped as a class with the columns ID, NAME and BIRTHDATE the above queries will both return a List where each element is a Cat entity."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If the entity is mapped with a <literal>many-to-one</literal> to another entity it is required to also return this when performing the native query, otherwise a database specific \"column not found\" error will occur. The additional columns will automatically be returned when using the * notation, but we prefer to be explicit as in the following example for a <literal>many-to-one</literal> to a <literal>Dog</literal>:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This will allow cat.getDog() to function properly."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Handling associations and collections"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It is possible to eagerly join in the <literal>Dog</literal> to avoid the possible extra roundtrip for initializing the proxy. This is done via the <literal>addJoin()</literal> method, which allows you to join in an association or collection."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example, the returned <literal>Cat</literal>'s will have their <literal>dog</literal> property fully initialized without any extra roundtrip to the database. Notice that you added an alias name (\"cat\") to be able to specify the target property path of the join. It is possible to do the same eager joining for collections, e.g. if the <literal>Cat</literal> had a one-to-many to <literal>Dog</literal> instead."
msgstr ""

#. Tag: para
#, no-c-format
msgid "At this stage you are reaching the limits of what is possible with native queries, without starting to enhance the sql queries to make them usable in Hibernate. Problems can arise when returning multiple entities of the same type or when the default alias/column names are not enough."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Returning multiple entities"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Until now, the result set column names are assumed to be the same as the column names specified in the mapping document. This can be problematic for SQL queries that join multiple tables, since the same column names can appear in more than one table."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Column alias injection is needed in the following query (which most likely will fail):"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The query was intended to return two Cat instances per row: a cat and its mother. The query will, however, fail because there is a conflict of names; the instances are mapped to the same column names. Also, on some databases the returned column aliases will most likely be on the form \"c.ID\", \"c.NAME\", etc. which are not equal to the columns specified in the mappings (\"ID\" and \"NAME\")."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following form is not vulnerable to column name duplication:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the SQL query string, with placeholders for Hibernate to inject column aliases"
msgstr ""

#. Tag: para
#, no-c-format
msgid "the entities returned by the query"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The {cat.*} and {mother.*} notation used above is a shorthand for \"all properties\". Alternatively, you can list the columns explicitly, but even in this case Hibernate injects the SQL column aliases for each property. The placeholder for a column alias is just the property name qualified by the table alias. In the following example, you retrieve Cats and their mothers from a different table (cat_log) to the one declared in the mapping metadata. You can even use the property aliases in the where clause."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Alias and property references"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In most cases the above alias injection is needed. For queries relating to more complex mappings, like composite properties, inheritance discriminators, collections etc., you can use specific aliases that allow Hibernate to inject the proper aliases."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following table shows the different ways you can use the alias injection. Please note that the alias names in the result are simply examples; each alias will have a unique and probably different name when used."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Alias injection names"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Description"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Syntax"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Example"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A simple property"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].[propertyname]</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>A_NAME as {item.name}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A composite property"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].[componentname].[propertyname]}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Discriminator of an entity"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].class}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>DISC as {item.class}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "All properties of an entity"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].*}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{item.*}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "A collection key"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].key}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>ORGID as {coll.key}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "The id of an collection"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].id}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>EMPID as {coll.id}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "The element of an collection"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].element}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>XID as {coll.element}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "property of the element in the collection"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].element.[propertyname]}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>NAME as {coll.element.name}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "All properties of the element in the collection"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{[aliasname].element.*}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{coll.element.*}</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "All properties of the the collection"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>{coll.*}</literal>"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Returning non-managed entities"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It is possible to apply a ResultTransformer to native SQL queries, allowing it to return non-managed entities."
msgstr ""

#. Tag: para
#, no-c-format
msgid "a result transformer"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The above query will return a list of <literal>CatDTO</literal> which has been instantiated and injected the values of NAME and BIRTHNAME into its corresponding properties or fields."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Handling inheritance"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Native SQL queries which query for entities that are mapped as part of an inheritance must include all properties for the baseclass and all its subclasses."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Parameters"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Native SQL queries support positional as well as named parameters:"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Named SQL queries"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Named SQL queries can be defined in the mapping document and called in exactly the same way as a named HQL query. In this case, you do <emphasis>not</emphasis> need to call <literal>addEntity()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The <literal>&lt;return-join&gt;</literal> element is use to join associations and the <literal>&lt;load-collection&gt;</literal> element is used to define queries which initialize collections,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A named SQL query may return a scalar value. You must declare the column alias and Hibernate type using the <literal>&lt;return-scalar&gt;</literal> element:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can externalize the resultset mapping information in a <literal>&lt;resultset&gt;</literal> element which will allow you to either reuse them across several named queries or through the <literal>setResultSetMapping()</literal> API."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can, alternatively, use the resultset mapping information in your hbm files directly in java code."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using return-property to explicitly specify column/alias names"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can explicitly tell Hibernate what column aliases to use with <literal>&lt;return-property&gt;</literal>, instead of using the <literal>{}</literal>-syntax to let Hibernate inject its own aliases.For example:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>&lt;return-property&gt;</literal> also works with multiple columns. This solves a limitation with the <literal>{}</literal>-syntax which cannot allow fine grained control of multi-column properties."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example <literal>&lt;return-property&gt;</literal> was used in combination with the <literal>{}</literal>-syntax for injection. This allows users to choose how they want to refer column and properties."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If your mapping has a discriminator you must use <literal>&lt;return-discriminator&gt;</literal> to specify the discriminator column."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using stored procedures for querying"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Hibernate3 provides support for queries via stored procedures and functions. Most of the following documentation is equivalent for both. The stored procedure/function must return a resultset as the first out-parameter to be able to work with Hibernate. An example of such a stored function in Oracle 9 and higher is as follows:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To use this query in Hibernate you need to map it via a named query."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stored procedures currently only return scalars and entities. <literal>&lt;return-join&gt;</literal> and <literal>&lt;load-collection&gt;</literal> are not supported."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Rules/limitations for using stored procedures"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You cannot use stored procedures with Hibernate unless you follow some procedure/function rules. If they do not follow those rules they are not usable with Hibernate. If you still want to use these procedures you have to execute them via <literal>session.connection()</literal>. The rules are different for each database, since database vendors have different stored procedure semantics/syntax."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stored procedure queries cannot be paged with <literal>setFirstResult()/setMaxResults()</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The recommended call form is standard SQL92: <literal>{ ? = call functionName(&lt;parameters&gt;) }</literal> or <literal>{ ? = call procedureName(&lt;parameters&gt;}</literal>. Native call syntax is not supported."
msgstr ""

#. Tag: para
#, no-c-format
msgid "For Oracle the following rules apply:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A function must return a result set. The first parameter of a procedure must be an <literal>OUT</literal> that returns a result set. This is done by using a <literal>SYS_REFCURSOR</literal> type in Oracle 9 or 10. In Oracle you need to define a <literal>REF CURSOR</literal> type. See Oracle literature for further information."
msgstr ""

#. Tag: para
#, no-c-format
msgid "For Sybase or MS SQL server the following rules apply:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The procedure must return a result set. Note that since these servers can return multiple result sets and update counts, Hibernate will iterate the results and take the first result that is a result set as its return value. Everything else will be discarded."
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you can enable <literal>SET NOCOUNT ON</literal> in your procedure it will probably be more efficient, but this is not a requirement."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Custom SQL for create, update and delete"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Hibernate3 can use custom SQL for create, update, and delete operations. The SQL can be overridden at the statement level or inidividual column level. This section describes statement overrides. For columns, see <xref linkend=\"mapping-column-read-and-write\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The class and collection persisters in Hibernate already contain a set of configuration time generated strings (insertsql, deletesql, updatesql etc.). The mapping tags <literal>&lt;sql-insert&gt;</literal>, <literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</literal> override these strings:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The SQL is directly executed in your database, so you can use any dialect you like. This will reduce the portability of your mapping if you use database specific SQL."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stored procedures are supported if the <literal>callable</literal> attribute is set:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The order of the positional parameters is vital, as they must be in the same sequence as Hibernate expects them."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can view the expected order by enabling debug logging for the <literal>org.hibernate.persister.entity</literal> level. With this level enabled, Hibernate will print out the static SQL that is used to create, update, delete etc. entities. To view the expected sequence, do not include your custom SQL in the mapping files, as this will override the Hibernate generated static SQL."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The stored procedures are in most cases required to return the number of rows inserted, updated and deleted, as Hibernate has some runtime checks for the success of the statement. Hibernate always registers the first statement parameter as a numeric output parameter for the CUD operations:"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Custom SQL for loading"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can also declare your own SQL (or HQL) queries for entity loading. As with inserts, updates, and deletes, this can be done at the individual column level as described in <xref linkend=\"mapping-column-read-and-write\" /> or at the statement level. Here is an example of a statement level override:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is just a named query declaration, as discussed earlier. You can reference this named query in a class mapping:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This even works with stored procedures."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can even define a query for collection loading:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can also define an entity loader that loads a collection by join fetching:"
msgstr ""

