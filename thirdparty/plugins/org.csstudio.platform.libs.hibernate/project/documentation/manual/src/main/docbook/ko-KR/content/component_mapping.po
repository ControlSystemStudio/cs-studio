msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-02-04T04:51:22\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Component Mapping"
msgstr "Component 매핑"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The notion of a <emphasis>component</emphasis> is re-used in several "
"different contexts and purposes throughout Hibernate."
msgstr ""
"<emphasis>component</emphasis>의 개념은 Hibernate에서 다른 용도로 몇몇 다른 "
"컨텍스트들 내에서 재사용된다."

#. Tag: title
#, no-c-format
msgid "Dependent objects"
msgstr "종속 객체들"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A component is a contained object that is persisted as a value type and not "
"an entity reference. The term \"component\" refers to the object-oriented "
"notion of composition and not to architecture-level components. For example, "
"you can model a person like this:"
msgstr ""
"하나의 컴포넌트는 엔티티 참조가 아닌, value 타입으로서 영속화 되는 하나의 포"
"함된 객체이다. \"컴포넌트\" 용어는 (아키텍처 수준의 컴포넌트들이 아닌) "
"composition(구성,합성)에 대한 객체-지향적인 개념을 언급한다. 예를 들어 당신"
"은 다음과 같이 개인을 모형화 시킬 수도 있다:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Now <literal>Name</literal> can be persisted as a component of "
"<literal>Person</literal>. <literal>Name</literal> defines getter and setter "
"methods for its persistent properties, but it does not need to declare any "
"interfaces or identifier properties."
msgstr ""
"이제 <literal>Name</literal>은 <literal>Person</literal>의 컴포넌트로서 영속"
"화 될 수도 있다. <literal>Name</literal>이 그것의 영속 프로퍼티들에 대한 "
"getter 메소드와 setter 메소드를 정의하지만, 어떤 인터페이스들이나 식별자 프로"
"퍼티들을 선언하는 것을 필요로 하지 않음을 주목하라."

#. Tag: para
#, fuzzy, no-c-format
msgid "Our Hibernate mapping would look like this:"
msgstr "우리의 Hibernate 매핑은 다음과 같을 것이다:"

#. Tag: para
#, no-c-format
msgid ""
"The person table would have the columns <literal>pid</literal>, "
"<literal>birthday</literal>, <literal>initial</literal>, <literal>first</"
"literal> and <literal>last</literal>."
msgstr ""
"person 테이블은 <literal>pid</literal>, <literal>birthday</literal>, "
"<literal>initial</literal>, <literal>first</literal>, <literal>last</"
"literal> 컬럼들을 가질 것이다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Like value types, components do not support shared references. In other "
"words, two persons could have the same name, but the two person objects "
"would contain two independent name objects that were only \"the same\" by "
"value. The null value semantics of a component are <emphasis>ad hoc</"
"emphasis>. When reloading the containing object, Hibernate will assume that "
"if all component columns are null, then the entire component is null. This "
"is suitable for most purposes."
msgstr ""
"모든 값(value) 타입들처럼, 컴포넌트들은 공유된 참조들을 지원하지 않는다. 달"
"리 말해, 두 명의 개인들은 동일한 이름을 가질 수 있지만, 두 개의 person 객체들"
"은 오직 값 만이 \"동일한\" 두 개의 독립적인 name 객체들을 포함할 것이다. 컴포"
"넌트의 null 값 의미는 <emphasis>특별한 용도를 위한 것이다</emphasis>. 포함된 "
"객체를 다시 로드시킬 때, Hibernate는 모든 컴포넌트 컬럼들이 null일 경우에 전"
"체 컴포넌트가 null이라고 가정할 것이다. 이것은 대부분의 용도에 맞을 것이다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The properties of a component can be of any Hibernate type (collections, "
"many-to-one associations, other components, etc). Nested components should "
"<emphasis>not</emphasis> be considered an exotic usage. Hibernate is "
"intended to support a fine-grained object model."
msgstr ""
"컴포넌트의 프로퍼티들은 임의의 Hibernate 타입일 수 있다(콜렉션들, many-to-"
"one 연관들, 다른 컴포넌트들, 기타). 내포된 컴포넌트들은 신종의 사용례로 간주"
"되지 <emphasis>않을</emphasis> 것이다. Hibernate는 매우 잘 정제된 객체 모형"
"을 지원하도록 고안되어있다."

#. Tag: para
#, no-c-format
msgid ""
"The <literal>&lt;component&gt;</literal> element allows a <literal>&lt;"
"parent&gt;</literal> subelement that maps a property of the component class "
"as a reference back to the containing entity."
msgstr ""
"<literal>&lt;component&gt;</literal> 요소는 컴포넌트 클래스의 프로퍼티를 포함"
"되는 엔티티에 대한 역 참조로서 매핑시키는 <literal>&lt;parent&gt;</literal> "
"서브요소를 허용한다."

#. Tag: title
#, no-c-format
msgid "Collections of dependent objects"
msgstr "종속 객체들을 가진 콜렉션들"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Collections of components are supported (e.g. an array of type "
"<literal>Name</literal>). Declare your component collection by replacing the "
"<literal>&lt;element&gt;</literal> tag with a <literal>&lt;composite-"
"element&gt;</literal> tag:"
msgstr ""
"컴포넌트들을 가진 콜렉션들이 지원된다(예를 들면 <literal>Name</literal> 타입"
"을 가진 배열). <literal>&lt;element&gt;</literal> 태그를 <literal>&lt;"
"composite-element&gt;</literal> 태그로 대체시켜서 당신의 컴포넌트 콜렉션을 선"
"언하라."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"If you define a <literal>Set</literal> of composite elements, it is "
"important to implement <literal>equals()</literal> and <literal>hashCode()</"
"literal> correctly."
msgstr ""
"노트: 만일 당신이 composite 요소를 가진 하나의 <literal>Set</literal>를 정의"
"할 경우, <literal>equals()</literal>와 <literal>hashCode()</literal>를 정확하"
"게 구현하는 것이 매우 중요하다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Composite elements can contain components but not collections. If your "
"composite element contains components, use the <literal>&lt;nested-composite-"
"element&gt;</literal> tag. This case is a collection of components which "
"themselves have components. You may want to consider if a one-to-many "
"association is more appropriate. Remodel the composite element as an entity, "
"but be aware that even though the Java model is the same, the relational "
"model and persistence semantics are still slightly different."
msgstr ""
"Composite 요소들은 컴포넌트들을 포함하지만 콜렉션들을 포함하지 않는다. 만일 "
"당신의 composite 요소 자체가 컴포넌트들을 포함할 경우, <literal>&lt;nested-"
"composite-element&gt;</literal> 태그를 사용하라. 이것은 꽤 신종의 경우-그것"
"들 자체가 컴포넌트들을 갖고 있는 컴포넌트들의 콜렉션-이다. 이 단계에서 당신"
"은 one-to-many 연관이 더 적절한지를 당신 스스로에게 질문하게 될 것이다. 하나"
"의 엔티티로서 composite 요소를 다시 모델링하려고 시도하라 - 그러나 자바 모형"
"들이 동일할지라도, 관계형 모형과 영속화 의미들은 여전히 약간 다르다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A composite element mapping does not support null-able properties if you are "
"using a <literal>&lt;set&gt;</literal>. There is no separate primary key "
"column in the composite element table. Hibernate uses each column's value to "
"identify a record when deleting objects, which is not possible with null "
"values. You have to either use only not-null properties in a composite-"
"element or choose a <literal>&lt;list&gt;</literal>, <literal>&lt;map&gt;</"
"literal>, <literal>&lt;bag&gt;</literal> or <literal>&lt;idbag&gt;</literal>."
msgstr ""
"당신이 하나의 <literal>&lt;set&gt;</literal>을 사용 중이라면, 하나의 "
"composite 요소 매핑은 null 가능한 프로퍼티들을 지원하지 않음을 노트하길 바란"
"다. Hibernate는 객체들을 삭제할 때 하나의 레코드를 식별하는데 각각의 컬럼들 "
"값을 사용해야 하며 (composite 요소 테이블 내에 별도의 프라이머리 키 컬럼이 존"
"재하지 않는다), 그것은 null 값들에 대해서는 불가능하다. 당신은 하나의 "
"composite-요소 내에 not-null 프로퍼티들 만을 사용해야 하거나 하나의 "
"<literal>&lt;list&gt;</literal>, <literal>&lt;map&gt;</literal>, "
"<literal>&lt;bag&gt;</literal> 또는 <literal>&lt;idbag&gt;</literal>을 선택해"
"야 한다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A special case of a composite element is a composite element with a nested "
"<literal>&lt;many-to-one&gt;</literal> element. This mapping allows you to "
"map extra columns of a many-to-many association table to the composite "
"element class. The following is a many-to-many association from "
"<literal>Order</literal> to <literal>Item</literal>, where "
"<literal>purchaseDate</literal>, <literal>price</literal> and "
"<literal>quantity</literal> are properties of the association:"
msgstr ""
"composite 요소에 대한 하나의 특별한 경우는 내포된 <literal>&lt;many-to-"
"one&gt;</literal> 요소를 가진 composite 요소이다. 이같은 매핑은 many-to-many "
"연관 테이블의 특별한 컬럼들을 composite 요소 클래스로 매핑시키는 것을 당신에"
"게 허용해준다. 다음은 <literal>Order</literal>로부터 <literal>Item</literal>"
"으로의 many-to-many 연관이다. 여기서 <literal>purchaseDate</literal>, "
"<literal>price</literal>, 그리고 <literal>quantity</literal>는 연관의 프로퍼"
"티들이다:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"There cannot be a reference to the purchase on the other side for "
"bidirectional association navigation. Components are value types and do not "
"allow shared references. A single <literal>Purchase</literal> can be in the "
"set of an <literal>Order</literal>, but it cannot be referenced by the "
"<literal>Item</literal> at the same time."
msgstr ""
"물론, 양방향 연관 네비게이션의 경우, 다른 측 상에 있는 purchase에 대한 참조"
"가 존재할 수 없다. 컴포넌트들이 값(value) 타입들이고 공유된 참조들을 허용하"
"지 않음을 기억하라. 하나의 <literal>Purchase</literal>는<literal>Order</"
"literal>를 가진 set 내에 있을 수 있지만, 그것은 동시에 <literal>Item</"
"literal>에 의해 참조될 수 없다."

#. Tag: para
#, no-c-format
msgid "Even ternary (or quaternary, etc) associations are possible:"
msgstr "심지어 세겹의(또는 네 겹의, 기타) 연관들이 가능하다:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Composite elements can appear in queries using the same syntax as "
"associations to other entities."
msgstr ""
"composite 요소들은 다른 엔티티들에 대한 연관들과 동일한 구문을 사용하여 질의"
"들 내에 나타날 수도 있다."

#. Tag: title
#, no-c-format
msgid "Components as Map indices"
msgstr "Map 인덱스들로서 컴포넌트들"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The <literal>&lt;composite-map-key&gt;</literal> element allows you to map a "
"component class as the key of a <literal>Map</literal>. Ensure that you "
"override <literal>hashCode()</literal> and <literal>equals()</literal> "
"correctly on the component class."
msgstr ""
"<literal>&lt;composite-map-key&gt;</literal> 요소는 당신에게 하나의 컴포넌트 "
"클래스를 하나의 <literal>Map</literal>의 키로서 매핑시키도록 한다. 당신은 컴"
"포넌트 클래스 상에서 <literal>hashCode()</literal>와 <literal>equals()</"
"literal>를 정확하게 오버라이드 시키도록 하라."

#. Tag: title
#, no-c-format
msgid "Components as composite identifiers"
msgstr "composite 식별자들로서 컴포넌트들"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You can use a component as an identifier of an entity class. Your component "
"class must satisfy certain requirements:"
msgstr ""
"당신은 하나의 컴포넌트를 하나의 엔티티 클래스에 대한 하나의 식별자로서 사용"
"할 수도 있다. 당신의 컴포넌트 클래스는 어떤 사양들을 충족시켜야 한다:"

#. Tag: para
#, no-c-format
msgid "It must implement <literal>java.io.Serializable</literal>."
msgstr "그것은 <literal>java.io.Serializable</literal>을 구현해야 한다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"It must re-implement <literal>equals()</literal> and <literal>hashCode()</"
"literal> consistently with the database's notion of composite key equality."
msgstr ""
"그것은 composite 키 등가(equality)에 대한 데이터베이스 개념과 일치되게, "
"<literal>equals()</literal>와 <literal>hashCode()</literal>를 다시 구현해야 "
"한다."

#. Tag: title
#, no-c-format
msgid "Note"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In Hibernate3, although the second requirement is not an absolutely hard "
"requirement of Hibernate, it is recommended."
msgstr ""
"노트: Hibernate3에서, 두 번째 사양은 Hibernate의 절대적으로 엄격한 사양이 아"
"니다. 그러나 아무튼 그것을 행하라."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You cannot use an <literal>IdentifierGenerator</literal> to generate "
"composite keys. Instead the application must assign its own identifiers."
msgstr ""
"당신은 compsite 키들을 생성시키는데 <literal>IdentifierGenerator</literal>를 "
"사용할 수 없다. 대신에 어플리케이션은 그것 자신의 식별자들을 할당해야 한다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Use the <literal>&lt;composite-id&gt;</literal> tag, with nested "
"<literal>&lt;key-property&gt;</literal> elements, in place of the usual "
"<literal>&lt;id&gt;</literal> declaration. For example, the "
"<literal>OrderLine</literal> class has a primary key that depends upon the "
"(composite) primary key of <literal>Order</literal>."
msgstr ""
"통상의 <literal>&lt;id&gt;</literal> 선언 위치에 (내포된 <literal>&lt;key-"
"property&gt;</literal> 요소들을 가진) <literal>&lt;composite-id&gt;</"
"literal> 태그를 사용하라. 예를 들어, <literal>OrderLine</literal> 클래스는 "
"<literal>Order</literal>의 (composite) 프라이머리 키에 의존하는 프라이머리 키"
"를 갖는다."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Any foreign keys referencing the <literal>OrderLine</literal> table are now "
"composite. Declare this in your mappings for other classes. An association "
"to <literal>OrderLine</literal> is mapped like this:"
msgstr ""
"이제 <literal>OrderLine</literal> 테이블을 참조하는 임의의 foreign 키들이 또"
"한 compsite이다. 당신은 다른 클래스들에 대한 당신의 매핑들 속에 이것을 선언해"
"야 한다. <literal>OrderLine</literal>에 대한 하나의 연관은 다음과 같이 매핑"
"될 것이다:"

#. Tag: para
#, no-c-format
msgid ""
"The <literal>column</literal> element is an alternative to the "
"<literal>column</literal> attribute everywhere. Using the <literal>column</"
"literal> element just gives more declaration options, which are mostly "
"useful when utilizing <literal>hbm2ddl</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A <literal>many-to-many</literal> association to <literal>OrderLine</"
"literal> also uses the composite foreign key:"
msgstr ""
"<literal>OrderLine</literal>에 대한 <literal>many-to-many</literal> 연관은 또"
"한 composite foreign 키를 사용한다:"

#. Tag: para
#, no-c-format
msgid ""
"The collection of <literal>OrderLine</literal>s in <literal>Order</literal> "
"would use:"
msgstr ""
"<literal>Order</literal>에서 <literal>OrderLine</literal>들의 콜렉션이 사용"
"될 것이다:"

#. Tag: para
#, fuzzy, no-c-format
msgid "The <literal>&lt;one-to-many&gt;</literal> element declares no columns."
msgstr ""
"(통상적으로 <literal>&lt;one-to-many&gt;</literal> 요소는 컬럼들을 선언하지 "
"않는다.)"

#. Tag: para
#, no-c-format
msgid ""
"If <literal>OrderLine</literal> itself owns a collection, it also has a "
"composite foreign key."
msgstr ""
"만일 <literal>OrderLine</literal> 자체가 하나의 콜렉션을 소유할 경우, 그것은 "
"또한 하나의 composite foreign 키를 갖는다."

#. Tag: title
#, no-c-format
msgid "Dynamic components"
msgstr "동적인 컴포넌트들"

#. Tag: para
#, fuzzy, no-c-format
msgid "You can also map a property of type <literal>Map</literal>:"
msgstr "당신은 <literal>Map</literal> 타입의 프로퍼티를 매핑시킬 수도 있다:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The semantics of a <literal>&lt;dynamic-component&gt;</literal> mapping are "
"identical to <literal>&lt;component&gt;</literal>. The advantage of this "
"kind of mapping is the ability to determine the actual properties of the "
"bean at deployment time just by editing the mapping document. Runtime "
"manipulation of the mapping document is also possible, using a DOM parser. "
"You can also access, and change, Hibernate's configuration-time metamodel "
"via the <literal>Configuration</literal> object."
msgstr ""
"<literal>&lt;dynamic-component&gt;</literal> 매핑의 의미는 <literal>&lt;"
"component&gt;</literal>와 동일하다. 이런 종류의 매핑의 장점은 배치 시에 단지 "
"매핑 문서를 편집함으로써 그 bean의 실제 프로퍼티들을 결정하는 가용성이다. 매"
"핑 문서에 대한 런타임 처리는 또한 DOM 파서를 사용하여 가능하다. 더 좋게는 당"
"신이 <literal>Configuration</literal> 객체를 통해 Hibernate의 구성-시 메타모"
"형에 접근할 수 있다(그리고 변경시킬 수 있다)"

#~ msgid ""
#~ "(Note that the <literal>&lt;column&gt;</literal> tag is an alternative to "
#~ "the <literal>column</literal> attribute everywhere.)"
#~ msgstr ""
#~ "(<literal>&lt;column&gt;</literal> 태그가 모든 곳에서 <literal>column</"
#~ "literal> 속성에 대한 대안임을 노트하라.)"
