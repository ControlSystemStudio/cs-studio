<?xml version='1.0' encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Hibernate_Envers_-_Easy_Entity_Auditing.ent">
%BOOK_ENTITIES;
]>

<chapter id="configuration">

    <title>Configuration</title>

    <para>
        To start working with Envers, all configuration that you must do is add the event
        listeners to persistence.xml, as described in the <xref linkend="quickstart"/>.
    </para>

    <para>
        However, as Envers generates some entities, and maps them to tables, it is possible to set the prefix and suffix
        that is added to the entity name to create an audit table for an entity, as well
        as set the names of the fields that are generated.
    </para>

    <para>
        In more detail, here are the properites that you can set:
    </para>

    <table frame="topbot">
        <title>Envers Configuration Properties</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <thead>
                <row>
                    <entry>Property name</entry>
                    <entry>Default value</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>
                        <property>org.hibernate.envers.audit_table_prefix</property>
                    </entry>
                    <entry>

                    </entry>
                    <entry>
                        String that will be prepended to the name of an audited entity to create
                        the name of the entity, that will hold audit information.
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.audit_table_suffix</property>
                    </entry>
                    <entry>
                        _AUD
                    </entry>
                    <entry>
                        String that will be appended to the name of an audited entity to create
                        the name of the entity, that will hold audit information. If you
                        audit an entity with a table name Person, in the default setting Envers
                        will generate a <literal>Person_AUD</literal> table to store historical data.
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.revision_field_name</property>
                    </entry>
                    <entry>
                        REV
                    </entry>
                    <entry>
                        Name of a field in the audit entity that will hold the revision number.
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.revision_type_field_name</property>
                    </entry>
                    <entry>
                        REVTYPE
                    </entry>
                    <entry>
                        Name of a field in the audit entity that will hold the type of the
                        revision (currently, this can be: add, mod, del).
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.revision_on_collection_change</property>
                    </entry>
                    <entry>
                        true
                    </entry>
                    <entry>
                        Should a revision be generated when a not-owned relation field changes
                        (this can be either a collection in a one-to-many relation, or the field
                        using "mappedBy" attribute in a one-to-one relation).
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.do_not_audit_optimistic_locking_field</property>
                    </entry>
                    <entry>
                        true
                    </entry>
                    <entry>
                        When true, properties to be used for optimistic locking, annotated with
                        <literal>@Version</literal>, will be automatically not audited
                        (their history won't be stored; it normally doesn't make sense to store it).
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.store_data_at_delete</property>
                    </entry>
                    <entry>
                        false
                    </entry>
                    <entry>
                        Should the entity data be stored in the revision when the entity is deleted (instead of only
                        storing the id and all other properties as null). This is not normally needed, as the data is
                        present in the last-but-one revision. Sometimes, however, it is easier and more efficient to
                        access it in the last revision (then the data that the entity contained before deletion is
                        stored twice).
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.default_schema</property>
                    </entry>
                    <entry>
                        null (same as normal tables)
                    </entry>
                    <entry>
                        The default schema name that should be used for audit tables. Can be overriden using the
                        <literal>@AuditTable(schema="...")</literal> annotation. If not present, the schema will
                        be the same as the schema of the normal tables.
                    </entry>
                </row>
                <row>
                    <entry>
                        <property>org.hibernate.envers.default_catalog</property>
                    </entry>
                    <entry>
                        null (same as normal tables)
                    </entry>
                    <entry>
                        The default catalog name that should be used for audit tables. Can be overriden using the
                        <literal>@AuditTable(catalog="...")</literal> annotation. If not present, the catalog will
                        be the same as the catalog of the normal tables.                        
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <para>
        To change the name of the revision table and its fields (the table, in which the
        numbers of revisions and their timestamps are stored), you can use the
        <literal>@RevisionEntity</literal> annotation.
        For more information, see <xref linkend="revisionlog"/>.
    </para>

    <para>
        To set the value of any of the properties described above, simply add an entry to
        your <literal>persistence.xml</literal>. For example:
    </para>

    <programlisting>&lt;persistence-unit ...&gt;
&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
&lt;class&gt;...&lt;/class&gt;
&lt;properties&gt;
   &lt;property name="hibernate.dialect" ... /&gt;
   &lt;!-- other hibernate properties --&gt;

   &lt;property name="hibernate.ejb.event.post-insert"
             value="org.hibernate.ejb.event.EJB3PostInsertEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
   &lt;property name="hibernate.ejb.event.post-update"
             value="org.hibernate.ejb.event.EJB3PostUpdateEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
   &lt;property name="hibernate.ejb.event.post-delete"
             value="org.hibernate.ejb.event.EJB3PostDeleteEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
   &lt;property name="hibernate.ejb.event.pre-collection-update"
             value="org.hibernate.envers.event.AuditEventListener" /&gt;
   &lt;property name="hibernate.ejb.event.pre-collection-remove"
             value="org.hibernate.envers.event.AuditEventListener" /&gt;
   &lt;property name="hibernate.ejb.event.post-collection-recreate"
             value="org.hibernate.envers.event.AuditEventListener" /&gt;

   &lt;property name="org.hibernate.envers.versionsTableSuffix" value="_V" /&gt;
   &lt;property name="org.hibernate.envers.revisionFieldName" value="ver_rev" /&gt;
   &lt;!-- other envers properties --&gt;
&lt;/properties&gt;
&lt;/persistence-unit&gt;</programlisting>

    <para>
        The <literal>EJB3Post...EvenListener</literal>s are needed, so that ejb3 entity lifecycle callback
        methods work (<literal>@PostPersist, @PostUpdate, @PostRemove</literal>.
    </para>

    <para>
        You can also set the name of the audit table on a per-entity basis, using the
        <literal>@AuditTable</literal> annotation. It may be tedious to add this
        annotation to every audited entity, so if possible, it's better to use a prefix/suffix.
    </para>

    <para>
        If you have a mapping with secondary tables, audit tables for them will be generated in
        the same way (by adding the prefix and suffix). If you wish to overwrite this behaviour,
        you can use the <literal>@SecondaryAuditTable</literal> and
        <literal>@SecondaryAuditTables</literal> annotations.
    </para>

    <para>
        If you'd like to override auditing behaviour of some fields/properties in an embedded component, you can use
        the <literal>@AuditOverride(s)</literal> annotation on the place where you use the component.
    </para>

    <para>
        If you want to audit a relation mapped with <literal>@OneToMany+@JoinColumn</literal>,
        please see <xref linkend="exceptions"/> for a description of the additional
        <literal>@AuditJoinTable</literal>  annotation that you'll probably want to use.
    </para>

    <para>
        If you want to audit a relation, where the target entity is not audited (that is the case for example with
        dictionary-like entities, which don't change and don't have to be audited), just annotate it with
        <literal>@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)</literal>. Then, when reading historic
        versions of your entity, the relation will always point to the "current" related entity.
    </para>
</chapter>
