<?xml version='1.0' encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Hibernate_Envers_-_Easy_Entity_Auditing.ent">
%BOOK_ENTITIES;
]>

<chapter id="migration">
    <title>Migration from Envers standalone</title>

    <para>
        With the inclusion of Envers as a Hibernate module, some of the public API and configuration defaults
        changed. In general, "versioning" is renamed to "auditing" (to avoid confusion with the annotation used
        for indicating an optimistic locking field - <literal>@Version</literal>).
    </para>

    <para>
        Because of changing some configuration defaults, there should be no more problems using Envers out-of-the-box
        with Oracle and other databases, which don't allow tables and field names to start with "_".
    </para>

    <section id="migrations-code">

        <title>Changes to code</title>

        <para>
            Public API changes involve changing "versioning" to "auditing". So, <literal>@Versioned</literal>
            became <literal>@Audited</literal>; <literal>@VersionsTable</literal> became <literal>@AuditTable</literal>
            and so on.
        </para>

        <para>
            Also, the query interface has changed slightly, mainly in the part for specifying restrictions,
            projections and order. Please refer to the Javadoc for further details.
        </para>

    </section>

    <section id="migrations-configuration">

        <title>Changes to configuration</title>

        <para>
            First of all, the name of the event listener changed. It is now named
            <literal>org.hibernate.envers.event.AuditEventListener</literal>, instead of
            <literal>org.jboss.envers.event.VersionsEventListener</literal>. So to make Envers
            work, you will have to change these settings in your <literal>persistence.xml</literal>
            or Hibernate configuration.
        </para>

        <para>
            Secondly, the names of the audit (versions) tables and additional auditing (versioning) fields
            changed. The default suffix added to the table name is now <literal>_AUD</literal>, instead of
            <literal>_versions</literal>. The name of the field that holds the revision number, and which
            is added to each audit (versions) table, is now <literal>REV</literal>, instead of
            <literal>_revision</literal>. Finally, the name of the field that holds the type of the revision,
            is now <literal>REVTYPE</literal>, instead of <literal>_rev_type</literal>.
        </para>

        <para>
            If you have a schema generated with the old version of Envers, you will
            have to set those properties, to use the new version of Envers without problems:
        </para>

        <programlisting>&lt;persistence-unit ...&gt;
&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
&lt;class&gt;...&lt;/class&gt;
&lt;properties&gt;
   &lt;property name="hibernate.dialect" ... /&gt;
   &lt;!-- other hibernate properties --&gt;

   &lt;!-- Envers listeners --&gt;

   &lt;property name="org.hibernate.envers.auditTableSuffix" value="_versions" /&gt;
   &lt;property name="org.hibernate.envers.revisionFieldName" value="_revision" /&gt;
   &lt;property name="org.hibernate.envers.revisionTypeFieldName" value="_rev_type" /&gt;
   &lt;!-- other envers properties --&gt;
&lt;/properties&gt;
&lt;/persistence-unit&gt;</programlisting>

        <para>
            The <literal>org.hibernate.envers.doNotAuditOptimisticLockingField</literal> property is
            now by default <literal>true</literal>, instead of <literal>false</literal>. You probably
            never would want to audit the optimistic locking field.
            Also, the <literal>org.hibernate.envers.warnOnUnsupportedTypes</literal> configuraiton
            option was removed. In case you are using some unsupported types, use the <literal>@NotAudited</literal>
            annotation.
        </para>

        <para>
            See <xref linkend="configuration"/> for details on the configuration and a description of the
            configuration options.
        </para>
    </section>

    <section id="migrations-revisionlog">

        <title>Changes to the revision entity</title>

        <para>
            This section applies only if you don't have a custom revision entity.
            The name of the revision entity generated by default changed, so if you used the default one, you'll
            have to add a custom revision entity, and map it to the old table. Here's the class
            that you have to create:
        </para>

        <programlisting><![CDATA[package org.hibernate.envers.example;

import org.hibernate.envers.RevisionNumber;
import org.hibernate.envers.RevisionTimestamp;
import org.hibernate.envers.RevisionEntity;

import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.Entity;
import javax.persistence.Column;
import javax.persistence.Table;

@Entity
@RevisionEntity
@Table(name="_revisions_info")
public class ExampleRevEntity {
    @Id
    @GeneratedValue
    @RevisionNumber
    @Column(name="revision_id")
    private int id;

    @RevisionTimestamp
    @Column(name="revision_timestamp")
    private long timestamp;

    // Getters, setters, equals, hashCode ...
}]]></programlisting>

    </section>
</chapter>
