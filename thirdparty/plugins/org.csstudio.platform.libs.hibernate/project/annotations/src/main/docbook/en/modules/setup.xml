<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title id="setup">Setting up an annotations project</title>

  <section id="setup-requirements">
    <title>Requirements</title>

    <itemizedlist>
      <listitem>
        <para>Make sure you have JDK 5.0 or above installed.</para>
      </listitem>

      <listitem>
        <para>Download and unpack the Hibernate Core distribution from the
        Hibernate website. Hibernate 3.5 and onward contains Hibernate
        Annotations.</para>
      </listitem>

      <listitem>
        <para>Alternatively add the following dependency in your dependency
        manager (like Maven or Ivy). Here is an example</para>

        <programlisting language="XML" role="XML">&lt;project ...&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;${hibernate-core-version}&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</programlisting>
      </listitem>
    </itemizedlist>
  </section>

  <section id="setup-configuration">
    <title>Configuration</title>

    <para>First, set up your classpath (after you have created a new project
    in your favorite IDE): <itemizedlist>
        <listitem>
          <para>Copy <filename>hibernate3.jar</filename> and the required 3rd
          party libraries available in
          <filename>lib/required</filename>.</para>
        </listitem>

        <listitem>
          <para>Copy
          <filename>lib/jpa/hibernate-jpa-2.0-api-1.0.0.Final.jar</filename>
          to your classpath as well.</para>
        </listitem>
      </itemizedlist></para>

    <para>Alternatively, import your pom.xml in your favorite IDE and let the
    dependencies be resolved automatically,</para>

    <note>
      <title>What is hibernate-jpa-2.0-api-x.y.z.jar</title>

      <para>This is the JAR containing the JPA 2.0 API, it is fully compliant
      with the spec and passed the TCK signature test. You typically don't
      need it when you deploy your application in a Java EE 6 application
      server (like JBoss AS 6 for example).</para>
    </note>

    <para>We recommend you use <ulink
    url="http://validator.hibernate.org">Hibernate Validator</ulink> and the
    Bean Validation specification capabilities as its integration with Java
    Persistence 2 has been standardized. Download Hibernate Validator 4 or
    above from the Hibernate website and add
    <filename>hibernate-validator.jar</filename> and
    <filename>validation-api.jar</filename> in your classpath. Alternatively
    add the following dependency in your <filename>pom.xml</filename>.</para>

    <programlisting language="XML" role="XML">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
      &lt;version&gt;${hibernate-validator-version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>If you wish to use <ulink
    url="http://search.hibernate.org">Hibernate Search</ulink>, download it
    from the Hibernate website and add
    <filename>hibernate-search.jar</filename> and its dependencies in your
    classpath. Alternatively add the following dependency in your
    <filename>pom.xml</filename>.</para>

    <programlisting language="XML" role="XML">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;
      &lt;version&gt;${hibernate-search-version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>We recommend you use the JPA 2 APIs to bootstrap Hibernate (see the
    Hibernate EntityManager documentation for more information). If you use
    Hibernate Core and its native APIs read on.</para>

    <para>If you boot Hibernate yourself, make sure to use the
    <classname>AnnotationConfiguration</classname> class instead of the
    <classname>Configuration</classname> class. Here is an example using the
    (legacy) <classname>HibernateUtil</classname> approach:</para>

    <programlisting language="JAVA" role="JAVA">package hello;

import org.hibernate.*;
import org.hibernate.cfg.*;
import test.*;
import test.animals.Dog;

public class HibernateUtil {

private static final SessionFactory sessionFactory;
    static {
        try {
            sessionFactory = new <emphasis role="bold">AnnotationConfiguration()</emphasis>
                    .configure().buildSessionFactory();
        } catch (Throwable ex) {
            // Log exception!
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static Session getSession()
            throws HibernateException {
        return sessionFactory.openSession();
    }
}
            </programlisting>

    <para>Interesting here is the use of
    <classname>AnnotationConfiguration</classname>. The packages and annotated
    classes are declared in your regular XML configuration file (usually
    <filename>hibernate.cfg.xml</filename>). Here is the equivalent of the
    above declaration:</para>

    <programlisting language="XML" role="XML">&lt;!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;
&lt;hibernate-configuration&gt;
  &lt;session-factory&gt;
    &lt;mapping package="test.animals"/&gt;
    &lt;mapping class="test.Flight"/&gt;
    &lt;mapping class="test.Sky"/&gt;
    &lt;mapping class="test.Person"/&gt;
    &lt;mapping class="test.animals.Dog"/&gt;

    &lt;mapping resource="test/animals/orm.xml"/&gt;
  &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;</programlisting>

    <para>Note that you can mix the legacy hbm.xml use and the annotation
    approach. The resource element can be either an hbm file or an EJB3 XML
    deployment descriptor. The distinction is transparent for your
    configuration process.</para>

    <para>Alternatively, you can define the annotated classes and packages
    using the programmatic API</para>

    <programlisting language="JAVA" role="JAVA">sessionFactory = new <emphasis
        role="bold">AnnotationConfiguration()
                    .addPackage("test.animals") //the fully qualified package name
                    .addAnnotatedClass(Flight.class)
                    .addAnnotatedClass(Sky.class)
                    .addAnnotatedClass(Person.class)
                    .addAnnotatedClass(Dog.class)
                    .addResource("test/animals/orm.xml")</emphasis>
                    .configure()
                    .buildSessionFactory();</programlisting>

    <para>There is no other difference in the way you use Hibernate APIs with
    annotations, except for this startup routine change or in the
    configuration file. You can use your favorite configuration method for
    other properties ( <filename>hibernate.properties</filename>,
    <filename>hibernate.cfg.xml</filename>, programmatic APIs, etc).</para>

    <note>
      <para>You can mix annotated persistent classes and classic
      <filename>hbm.cfg.xml</filename> declarations with the same
      <classname>SessionFactory</classname>. You can however not declare a
      class several times (whether annotated or through hbm.xml). You cannot
      mix configuration strategies (hbm vs annotations) in an entity hierarchy
      either.</para>
    </note>

    <para>To ease the migration process from hbm files to annotations, the
    configuration mechanism detects the mapping duplication between
    annotations and hbm files. HBM files are then prioritized over annotated
    metadata on a class to class basis. You can change the priority using
    <literal>hibernate.mapping.precedence</literal> property. The default is
    <literal>hbm, class</literal>, changing it to <literal>class,
    hbm</literal> will prioritize the annotated classes over hbm files when a
    conflict occurs.</para>
  </section>

  <section id="ann-setup-properties">
    <title id="setup-properties">Properties</title>

    <para>On top of the Hibernate Core properties, Hibernate Annotations
    reacts to the following one.<table>
        <title>Hibernate Annotations specific properties</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Property</entry>

              <entry align="center">Function</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>hibernate.cache.default_cache_concurrency_strategy</literal></entry>

              <entry><para>Setting used to give the name of the default
              <classname>org.hibernate.annotations.CacheConcurrencyStrategy</classname>
              to use when either <classname>@Cacheable</classname>
              <classname>@Cache</classname>} is used.
              <classname>@Cache(strategy="..")</classname> is used to override
              this default.</para></entry>
            </row>

            <row>
              <entry><literal>hibernate.id.new_generator_mappings</literal></entry>

              <entry><para>true or false. Setting which indicates whether or
              not the new <classname>IdentifierGenerator</classname>
              implementations are used for AUTO, TABLE and SEQUENCE. Default
              to false to keep backward compatibility.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table><note>
        <para>We recommend all new projects to use
        <code>hibernate.id.new_generator_mappings=true</code> as the new
        generators are more efficient and closer to the JPA 2 specification
        semantic. However they are not backward compatible with existing
        databases (if a sequence or a table is used for id generation).</para>
      </note></para>
  </section>

  <section>
    <title>Logging</title>

    <para>Hibernate Annotations utilizes <ulink
    url="http://www.slf4j.org/">Simple Logging Facade for Java</ulink> (SLF4J)
    in order to log various system events. SLF4J can direct your logging
    output to several logging frameworks (NOP, Simple, log4j version 1.2, JDK
    1.4 logging, JCL or logback) depending on your chosen binding. In order to
    setup logging properly you will need <filename>slf4j-api.jar</filename> in
    your classpath together with the jar file for your preferred binding -
    <filename>slf4j-log4j12.jar</filename> in the case of Log4J. See the SLF4J
    <ulink type=""
    url="http://www.slf4j.org/manual.html">documentation</ulink> for more
    detail.</para>

    <para>The logging categories interesting for Hibernate Annotations
    are:</para>

    <table>
      <title>Hibernate Annotations Log Categories</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Category</entry>

            <entry align="center">Function</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><emphasis>org.hibernate.cfg</emphasis></entry>

            <entry>Log all configuration related events (not only
            annotations).</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>For further category configuration refer to the <ulink
    url="http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#configuration-logging">Logging</ulink>
    in the Hibernate Core documentation.</para>
  </section>
</chapter>
