 ------
 Introduction
 ------
 Steve Ebersole
 ------
 20 July 2007
 ------

~~ Hibernate, Relational Persistence for Idiomatic Java
~~
~~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
~~ indicated by the @author tags or express copyright attribution
~~ statements applied by the authors.  All third-party contributions are
~~ distributed under license by Red Hat Middleware LLC.
~~
~~ This copyrighted material is made available to anyone wishing to use, modify,
~~ copy, or redistribute it subject to the terms and conditions of the GNU
~~ Lesser General Public License, as published by the Free Software Foundation.
~~
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
~~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
~~for more details.
~~
~~ You should have received a copy of the GNU Lesser General Public License
~~ along with this distribution; if not, write to:
~~ Free Software Foundation, Inc.
~~ 51 Franklin Street, Fifth Floor
~~ Boston, MA  02110-1301  USA

Hibernate Core - Relational Persistence for Idiomatic Java

    Hibernate is a powerful, high performance object/relational persistence and query
    service.  Hibernate lets you develop persistent classes following common object-oriented
    idioms such as association, inheritance, polymorphism, composition, and collections.

    Hibernate's goal is to relieve the developer from 95 percent of common data persistence related
    programming tasks, compared to manual coding with SQL and the JDBC API.  Hibernate Core for Java
    generates SQL for you, relieves you from manual JDBC result set handling and object conversion,
    and keeps your application portable to all SQL databases.  However, unlike many other persistence
    solutions, Hibernate does not hide the power of SQL from you and guarantees that your investment
    in relational technology and knowledge is as valid as always.

    Hibernate provides transparent persistence, the only requirement for a persistent class is a
    no-argument constructor. You don't even need classes, you can also persist a model using Maps of
    Maps, or just about anything else.

    Hibernate offers sophisticated query options.  You can write plain SQL, object-oriented
    HQL (Hibernate Query Language), or create programatic Criteria and Example queries.  Hibernate can
    optimize object loading all the time, with various fetching and caching options.

    Hibernate adapts to your development process, no matter if you start with a design from scratch or
    work with an existing database, and it will support any application architecture.  Combined with
    Hibernate EntityManager and Hibernate Annotations you can use Hibernate as a certified Java Persistence
    provider.

    Please visit the {{{http://hibernate.org}website}} for more information.

    Happpy Hibernating!
