<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2007, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<cache-configs>

    <!-- 
     Various JBoss Cache configurations, suitable for different caching
     uses (e.g. entities vs. queries).
     
     In all cases, TransactionManager configuration not required.
     Hibernate will plug in its own transaction manager integration. 
    -->
    
    
    <!-- A config appropriate for entity/collection caching. -->
    <cache-config name="optimistic-entity">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>

        <!-- Mode of communication with peer caches.
        
             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">optimistic-entity</attribute>
        
        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

      <!--  Eviction policy configurations. -->
      <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>   
    
    
    <!-- A config appropriate for entity/collection caching that
         uses pessimistic locking -->
    <cache-config name="pessimistic-entity">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">PESSIMISTIC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary for most 
            2nd Level Cache use cases.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Mode of communication with peer caches.
        
             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">pessimistic-entity</attribute>
        
        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

       <!--
          Indicate whether to use marshalling or not. Set this to true if you 
          are running under a scoped class loader, e.g., inside an application 
          server.
       -->
       <attribute name="UseRegionBasedMarshalling">true</attribute>
       <!-- Must match the value of "useRegionBasedMarshalling" -->
       <attribute name="InactiveOnStartup">true</attribute>

       <!-- For now. disable asynchronous RPC marshalling/sending -->
       <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>      

    <!-- A config appropriate for entity/collection caching that
         uses mvcc locking -->
    <cache-config name="mvcc-entity">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary for most 
            2nd Level Cache use cases.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Mode of communication with peer caches.
        
             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">mvcc-entity</attribute>
        
        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

       <!--
          Indicate whether to use marshalling or not. Set this to true if you 
          are running under a scoped class loader, e.g., inside an application 
          server.
       -->
       <attribute name="UseRegionBasedMarshalling">true</attribute>
       <!-- Must match the value of "useRegionBasedMarshalling" -->
       <attribute name="InactiveOnStartup">true</attribute>

       <!-- For now. disable asynchronous RPC marshalling/sending -->
       <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>      
    
    

    <!-- Same as "pessimistic-entity" but here we use REPEATABLE_READ
         instead of READ_COMMITTED. REPEATABLE_READ is only useful if the 
         application evicts/clears entities from the Hibernate Session and 
         then expects to repeatably re-read them in the same transaction.
         Otherwise, the Session's internal cache provides a repeatable-read 
         semantic. Before choosing this config, carefully read the docs
         and make sure you really need REPEATABLE_READ.
    -->
    <cache-config name="pessimistic-entity-repeatable">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">PESSIMISTIC</attribute>

        <!-- Here we  use REPEATABLE_READ. -->
        <attribute name="IsolationLevel">REPEATABLE_READ</attribute>

        <!-- Mode of communication with peer caches.
        
             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">pessimistic-entity-rr</attribute>
        
        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>    


    <!-- Same as "mvcc-entity" but here we use REPEATABLE_READ
         instead of READ_COMMITTED. REPEATABLE_READ is only useful if the 
         application evicts/clears entities from the Hibernate Session and 
         then expects to repeatably re-read them in the same transaction.
         Otherwise, the Session's internal cache provides a repeatable-read 
         semantic. Before choosing this config, carefully read the docs
         and make sure you really need REPEATABLE_READ.
    -->
    <cache-config name="mvcc-entity-repeatable">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!-- Here we  use REPEATABLE_READ. -->
        <attribute name="IsolationLevel">REPEATABLE_READ</attribute>

        <!-- Mode of communication with peer caches.
        
             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">mvcc-entity-rr</attribute>
        
        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>    

    <!-- A config appropriate for query caching. Does not replicate
         queries. DO NOT STORE TIMESTAMPS IN THIS CACHE.
    -->
    <cache-config name="local-query">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>

        <!-- Mode of communication with peer caches.
        
             LOCAL means don't communicate with other caches.
        -->
        <attribute name="CacheMode">LOCAL</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--  Eviction policy configurations. -->
        <attribute name="EvictionPolicyConfig">
          <config>
            <attribute name="wakeUpIntervalSeconds">5</attribute>
            <!-- Name of the DEFAULT eviction policy class. -->
            <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
            <!--  Cache wide default -->
            <region name="/_default_">
               <!-- Evict LRU node once we have more than this number of nodes -->
               <attribute name="maxNodes">10000</attribute>
               <!-- And, evict any node that hasn't been accessed in this many seconds -->
               <attribute name="timeToLiveSeconds">1000</attribute>
               <!-- Don't evict a node that's been accessed within this many seconds. 
                    Set this to a value greater than your max expected transaction length. -->
               <attribute name="minTimeToLiveSeconds">120</attribute>
            </region>
            <!--  Don't ever evict modification timestamps -->
            <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
          </config>
       </attribute>

    </cache-config>   
    
    

    <!-- A query cache that replicates queries. Replication is asynchronous.
         DO NOT STORE TIMESTAMPS IN THIS CACHE as no initial state transfer
         is performed.
    -->
    <cache-config name="replicated-query">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>

        <!-- Mode of communication with peer caches.
        
             REPL_ASYNC means replicate but sender does not block waiting for
             peers to acknowledge applying the change. Valid for queries as
             the timestamp cache mechanism will allow Hibernate to discard
             out-of-date queries.
        -->
        <attribute name="CacheMode">REPL_ASYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">replicated-query</attribute>
        
        <!-- Use a UDP (multicast) based stack -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server. Default is "false".
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>     
    
    

    <!-- Optimized for timestamp caching. A clustered timestamp cache
         is required if query caching is used, even if the query cache
         itself is configured with CacheMode=LOCAL.
    -->
    <cache-config name="timestamps-cache">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Cannot be INVALIDATION. ASYNC for improved performance. -->
        <attribute name="CacheMode">REPL_ASYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">timestamp-cache</attribute>
        
        <!-- Use a UDP (multicast) based stack -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server. Default is "false".
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

      <!--  Eviction policy configurations. -->
      <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>  
    
    

    <!-- A config appropriate for a cache that's shared for
         entity, collection, query and timestamp caching. Not an advised
         configuration, since it requires cache mode REPL_SYNC, which is the 
         least efficient mode. Also requires a full state transfer at startup,
         which can be expensive. Uses optimistic locking -->
    <cache-config name="optimistic-shared">

        <!-- Node locking scheme:
                OPTIMISTIC
                MVCC (default)
        -->
        <attribute name="NodeLockingScheme">OPTIMISTIC</attribute>

        <!-- Must use REPL since used for timestamp caching. 
             Must use SYNC to maintain cache coherency for entities.
        -->
        <attribute name="CacheMode">REPL_SYNC</attribute>
        
        <!-- With OPTIMISTIC  with replication we need to use synchronous commits. -->
        <attribute name="SyncCommitPhase">true</attribute>
        <attribute name="SyncRollbackPhase">true</attribute>
        
        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">optimistic-shared</attribute>
        
        <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response.
        -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
          Indicate whether to use marshalling or not. Set this to true if you are running under a scoped
          class loader, e.g., inside an application server. Default is "false".
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

      <!--  Eviction policy configurations. -->
      <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>   
    
    

    <!-- A config appropriate for a cache that's shared for
         entity, collection, query and timestamp caching. Not an advised
         configuration, since it requires cache mode REPL_SYNC, which is the 
         least efficient mode. Also requires a full state transfer at startup,
         which can be expensive. Uses pessmistic locking.
    -->
    <cache-config name="pessimistic-shared">

        <!-- TransactionManager configuration not required for Hibernate!
             Hibernate will plug in its own transaction manager integration. 
        -->

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">PESSIMISTIC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary for most 
            2nd Level Cache use cases.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Must use REPL since used for timestamp caching. 
             Must use SYNC to maintain cache coherency for entities.
        -->
        <attribute name="CacheMode">REPL_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">pessimistic-shared</attribute>
        
        <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response.
        -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>   
    
    <!-- A config appropriate for a cache that's shared for
         entity, collection, query and timestamp caching. Not an advised
         configuration, since it requires cache mode REPL_SYNC, which is the 
         least efficient mode. Also requires a full state transfer at startup,
         which can be expensive. Uses mvcc locking.
    -->
    <cache-config name="mvcc-shared">

        <!-- TransactionManager configuration not required for Hibernate!
             Hibernate will plug in its own transaction manager integration. 
        -->

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary for most 
            2nd Level Cache use cases.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Must use REPL since used for timestamp caching. 
             Must use SYNC to maintain cache coherency for entities.
        -->
        <attribute name="CacheMode">REPL_SYNC</attribute>
        <attribute name="SyncCommitPhase">true</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">mvcc-shared</attribute>
        
        <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response.
        -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
           Indicate whether to use marshalling or not. Set this to true if you 
           are running under a scoped class loader, e.g., inside an application 
           server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>   

    <!-- Same as "pessimistic-shared" but here we use REPEATABLE_READ
         instead of READ_COMMITTED. REPEATABLE_READ is only useful if the 
         application evicts/clears entities from the Hibernate Session and 
         then expects to repeatably re-read them in the same transaction.
         Otherwise, the Session's internal cache provides a repeatable-read 
         semantic. Before choosing this config, carefully read the docs
         and make sure you really need REPEATABLE_READ.
    -->
    <cache-config name="pessimistic-shared-repeatable">

        <!-- TransactionManager configuration not required for Hibernate!
             Hibernate will plug in its own transaction manager integration. 
        -->

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">PESSIMISTIC</attribute>

        <!-- Here we  use REPEATABLE_READ. -->
        <attribute name="IsolationLevel">REPEATABLE_READ</attribute>

        <!-- Must use REPL since used for timestamp caching. 
             Must use SYNC to maintain cache coherency for entities.
        -->
        <attribute name="CacheMode">REPL_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">pessimistic-shared-rr</attribute>
        
        <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response.
        -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
          Indicate whether to use marshalling or not. Set this to true if you 
          are running under a scoped class loader, e.g., inside an application 
          server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>
    
    <!-- Same as "mvcc-shared" but here we use REPEATABLE_READ
         instead of READ_COMMITTED. REPEATABLE_READ is only useful if the 
         application evicts/clears entities from the Hibernate Session and 
         then expects to repeatably re-read them in the same transaction.
         Otherwise, the Session's internal cache provides a repeatable-read 
         semantic. Before choosing this config, carefully read the docs
         and make sure you really need REPEATABLE_READ.
    -->
    <cache-config name="mvcc-shared-repeatable">

        <!-- TransactionManager configuration not required for Hibernate!
             Hibernate will plug in its own transaction manager integration. 
        -->

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!-- Here we  use REPEATABLE_READ. -->
        <attribute name="IsolationLevel">REPEATABLE_READ</attribute>

        <!-- Must use REPL since used for timestamp caching. 
             Must use SYNC to maintain cache coherency for entities.
        -->
        <attribute name="CacheMode">REPL_SYNC</attribute>
        <attribute name="SyncCommitPhase">true</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">mvcc-shared-rr</attribute>
        
        <!-- Use a UDP (multicast) based stack. Need JGroups flow control (FC)
             because timestamp communication will not require a synchronous response.
        -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Used for timestamps, so must fetch state. -->
        <attribute name="FetchInMemoryState">true</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>
        
        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
          Indicate whether to use marshalling or not. Set this to true if you 
          are running under a scoped class loader, e.g., inside an application 
          server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

       <!--  Eviction policy configurations. -->
       <attribute name="EvictionPolicyConfig">
        <config>
          <attribute name="wakeUpIntervalSeconds">5</attribute>
          <!-- Name of the DEFAULT eviction policy class. -->
          <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          <!--  Cache wide default -->
          <region name="/_default_">
            <!-- Evict LRU node once we have more than this number of nodes -->
            <attribute name="maxNodes">10000</attribute>
            <!-- And, evict any node that hasn't been accessed in this many seconds -->
            <attribute name="timeToLiveSeconds">1000</attribute>
            <!-- Don't evict a node that's been accessed within this many seconds. 
                 Set this to a value greater than your max expected transaction length. -->
            <attribute name="minTimeToLiveSeconds">120</attribute>
          </region>
          <!--  Don't ever evict modification timestamps -->
          <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
        </config>
     </attribute>

    </cache-config>
</cache-configs>
