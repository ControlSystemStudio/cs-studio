# translation of Collection_Mapping.po to 
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# translation of Collection_Mapping.po to
# Language /mnt/hgfs/base/Hibernate/Reference translations for PACKAGE package.
# Copyright (C) 2006, 2007 Free Software Foundation, Inc.
# Automatically generated, 2006.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
# , 2007.
#
msgid ""
msgstr ""
"Project-Id-Version: Collection_Mapping\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-02-11T05:38:15\n"
"PO-Revision-Date: 2007-02-26 10:27+1000\n"
"Last-Translator: \n"
"Language-Team:  <de@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.9.1\n"

#. Tag: title
#, no-c-format
msgid "Persistent Classes"
msgstr "Persistente Klassen"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Persistent classes are classes in an application that implement the entities "
"of the business problem (e.g. Customer and Order in an E-commerce "
"application). Not all instances of a persistent class are considered to be "
"in the persistent state. For example, an instance can instead be transient "
"or detached."
msgstr ""
"Unter persistenten Klassen versteht man diejenigen Klassen in einer "
"Anwendung, die die Entities des Unternehmensproblems (z.B. Kunde und "
"Bestellung in einer E-Commerce Applikation) implementieren. Nicht alle "
"Instanzen einer persistenten Klasse werden als im persistenten Status "
"befindlich angesehen - eine Instanz kann statt dessen auch kurzlebig "
"(\"transient\") oder abgesetzt (\"detached\") sein."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Hibernate works best if these classes follow some simple rules, also known "
"as the Plain Old Java Object (POJO) programming model. However, none of "
"these rules are hard requirements. Indeed, Hibernate3 assumes very little "
"about the nature of your persistent objects. You can express a domain model "
"in other ways (using trees of <literal>Map</literal> instances, for example)."
msgstr ""
"Hibernate funktioniert am besten, wenn diese Klassen einigen einfachen "
"Regeln folgen, die auch als \"Plain Old Java Object\" (POJO) "
"Programmiermodell bekannt sind. Keine dieser Regeln sind jedoch feste "
"Anforderungen. Tatsächlich setzt Hibernate3 sehr wenig hinsichtlich des "
"Charakters Ihrer persistenten Objekte voraus. Sie können ein Domain-Modell "
"auf andere Weise ausdrücken: Zum Beispiel unter Verwendung von <literal>Map</"
"literal>-Instanzen-Trees."

#. Tag: title
#, no-c-format
msgid "A simple POJO example"
msgstr "Ein einfaches POJO-Beispiel"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Most Java applications require a persistent class representing felines. For "
"example:"
msgstr ""
"Die meisten Java-Anwendungen erfordern eine persistente Klasse, die Katzen "
"(\"felines\") repräsentiert."

#. Tag: para
#, no-c-format
msgid ""
"The four main rules of persistent classes are explored in more detail in the "
"following sections."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Implement a no-argument constructor"
msgstr "Implementierung eines \"No-Argument\"-Konstruktors"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>Cat</literal> has a no-argument constructor. All persistent classes "
"must have a default constructor (which can be non-public) so that Hibernate "
"can instantiate them using <literal>Constructor.newInstance()</literal>. It "
"is recommended that you have a default constructor with at least "
"<emphasis>package</emphasis> visibility for runtime proxy generation in "
"Hibernate."
msgstr ""
"<literal>Cat</literal> besitzt einen \"No-Argument\"-Konstruktor. Alle "
"persistenten Klassen müssen über einen Standard-Konstruktor verfügen (der "
"nicht-öffentlich sein darf) damit Hibernate sie unter Verwendung von "
"<literal>Constructor.newInstance()</literal> instantiieren kann. Wir "
"empfehlen dringend den Einsatz eines Standard-Konstruktors, der zumindest "
"<emphasis>Paket</emphasis>-Sichtbarkeit für die Proxy-Generierung zur "
"Runtime in Hibernate besitzt."

#. Tag: title
#, no-c-format
msgid "Provide an identifier property (optional)"
msgstr "Bereitstellung einer Bezeichner-Property (optional)"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>Cat</literal> has a property called <literal>id</literal>. This "
"property maps to the primary key column of a database table. The property "
"might have been called anything, and its type might have been any primitive "
"type, any primitive \"wrapper\" type, <literal>java.lang.String</literal> or "
"<literal>java.util.Date</literal>. If your legacy database table has "
"composite keys, you can use a user-defined class with properties of these "
"types (see the section on composite identifiers later in the chapter.)"
msgstr ""
"<literal>Cat</literal> besitzt eine Property mit Namen <literal>id</"
"literal>. Diese Property mappt zur Spalte des Primärschlüssels der "
"Datenbanktabelle. Die Property könnte auch einen beliebigen Namen tragen und "
"könnte irgendeinen primitiven Typ besitzen, etwa einen primitiven \"Wrapper"
"\"-Typ, <literal>java.lang.String</literal> oder <literal>java.util.Date</"
"literal>. (Falls Ihre Legacy-Datenbanktabelle zusammengesetzte Schlüssel "
"besitzt, können Sie sogar eine benutzerdefinierte Klasse mit Properties "
"dieser Typen verwenden - wir gehen in einem späteren Abschnitt auf "
"zusammengesetzte Bezeichner ein)."

#. Tag: para
#, no-c-format
msgid ""
"The identifier property is strictly optional. You can leave them off and let "
"Hibernate keep track of object identifiers internally. We do not recommend "
"this, however."
msgstr ""
"Die Bezeichner-Property ist völlig optional. Sie können sie ausgeschaltet "
"lassen und Hibernate verfolgt die Objektbezeichner intern. Allerdings "
"empfehlen wir diese Einstellung nicht."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"In fact, some functionality is available only to classes that declare an "
"identifier property:"
msgstr ""
"Tatsächlich sind einige Funktionalitäten nur für Klassen mit deklarierter "
"Bezeichner-Property verfügbar:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Transitive reattachment for detached objects (cascade update or cascade "
"merge) - see <xref linkend=\"objectstate-transitive\" />"
msgstr ""
"Transitives Reattachment für abgesetzte Objekte (in Reihe erfolgende "
"Aktualisierung oder in Reihe erfolgendes Zusammenfügen (auch: \"Cascade "
"Update\" bzw. \"Cascade Merge\") - siehe"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>Session.saveOrUpdate()</literal>"
msgstr "Session.saveOrUpdate()"

#. Tag: para
#, fuzzy, no-c-format
msgid "<literal>Session.merge()</literal>"
msgstr "Session.merge()"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"We recommend that you declare consistently-named identifier properties on "
"persistent classes and that you use a nullable (i.e., non-primitive) type."
msgstr ""
"Wir empfehlen die Deklarierung konsistent benannter Bezeichner-Properties "
"bei den persistenten Klassen. Ein nullbarer (\"nullable\" - d.h. nicht-"
"primitiver) Typ ist ebenfalls zu bevorzugen."

#. Tag: title
#, no-c-format
msgid "Prefer non-final classes (optional)"
msgstr "Bevorzugung nicht-finaler Klassen (optional)"

#. Tag: para
#, no-c-format
msgid ""
"A central feature of Hibernate, <emphasis>proxies</emphasis>, depends upon "
"the persistent class being either non-final, or the implementation of an "
"interface that declares all public methods."
msgstr ""
"Ein zentrales Feature von Hibernate, <emphasis>Proxies</emphasis>, hängt "
"davon ab, ob die persistente Klasse entweder nicht-final oder der alle "
"Methoden als öffentlich erklärenden Implemetierung eines Interface."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You can persist <literal>final</literal> classes that do not implement an "
"interface with Hibernate. You will not, however, be able to use proxies for "
"lazy association fetching which will ultimately limit your options for "
"performance tuning."
msgstr ""
"Sie können <literal>final</literal>e Klassen, die kein Interface mit "
"Hibernate implementieren, persistieren, aber Sie werden keine Proxies für "
"das \"Lazy Fetching\" von Assoziationen (d.h. das Nachladen assoziierter "
"Objekte bei Bedarf) verwenden können - was Ihre Optionen bei der "
"Feinabstimmung der Performance einschränkt."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You should also avoid declaring <literal>public final</literal> methods on "
"the non-final classes. If you want to use a class with a <literal>public "
"final</literal> method, you must explicitly disable proxying by setting "
"<literal>lazy=\"false\"</literal>."
msgstr ""
"Sie sollten es vermeiden, <literal>public final</literal>-Methoden an den "
"nicht-finalen Klassen zu deklarieren. Wenn Sie eine Klasse mit einer "
"<literal>public final</literal>-Methode verwenden wollen, müssen Sie "
"Proxying durch Setzen von <literal>lazy=\"false\"</literal> explizit "
"deaktivieren."

#. Tag: title
#, no-c-format
msgid "Declare accessors and mutators for persistent fields (optional)"
msgstr ""
"Zugriffsberechtigte und Mutatoren für persistente Felder deklarieren "
"(optional)"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>Cat</literal> declares accessor methods for all its persistent "
"fields. Many other ORM tools directly persist instance variables. It is "
"better to provide an indirection between the relational schema and internal "
"data structures of the class. By default, Hibernate persists JavaBeans style "
"properties and recognizes method names of the form <literal>getFoo</"
"literal>, <literal>isFoo</literal> and <literal>setFoo</literal>. If "
"required, you can switch to direct field access for particular properties."
msgstr ""
"<literal>Cat</literal> deklariert die Zugriffsberechtigungsmethoden für alle "
"seine persistenten Felder. Viele andere ORM-Tools persistieren "
"Instanzvariablen direkt. Unserer Ansicht nach ist es besser, eine "
"Indirektion zwischen dem relationalen Schema und internen Datenstrukturen "
"der Klasse bereitzustellen. In der Standardeinstellung persistiert Hibernate "
"Properties im JavaBeans-Stil und erkennt Methodennamen in der Form "
"<literal>getFoo</literal>, <literal>isFoo</literal> und <literal>setFoo</"
"literal>. Bei Bedarf können Sie für bestimmte Properties zu direktem "
"Feldzugriff wechseln."

#. Tag: para
#, no-c-format
msgid ""
"Properties need <emphasis>not</emphasis> be declared public - Hibernate can "
"persist a property with a default, <literal>protected</literal> or "
"<literal>private</literal> get / set pair."
msgstr ""
"Properties müssen <emphasis>nicht</emphasis> als öffentlich deklariert "
"werden - Hibernate kann eine Property als <literal>protected</literal> oder "
"<literal>private</literal> \"Get\"-/ \"Set\"-Paar persistieren."

#. Tag: title
#, no-c-format
msgid "Implementing inheritance"
msgstr "Implementierung der Vererbung"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A subclass must also observe the first and second rules. It inherits its "
"identifier property from the superclass, <literal>Cat</literal>. For example:"
msgstr ""
"Eine Subklasse muss ebenfalls die ersten und zweiten Regeln berücksichtigen. "
"Sie erbt ihre Bezeichner-Property von der Superklasse <literal>Cat</literal>."

#. Tag: title
#, fuzzy, no-c-format
msgid ""
"Implementing <literal>equals()</literal> and <literal>hashCode()</literal>"
msgstr ""
"Sie müssen die <literal>equals()</literal> and <literal>hashCode()</literal>-"
"Methoden außer Kraft setzen, falls Sie"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"You have to override the <literal>equals()</literal> and <literal>hashCode()"
"</literal> methods if you:"
msgstr ""
"Sie müssen die <literal>equals()</literal> and <literal>hashCode()</literal>-"
"Methoden außer Kraft setzen, falls Sie"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"intend to put instances of persistent classes in a <literal>Set</literal> "
"(the recommended way to represent many-valued associations); <emphasis>and</"
"emphasis>"
msgstr ""
"vorhaben, die Instanzen persistenter Klassen in einem <literal>Set</literal> "
"unterzubringen (die empfohlene Art mehrwertige Assoziationen zu "
"repräsentieren) <emphasis>und</emphasis>"

#. Tag: para
#, no-c-format
msgid "intend to use reattachment of detached instances"
msgstr "planen, den Wiederanbindung abgesetzter Instanzen zu verwenden"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Hibernate guarantees equivalence of persistent identity (database row) and "
"Java identity only inside a particular session scope. When you mix instances "
"retrieved in different sessions, you must implement <literal>equals()</"
"literal> and <literal>hashCode()</literal> if you wish to have meaningful "
"semantics for <literal>Set</literal>s."
msgstr ""
"Hibernate garantiert nur die Äquivalenz der persistenten Identität "
"(Datenbankreihe) und der Java-Identität innerhalb eines bestimmten "
"Gültigkeitsbreichs einer Session. Sobald die Instanzen verschiedener "
"Sessions zusammenkommen, müssen <literal>equals()</literal> und "
"<literal>hashCode()</literal> implementiert werden, wenn wir uns eine "
"aussagekräftige Semantik für <literal>Set</literal>s wünschen."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The most obvious way is to implement <literal>equals()</literal>/"
"<literal>hashCode()</literal> by comparing the identifier value of both "
"objects. If the value is the same, both must be the same database row, "
"because they are equal. If both are added to a <literal>Set</literal>, you "
"will only have one element in the <literal>Set</literal>). Unfortunately, "
"you cannot use that approach with generated identifiers. Hibernate will only "
"assign identifier values to objects that are persistent; a newly created "
"instance will not have any identifier value. Furthermore, if an instance is "
"unsaved and currently in a <literal>Set</literal>, saving it will assign an "
"identifier value to the object. If <literal>equals()</literal> and "
"<literal>hashCode()</literal> are based on the identifier value, the hash "
"code would change, breaking the contract of the <literal>Set</literal>. See "
"the Hibernate website for a full discussion of this problem. This is not a "
"Hibernate issue, but normal Java semantics of object identity and equality."
msgstr ""
"Die offensichtlichste Weise <literal>equals()</literal>/<literal>hashCode()</"
"literal> zu implementieren, ist mittels des Vergleichs des Bezeichnerwerts "
"beider Objekte. Ist der Wert identisch, so müssen die beiden sich in "
"derselben Datenbankreihe befinden und sind daher gleichwertig (werden beide "
"einem <literal>Set</literal> hinzugefügt, so existiert lediglich ein Element "
"im <literal>Set</literal>). Leider kann diese Vorgehensweise nicht bei "
"generierten Bezeichnern verwendet werden! Hibernate ordnet nur persistenten "
"Objekten Bezeichnerwerte zu, und eine neu erstellte Instanz wird keinen "
"Bezeichnerwert besitzen! Desweiteren wird einer noch ungespeicherten "
"Instanz, die Teil eines <literal>Set</literal> ist, bei Speicherung ein "
"Bezeichnerwert zum Objekt zugeordnet. Falls <literal>equals()</literal> und "
"<literal>hashCode()</literal> auf dem Bezeichnerwert basieren, so würde sich "
"der Hash-Code ändern und dadurch das Interface (sog. \"contract\") des "
"<literal>Set</literal> verletzen. Eine ausführliche Darstellung dieses "
"Problems finden Sie auf der Website von Hibernate. Bitte beachten Sie, dass "
"dies nicht auf Hibernate selbst zurückzuführen ist, sondern auf regulärer "
"Java-Semantik hinsichtlich Objektidentität und Gleichheit basiert."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"It is recommended that you implement <literal>equals()</literal> and "
"<literal>hashCode()</literal> using <emphasis>Business key equality</"
"emphasis>. Business key equality means that the <literal>equals()</literal> "
"method compares only the properties that form the business key. It is a key "
"that would identify our instance in the real world (a <emphasis>natural</"
"emphasis> candidate key):"
msgstr ""
"Wir empfehlen die Implementierung von <literal>equals()</literal> und "
"<literal>hashCode()</literal> unter Verwendung von <emphasis>\"Business Key "
"Equality\"</emphasis>. \"Business Key Equality\" bedeutet, dass die "
"<literal>equals()</literal>-Methode nur die Properties, aus denen sich der "
"\"Business Key\" zusammensetzt, miteinander vergleicht. Der Key (Schlüssel) "
"identifiziert Ihre Instanz in der Realität (ein <emphasis>natürlicher</"
"emphasis> Schlüsselkandidat bzw. \"Candidate Key\"):"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"A business key does not have to be as solid as a database primary key "
"candidate (see <xref linkend=\"transactions-basics-identity\" />). Immutable "
"or unique properties are usually good candidates for a business key."
msgstr ""
"Bitte beachten Sie, dass ein \"Business Key\" nicht so beständig wie ein "
"Primärschlüsselkandidat der Datenbank sein muss (siehe <xref linkend="
"\"transactions-basics-identity\"/>). Unveränderbare oder eindeutige "
"Properties sind in der Regel eine gute Wahl für einen Business Key."

#. Tag: title
#, no-c-format
msgid "Dynamic models"
msgstr "Dynamische Modelle"

#. Tag: title
#, no-c-format
msgid "Note"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<emphasis>The following features are currently considered experimental and "
"may change in the near future.</emphasis>"
msgstr ""
"Bitte beachten Sie, dass die folgenden Features als experimentell gelten und "
"sich in naher Zukunft ändern können."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Persistent entities do not necessarily have to be represented as POJO "
"classes or as JavaBean objects at runtime. Hibernate also supports dynamic "
"models (using <literal>Map</literal>s of <literal>Map</literal>s at runtime) "
"and the representation of entities as DOM4J trees. With this approach, you "
"do not write persistent classes, only mapping files."
msgstr ""
"Persistente Entities müssen zur Runtime nicht unbedingt als POJO-Klassen "
"oder JavaBean-Objekte repräsentiert werden. Hibernate unterstützt auch "
"dynamische Modelle (unter Verwendung von <literal>Map</literal>s von "
"<literal>Map</literal>s zur Runtime) und die Repräsentation von Entities als "
"DOM4J-Trees. Bei dieser Vorgehensweise schreiben Sie keine persistenten "
"Klassen, sondern nur Mapping-Dateien."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"By default, Hibernate works in normal POJO mode. You can set a default "
"entity representation mode for a particular <literal>SessionFactory</"
"literal> using the <literal>default_entity_mode</literal> configuration "
"option (see <xref linkend=\"configuration-optional-properties\" />)."
msgstr ""
"In der Standardeinstellung arbeitet Hibernate im regulären POJO-Modus. Sie "
"können einen Standard-Entity-Repräsentationsmodus für eine bestimmte "
"<literal>SessionFactory</literal> unter Verwendung der "
"<literal>default_entity_mode</literal>-Konfigurationsoption einstellen "
"(siehe <xref linkend=\"configuration-optional-properties\"/>)."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"The following examples demonstrate the representation using <literal>Map</"
"literal>s. First, in the mapping file an <literal>entity-name</literal> has "
"to be declared instead of, or in addition to, a class name:"
msgstr ""
"Das folgende Beispiel stellt die Repräsentation unter Verwendung von "
"<literal>Map</literal>s dar. Zuerst muss in der Mapping-Datei ein "
"<literal>entity-name</literal> anstelle von (oder zusätzlich zu) einem "
"Klassennamen deklariert werden:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Even though associations are declared using target class names, the target "
"type of associations can also be a dynamic entity instead of a POJO."
msgstr ""
"Bitte bachten Sie, dass der Zieltyp einer Assoziation auch eine dynamische "
"Entity statt POJO sein kann, obwohl Assoziationen unter Verwendung von Ziel-"
"Klassennamen deklariert werden."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"After setting the default entity mode to <literal>dynamic-map</literal> for "
"the <literal>SessionFactory</literal>, you can, at runtime, work with "
"<literal>Map</literal>s of <literal>Map</literal>s:"
msgstr ""
"Nachdem der Standard für den Entity-Modus auf <literal>dynamic-map</literal> "
"für die <literal>SessionFactory</literal> gesetzt ist, können wir zur "
"Runtime mit <literal>Map</literal>s von <literal>Map</literal>s arbeiten:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"One of the main advantages of dynamic mapping is quick turnaround time for "
"prototyping, without the need for entity class implementation. However, you "
"lose compile-time type checking and will likely deal with many exceptions at "
"runtime. As a result of the Hibernate mapping, the database schema can "
"easily be normalized and sound, allowing to add a proper domain model "
"implementation on top later on."
msgstr ""
"Die Vorteile des dynamischen Mappings liegen in der schnellen Durchlaufzeit "
"für Musteranwendungsverfahren (sog. \"Turnaround-Time\" für \"Prototyping\") "
"ohne die Notwendigkeit Entity-Klassen zu implementieren. Sie verlieren "
"jedoch durch die Typ-Prüfung Kompilierungszeit, und es ist wahrscheinlich, "
"dass es bei der Runtime zu zahlreichen Ausnahmemeldungen kommt. Dank des "
"Mappings von Hibernate kann das Datenbankschema bequem vereinheitlicht und "
"stabilisiert werden, so dass eine ordnungsgemäße Implementierung des Domain-"
"Modells später problemlos hinzugefügt werden kann."

#. Tag: para
#, no-c-format
msgid ""
"Entity representation modes can also be set on a per <literal>Session</"
"literal> basis:"
msgstr ""
"Die Modi für die Entity Repräsentation können auch auf per <literal>Session</"
"literal>-Basis eingestellt werden:"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Please note that the call to <literal>getSession()</literal> using an "
"<literal>EntityMode</literal> is on the <literal>Session</literal> API, not "
"the <literal>SessionFactory</literal>. That way, the new <literal>Session</"
"literal> shares the underlying JDBC connection, transaction, and other "
"context information. This means you do not have to call <literal>flush()</"
"literal> and <literal>close()</literal> on the secondary <literal>Session</"
"literal>, and also leave the transaction and connection handling to the "
"primary unit of work."
msgstr ""
"Bitte beachten Sie, dass der Aufruf <literal>getSession()</literal> unter "
"Verwendung von  <literal>EntityMode</literal> am <literal>Session</literal>-"
"API und nicht an der <literal>SessionFactory</literal> erfolgt. Auf diese "
"Weise teilt sich die <literal>Session</literal> die zu Grunde liegende JDBC-"
"Verbindung, die Transaktion und andere Kontextinformationen. Das bedeutet, "
"dass Sie in der sekundären <literal>Session</literal> nicht <literal>flush()"
"</literal> und <literal>close()</literal> aufrufen müssen und auch die "
"Transaktion und Verbindung der primären Arbeitseinheit überlassen können."

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"More information about the XML representation capabilities can be found in "
"<xref linkend=\"xml\" />."
msgstr ""
"Weitere Informationen zum Leistungsvermögen der XML-Repräsentation finden "
"Sie unter <xref linkend=\"xml\"/>."

#. Tag: title
#, no-c-format
msgid "Tuplizers"
msgstr "Tuplizer"

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"<literal>org.hibernate.tuple.Tuplizer</literal>, and its sub-interfaces, are "
"responsible for managing a particular representation of a piece of data "
"given that representation's <literal>org.hibernate.EntityMode</literal>. If "
"a given piece of data is thought of as a data structure, then a tuplizer is "
"the thing that knows how to create such a data structure and how to extract "
"values from and inject values into such a data structure. For example, for "
"the POJO entity mode, the corresponding tuplizer knows how create the POJO "
"through its constructor. It also knows how to access the POJO properties "
"using the defined property accessors."
msgstr ""
"<literal>org.hibernate.tuple.Tuplizer</literal> und seine untergeordneten "
"Schnittstellen sind angesichts des <literal>org.hibernate.EntityMode</"
"literal> dieser Repräsentation für die Verwaltung eines bestimmten Teils der "
"Datenrepräsentation verantwortlich. Wenn man sich einen bestimmten Teil von "
"Daten als Datenstruktur vorstellt, so weiß der \"Tuplizer\" wie eine solche "
"Datenstruktur erstellt wird und wie Werte in eine solche extrahiert und "
"eingeführt werden. Beim POJO Entity-Modus zum Beispiel weiß der "
"entsprechende Tuplizer wie POJO durch den Konstruktor erstellt wird und wie "
"mittels definierter Property-Accessor-Methoden auf die POJO-Properties "
"zugegriffen wird. Es existieren auf hoher Ebene zwei Typen von Tuplizern, "
"die in den <literal>org.hibernate.tuple.entity.EntityTuplizer</literal> und "
"<literal>org.hibernate.tuple.component.ComponentTuplizer</literal> "
"Interfaces repräsentiert sind. <literal>EntityTuplizer</literal>s sind für "
"die Verwaltung der oben genannten Schnittstellen hinsichtlich der Entities "
"verantwortlich, während <literal>ComponentTuplizer</literal>s dasselbe für "
"Komponenten übernehmen."

#. Tag: para
#, no-c-format
msgid ""
"There are two high-level types of Tuplizers, represented by the <literal>org."
"hibernate.tuple.entity.EntityTuplizer</literal> and <literal>org.hibernate."
"tuple.component.ComponentTuplizer</literal> interfaces. "
"<literal>EntityTuplizer</literal>s are responsible for managing the above "
"mentioned contracts in regards to entities, while "
"<literal>ComponentTuplizer</literal>s do the same for components."
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid ""
"Users can also plug in their own tuplizers. Perhaps you require that a "
"<literal>java.util.Map</literal> implementation other than <literal>java."
"util.HashMap</literal> be used while in the dynamic-map entity-mode. Or "
"perhaps you need to define a different proxy generation strategy than the "
"one used by default. Both would be achieved by defining a custom tuplizer "
"implementation. Tuplizer definitions are attached to the entity or component "
"mapping they are meant to manage. Going back to the example of our customer "
"entity:"
msgstr ""
"Benutzer können auch ihre eigenen Tuplizer einbinden. Es ist möglich, dass "
"Sie während des \"dynamic-map\" Entity-Modus eine andere Implementierung von "
"<literal>java.util.Map</literal> als <literal>java.util.HashMap</literal> "
"benötigen oder eine andere Strategie für die Proxy-Generierung definieren "
"müssen als die im Standard vorgegebene. Beide würden durch die Definition "
"einer anwenderdefinierten Tuplizer-Implementierung erzielt. Tuplizer-"
"Definitionen sind der Entity oder dem Komponenten-Mapping hinzugefügt, die "
"sie verwalten sollen. Sehen wir uns noch einmal das Beispiel unserer Kunden-"
"Entity an:"

#. Tag: title
#, fuzzy, no-c-format
msgid "EntityNameResolvers"
msgstr "EntityResolver"

#. Tag: para
#, no-c-format
msgid ""
"The <interfacename>org.hibernate.EntityNameResolver</interfacename> "
"interface is a contract for resolving the entity name of a given entity "
"instance. The interface defines a single method "
"<methodname>resolveEntityName</methodname> which is passed the entity "
"instance and is expected to return the appropriate entity name (null is "
"allowed and would indicate that the resolver does not know how to resolve "
"the entity name of the given entity instance). Generally speaking, an "
"<interfacename>org.hibernate.EntityNameResolver</interfacename> is going to "
"be most useful in the case of dynamic models. One example might be using "
"proxied interfaces as your domain model. The hibernate test suite has an "
"example of this exact style of usage under the <package>org.hibernate.test."
"dynamicentity.tuplizer2</package>. Here is some of the code from that "
"package for illustration."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In order to register an <interfacename>org.hibernate.EntityNameResolver</"
"interfacename> users must either:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Implement a custom <link linkend=\"persistent-classes-tuplizers\">Tuplizer</"
"link>, implementing the <methodname>getEntityNameResolvers</methodname> "
"method."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Register it with the <classname>org.hibernate.impl.SessionFactoryImpl</"
"classname> (which is the implementation class for <interfacename>org."
"hibernate.SessionFactory</interfacename>) using the "
"<methodname>registerEntityNameResolver</methodname> method."
msgstr ""

#, fuzzy
#~ msgid ""
#~ "<![CDATA[package eg;\n"
#~ "import java.util.Set;\n"
#~ "import java.util.Date;\n"
#~ "\n"
#~ "public class Cat {\n"
#~ "    private Long id; // identifier\n"
#~ "\n"
#~ "    private Date birthdate;\n"
#~ "    private Color color;\n"
#~ "    private char sex;\n"
#~ "    private float weight;\n"
#~ "    private int litterId;\n"
#~ "\n"
#~ "    private Cat mother;\n"
#~ "    private Set kittens = new HashSet();\n"
#~ "\n"
#~ "    private void setId(Long id) {\n"
#~ "        this.id=id;\n"
#~ "    }\n"
#~ "    public Long getId() {\n"
#~ "        return id;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setBirthdate(Date date) {\n"
#~ "        birthdate = date;\n"
#~ "    }\n"
#~ "    public Date getBirthdate() {\n"
#~ "        return birthdate;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setWeight(float weight) {\n"
#~ "        this.weight = weight;\n"
#~ "    }\n"
#~ "    public float getWeight() {\n"
#~ "        return weight;\n"
#~ "    }\n"
#~ "\n"
#~ "    public Color getColor() {\n"
#~ "        return color;\n"
#~ "    }\n"
#~ "    void setColor(Color color) {\n"
#~ "        this.color = color;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setSex(char sex) {\n"
#~ "        this.sex=sex;\n"
#~ "    }\n"
#~ "    public char getSex() {\n"
#~ "        return sex;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setLitterId(int id) {\n"
#~ "        this.litterId = id;\n"
#~ "    }\n"
#~ "    public int getLitterId() {\n"
#~ "        return litterId;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setMother(Cat mother) {\n"
#~ "        this.mother = mother;\n"
#~ "    }\n"
#~ "    public Cat getMother() {\n"
#~ "        return mother;\n"
#~ "    }\n"
#~ "    void setKittens(Set kittens) {\n"
#~ "        this.kittens = kittens;\n"
#~ "    }\n"
#~ "    public Set getKittens() {\n"
#~ "        return kittens;\n"
#~ "    }\n"
#~ "    \n"
#~ "    // addKitten not needed by Hibernate\n"
#~ "    public void addKitten(Cat kitten) {\n"
#~ "            kitten.setMother(this);\n"
#~ "        kitten.setLitterId( kittens.size() ); \n"
#~ "        kittens.add(kitten);\n"
#~ "    }\n"
#~ "}]]>"
#~ msgstr ""
#~ "package eg;\n"
#~ "import java.util.Set;\n"
#~ "import java.util.Date;\n"
#~ "\n"
#~ "public class Cat {\n"
#~ "    private Long id; // identifier\n"
#~ "\n"
#~ "    private Date birthdate;\n"
#~ "    private Color color;\n"
#~ "    private char sex;\n"
#~ "    private float weight;\n"
#~ "    private int litterId;\n"
#~ "\n"
#~ "    private Cat mother;\n"
#~ "    private Set kittens = new HashSet();\n"
#~ "\n"
#~ "    private void setId(Long id) {\n"
#~ "        this.id=id;\n"
#~ "    }\n"
#~ "    public Long getId() {\n"
#~ "        return id;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setBirthdate(Date date) {\n"
#~ "        birthdate = date;\n"
#~ "    }\n"
#~ "    public Date getBirthdate() {\n"
#~ "        return birthdate;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setWeight(float weight) {\n"
#~ "        this.weight = weight;\n"
#~ "    }\n"
#~ "    public float getWeight() {\n"
#~ "        return weight;\n"
#~ "    }\n"
#~ "\n"
#~ "    public Color getColor() {\n"
#~ "        return color;\n"
#~ "    }\n"
#~ "    void setColor(Color color) {\n"
#~ "        this.color = color;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setSex(char sex) {\n"
#~ "        this.sex=sex;\n"
#~ "    }\n"
#~ "    public char getSex() {\n"
#~ "        return sex;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setLitterId(int id) {\n"
#~ "        this.litterId = id;\n"
#~ "    }\n"
#~ "    public int getLitterId() {\n"
#~ "        return litterId;\n"
#~ "    }\n"
#~ "\n"
#~ "    void setMother(Cat mother) {\n"
#~ "        this.mother = mother;\n"
#~ "    }\n"
#~ "    public Cat getMother() {\n"
#~ "        return mother;\n"
#~ "    }\n"
#~ "    void setKittens(Set kittens) {\n"
#~ "        this.kittens = kittens;\n"
#~ "    }\n"
#~ "    public Set getKittens() {\n"
#~ "        return kittens;\n"
#~ "    }\n"
#~ "    \n"
#~ "    // addKitten not needed by Hibernate\n"
#~ "    public void addKitten(Cat kitten) {\n"
#~ "    kitten.setMother(this);\n"
#~ "kitten.setLitterId( kittens.size() ); \n"
#~ "        kittens.add(kitten);\n"
#~ "    }\n"
#~ "}"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[package eg;\n"
#~ "\n"
#~ "public class DomesticCat extends Cat {\n"
#~ "        private String name;\n"
#~ "\n"
#~ "        public String getName() {\n"
#~ "                return name;\n"
#~ "        }\n"
#~ "        protected void setName(String name) {\n"
#~ "                this.name=name;\n"
#~ "        }\n"
#~ "}]]>"
#~ msgstr ""
#~ "package eg;\n"
#~ "\n"
#~ "public class DomesticCat extends Cat {\n"
#~ "        private String name;\n"
#~ "\n"
#~ "        public String getName() {\n"
#~ "                return name;\n"
#~ "        }\n"
#~ "        protected void setName(String name) {\n"
#~ "                this.name=name;\n"
#~ "        }\n"
#~ "}"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[public class Cat {\n"
#~ "\n"
#~ "    ...\n"
#~ "    public boolean equals(Object other) {\n"
#~ "        if (this == other) return true;\n"
#~ "        if ( !(other instanceof Cat) ) return false;\n"
#~ "\n"
#~ "        final Cat cat = (Cat) other;\n"
#~ "\n"
#~ "        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
#~ "        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
#~ "\n"
#~ "        return true;\n"
#~ "    }\n"
#~ "\n"
#~ "    public int hashCode() {\n"
#~ "        int result;\n"
#~ "        result = getMother().hashCode();\n"
#~ "        result = 29 * result + getLitterId();\n"
#~ "        return result;\n"
#~ "    }\n"
#~ "\n"
#~ "}]]>"
#~ msgstr ""
#~ "public class Cat {\n"
#~ "\n"
#~ "    ...\n"
#~ "    public boolean equals(Object other) {\n"
#~ "        if (this == other) return true;\n"
#~ "        if ( !(other instanceof Cat) ) return false;\n"
#~ "\n"
#~ "        final Cat cat = (Cat) other;\n"
#~ "\n"
#~ "        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
#~ "        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
#~ "\n"
#~ "        return true;\n"
#~ "    }\n"
#~ "\n"
#~ "    public int hashCode() {\n"
#~ "        int result;\n"
#~ "        result = getMother().hashCode();\n"
#~ "        result = 29 * result + getLitterId();\n"
#~ "        return result;\n"
#~ "    }\n"
#~ "\n"
#~ "}"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<hibernate-mapping>\n"
#~ "\n"
#~ "    <class entity-name=\"Customer\">\n"
#~ "\n"
#~ "        <id name=\"id\"\n"
#~ "            type=\"long\"\n"
#~ "            column=\"ID\">\n"
#~ "            <generator class=\"sequence\"/>\n"
#~ "        </id>\n"
#~ "\n"
#~ "        <property name=\"name\"\n"
#~ "            column=\"NAME\"\n"
#~ "            type=\"string\"/>\n"
#~ "\n"
#~ "        <property name=\"address\"\n"
#~ "            column=\"ADDRESS\"\n"
#~ "            type=\"string\"/>\n"
#~ "\n"
#~ "        <many-to-one name=\"organization\"\n"
#~ "            column=\"ORGANIZATION_ID\"\n"
#~ "            class=\"Organization\"/>\n"
#~ "\n"
#~ "        <bag name=\"orders\"\n"
#~ "            inverse=\"true\"\n"
#~ "            lazy=\"false\"\n"
#~ "            cascade=\"all\">\n"
#~ "            <key column=\"CUSTOMER_ID\"/>\n"
#~ "            <one-to-many class=\"Order\"/>\n"
#~ "        </bag>\n"
#~ "\n"
#~ "    </class>\n"
#~ "    \n"
#~ "</hibernate-mapping>]]>"
#~ msgstr ""
#~ "&lt;hibernate-mapping&gt;\n"
#~ "\n"
#~ "    &lt;class entity-name=\"Customer\"&gt;\n"
#~ "\n"
#~ "        &lt;id name=\"id\"\n"
#~ "            type=\"long\"\n"
#~ "            column=\"ID\"&gt;\n"
#~ "            &lt;generator class=\"sequence\"/&gt;\n"
#~ "        &lt;/id&gt;\n"
#~ "\n"
#~ "        &lt;property name=\"name\"\n"
#~ "            column=\"NAME\"\n"
#~ "            type=\"string\"/&gt;\n"
#~ "\n"
#~ "        &lt;property name=\"address\"\n"
#~ "            column=\"ADDRESS\"\n"
#~ "            type=\"string\"/&gt;\n"
#~ "\n"
#~ "        &lt;many-to-one name=\"organization\"\n"
#~ "            column=\"ORGANIZATION_ID\"\n"
#~ "            class=\"Organization\"/&gt;\n"
#~ "\n"
#~ "        &lt;bag name=\"orders\"\n"
#~ "            inverse=\"true\"\n"
#~ "            lazy=\"false\"\n"
#~ "            cascade=\"all\"&gt;\n"
#~ "            &lt;key column=\"CUSTOMER_ID\"/&gt;\n"
#~ "            &lt;one-to-many class=\"Order\"/&gt;\n"
#~ "        &lt;/bag&gt;\n"
#~ "\n"
#~ "    &lt;/class&gt;\n"
#~ "    \n"
#~ "&lt;/hibernate-mapping&gt;"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[Session s = openSession();\n"
#~ "Transaction tx = s.beginTransaction();\n"
#~ "Session s = openSession();\n"
#~ "\n"
#~ "// Create a customer\n"
#~ "Map david = new HashMap();\n"
#~ "david.put(\"name\", \"David\");\n"
#~ "\n"
#~ "// Create an organization\n"
#~ "Map foobar = new HashMap();\n"
#~ "foobar.put(\"name\", \"Foobar Inc.\");\n"
#~ "\n"
#~ "// Link both\n"
#~ "david.put(\"organization\", foobar);\n"
#~ "\n"
#~ "// Save both\n"
#~ "s.save(\"Customer\", david);\n"
#~ "s.save(\"Organization\", foobar);\n"
#~ "\n"
#~ "tx.commit();\n"
#~ "s.close();]]>"
#~ msgstr ""
#~ "Session s = openSession();\n"
#~ "Transaction tx = s.beginTransaction();\n"
#~ "Session s = openSession();\n"
#~ "\n"
#~ "// Create a customer\n"
#~ "Map david = new HashMap();\n"
#~ "david.put(\"name\", \"David\");\n"
#~ "\n"
#~ "// Create an organization\n"
#~ "Map foobar = new HashMap();\n"
#~ "foobar.put(\"name\", \"Foobar Inc.\");\n"
#~ "\n"
#~ "// Link both\n"
#~ "david.put(\"organization\", foobar);\n"
#~ "\n"
#~ "// Save both\n"
#~ "s.save(\"Customer\", david);\n"
#~ "s.save(\"Organization\", foobar);\n"
#~ "\n"
#~ "tx.commit();\n"
#~ "s.close();"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[Session dynamicSession = pojoSession.getSession(EntityMode."
#~ "MAP);\n"
#~ "\n"
#~ "// Create a customer\n"
#~ "Map david = new HashMap();\n"
#~ "david.put(\"name\", \"David\");\n"
#~ "dynamicSession.save(\"Customer\", david);\n"
#~ "...\n"
#~ "dynamicSession.flush();\n"
#~ "dynamicSession.close()\n"
#~ "...\n"
#~ "// Continue on pojoSession\n"
#~ "]]>"
#~ msgstr ""
#~ "Session dynamicSession = pojoSession.getSession(EntityMode.MAP);\n"
#~ "\n"
#~ "// Create a customer\n"
#~ "Map david = new HashMap();\n"
#~ "david.put(\"name\", \"David\");\n"
#~ "dynamicSession.save(\"Customer\", david);\n"
#~ "...\n"
#~ "dynamicSession.flush();\n"
#~ "dynamicSession.close()\n"
#~ "...\n"
#~ "// Continue on pojoSession"

#, fuzzy
#~ msgid ""
#~ "<![CDATA[<hibernate-mapping>\n"
#~ "    <class entity-name=\"Customer\">\n"
#~ "        <!--\n"
#~ "            Override the dynamic-map entity-mode\n"
#~ "            tuplizer for the customer entity\n"
#~ "        -->\n"
#~ "        <tuplizer entity-mode=\"dynamic-map\"\n"
#~ "                class=\"CustomMapTuplizerImpl\"/>\n"
#~ "\n"
#~ "        <id name=\"id\" type=\"long\" column=\"ID\">\n"
#~ "            <generator class=\"sequence\"/>\n"
#~ "        </id>\n"
#~ "\n"
#~ "        <!-- other properties -->\n"
#~ "        ...\n"
#~ "    </class>\n"
#~ "</hibernate-mapping>\n"
#~ "\n"
#~ "\n"
#~ "public class CustomMapTuplizerImpl\n"
#~ "        extends org.hibernate.tuple.entity.DynamicMapEntityTuplizer {\n"
#~ "    // override the buildInstantiator() method to plug in our custom "
#~ "map...\n"
#~ "    protected final Instantiator buildInstantiator(\n"
#~ "            org.hibernate.mapping.PersistentClass mappingInfo) {\n"
#~ "        return new CustomMapInstantiator( mappingInfo );\n"
#~ "    }\n"
#~ "\n"
#~ "    private static final class CustomMapInstantiator\n"
#~ "            extends org.hibernate.tuple.DynamicMapInstantitor {\n"
#~ "        // override the generateMap() method to return our custom map...\n"
#~ "            protected final Map generateMap() {\n"
#~ "                    return new CustomMap();\n"
#~ "            }\n"
#~ "    }\n"
#~ "}]]>"
#~ msgstr ""
#~ "&lt;hibernate-mapping&gt;\n"
#~ "    &lt;class entity-name=\"Customer\"&gt;\n"
#~ "        &lt;!--\n"
#~ "            Override the dynamic-map entity-mode\n"
#~ "            tuplizer for the customer entity\n"
#~ "        --&gt;\n"
#~ "        &lt;tuplizer entity-mode=\"dynamic-map\"\n"
#~ "                class=\"CustomMapTuplizerImpl\"/&gt;\n"
#~ "\n"
#~ "        &lt;id name=\"id\" type=\"long\" column=\"ID\"&gt;\n"
#~ "            &lt;generator class=\"sequence\"/&gt;\n"
#~ "        &lt;/id&gt;\n"
#~ "\n"
#~ "        &lt;!-- other properties --&gt;\n"
#~ "        ...\n"
#~ "    &lt;/class&gt;\n"
#~ "&lt;/hibernate-mapping&gt;\n"
#~ "\n"
#~ "\n"
#~ "public class CustomMapTuplizerImpl\n"
#~ "        extends org.hibernate.tuple.entity.DynamicMapEntityTuplizer {\n"
#~ "    // override the buildInstantiator() method to plug in our custom "
#~ "map...\n"
#~ "    protected final Instantiator buildInstantiator(\n"
#~ "            org.hibernate.mapping.PersistentClass mappingInfo) {\n"
#~ "        return new CustomMapInstantiator( mappingInfo );\n"
#~ "    }\n"
#~ "\n"
#~ "    private static final class CustomMapInstantiator\n"
#~ "            extends org.hibernate.tuple.DynamicMapInstantitor {\n"
#~ "        // override the generateMap() method to return our custom map...\n"
#~ "    protected final Map generateMap() {\n"
#~ "    return new CustomMap();\n"
#~ "    }\n"
#~ "    }\n"
#~ "}"
