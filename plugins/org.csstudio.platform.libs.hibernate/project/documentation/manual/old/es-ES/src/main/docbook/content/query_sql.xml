<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="querysql" revision="2">
    <title>SQL Nativo</title>

    <para>
        Puedes tambi&#x00e9;n expresar consultas en el dialecto SQL nativo de tu base de datos. Esto es &#x00fa;til si quieres
        utilizar aspectos espec&#x00ed;ficos de base de datos tal como consejos (hints) de consulta o la palabra clave
        <literal>CONNECT</literal> en Oracle. Provee adem&#x00e1;s una clara ruta de migraci&#x00f3;n desde una aplicaci&#x00f3;n
        basada en SQL/JDBC directo a Hibernate.
    </para>

    <para>
        Hibernate3 te permite especificar SQL escrito a mano (incluyendo procedimientos almacenados) para todas
        las operaciones de creaci&#x00f3;n, actualizaci&#x00f3;n, borrado y carga.
    </para>
    
    <sect1 id="querysql-creating" revision="4">
	    <title>Using a <literal>SQLQuery</literal></title>
	    
	    <para>Execution of native SQL queries is controlled via the
		    <literal>SQLQuery</literal> interface, which is obtained by calling
		    <literal>Session.createSQLQuery()</literal>. The following describes how
		    to use this API for querying.</para>
	    
	    <sect2>
		    <title>Scalar queries</title>
		    
		    <para>The most basic SQL query is to get a list of scalars
			    (values).</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").list();
									 sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").list();
									 ]]></programlisting>
		    
		    <para>These will both return a List of Object arrays (Object[]) with
			    scalar values for each column in the CATS table. Hibernate will use
			    ResultSetMetadata to deduce the actual order and types of the returned
			    scalar values.</para>
		    
		    <para>To avoid the overhead of using
			    <literal>ResultSetMetadata</literal> or simply to be more explicit in
			    what is returned one can use <literal>addScalar()</literal>.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
									 .addScalar("ID", Hibernate.LONG)
									 .addScalar("NAME", Hibernate.STRING)
									 .addScalar("BIRTHDATE", Hibernate.DATE)
									 ]]></programlisting>
		    
		    <para>This query specified:</para>
		    
		    <itemizedlist>
			    <listitem>
				    <para>the SQL query string</para>
			    </listitem>
			    
			    <listitem>
				    <para>the columns and types to return</para>
			    </listitem>
		    </itemizedlist>
		    
		    <para>This will still return Object arrays, but now it will not use
			    <literal>ResultSetMetdata</literal> but will instead explicitly get the
			    ID, NAME and BIRTHDATE column as respectively a Long, String and a Short
			    from the underlying resultset. This also means that only these three
			    columns will be returned, even though the query is using
			    <literal>*</literal> and could return more than the three listed
			    columns.</para>
		    
		    <para>It is possible to leave out the type information for all or some
			    of the scalars.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS")
									 .addScalar("ID", Hibernate.LONG)
									 .addScalar("NAME")
									 .addScalar("BIRTHDATE")
									 ]]></programlisting>
		    
		    <para>This is essentially the same query as before, but now
			    <literal>ResultSetMetaData</literal> is used to decide the type of NAME
			    and BIRTHDATE where as the type of ID is explicitly specified.</para>
		    
		    <para>How the java.sql.Types returned from ResultSetMetaData is mapped
			    to Hibernate types is controlled by the Dialect. If a specific type is
			    not mapped or does not result in the expected type it is possible to
			    customize it via calls to <literal>registerHibernateType</literal> in
			    the Dialect.</para>
	    </sect2>
	    
	    <sect2>
		    <title>Entity queries</title>
		    
		    <para>The above queries were all about returning scalar values,
			    basically returning the "raw" values from the resultset. The following
			    shows how to get entity objects from a native sql query via
			    <literal>addEntity()</literal>.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT * FROM CATS").addEntity(Cat.class);
									 sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE FROM CATS").addEntity(Cat.class);
									 ]]></programlisting>
		    
		    <para>This query specified:</para>
		    
		    <itemizedlist>
			    <listitem>
				    <para>the SQL query string</para>
			    </listitem>
			    
			    <listitem>
				    <para>the entity returned by the query</para>
			    </listitem>
		    </itemizedlist>
		    
		    <para>Assuming that Cat is mapped as a class with the columns ID, NAME
			    and BIRTHDATE the above queries will both return a List where each
			    element is a Cat entity.</para>
		    
		    <para>If the entity is mapped with a <literal>many-to-one</literal> to
			    another entity it is required to also return this when performing the
			    native query, otherwise a database specific "column not found" error
			    will occur. The additional columns will automatically be returned when
			    using the * notation, but we prefer to be explicit as in the following
			    example for a <literal>many-to-one</literal> to a
			    <literal>Dog</literal>:</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS").addEntity(Cat.class);
									 ]]></programlisting>
		    
		    <para>This will allow cat.getDog() to function properly.</para>
	    </sect2>
	    
	    <sect2>
		    <title>Handling associations and collections</title>
		    
		    <para>It is possible to eagerly join in the <literal>Dog</literal> to
			    avoid the possible extra roundtrip for initializing the proxy. This is
			    done via the <literal>addJoin()</literal> method, which allows you to
			    join in an association or collection.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID")
									 .addEntity("cat", Cat.class)
									 .addJoin("cat.dog");
									 ]]></programlisting>
		    
		    <para>In this example the returned <literal>Cat</literal>'s will have
			    their <literal>dog</literal> property fully initialized without any
			    extra roundtrip to the database. Notice that we added a alias name
			    ("cat") to be able to specify the target property path of the join. It
			    is possible to do the same eager joining for collections, e.g. if the
			    <literal>Cat</literal> had a one-to-many to <literal>Dog</literal>
			    instead.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID")
									 .addEntity("cat", Cat.class)
									 .addJoin("cat.dogs");
									 ]]></programlisting>
		    
		    <para>
			    At this stage we are reaching the limits of what is possible with native queries without starting to
			    enhance the sql queries to make them usable in Hibernate; the problems starts to arise when returning
			    multiple entities of the same type or when the default alias/column names are not enough.
		    </para>
	    </sect2>
	    
	    <sect2>
		    <title>Returning multiple entities</title>
		    
		    <para>Until now the result set column names are assumed to be the same
			    as the column names specified in the mapping document. This can be
			    problematic for SQL queries which join multiple tables, since the same
			    column names may appear in more than one table.</para>
		    
		    <para>Column alias injection is needed in the following query (which
			    most likely will fail):</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT c.*, m.*  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
									 .addEntity("cat", Cat.class)
									 .addEntity("mother", Cat.class)
									 ]]></programlisting>
		    
		    <para>The intention for this query is to return two Cat instances per
			    row, a cat and its mother. This will fail since there is a conflict of
			    names since they are mapped to the same column names and on some
			    databases the returned column aliases will most likely be on the form
			    "c.ID", "c.NAME", etc. which are not equal to the columns specificed in
			    the mappings ("ID" and "NAME").</para>
		    
		    <para>The following form is not vulnerable to column name
			    duplication:</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT {cat.*}, {mother.*}  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID")
									 .addEntity("cat", Cat.class)
									 .addEntity("mother", Cat.class)
									 ]]></programlisting>
		    
		    <para>This query specified:</para>
		    
		    <itemizedlist>
			    <listitem>
				    <para>the SQL query string, with placeholders for Hibernate to
					    inject column aliases</para>
			    </listitem>
			    
			    <listitem>
				    <para>the entities returned by the query</para>
			    </listitem>
		    </itemizedlist>
		    
		    <para>The {cat.*} and {mother.*} notation used above is a shorthand for
			    "all properties". Alternatively, you may list the columns explicity, but
			    even in this case we let Hibernate inject the SQL column aliases for
			    each property. The placeholder for a column alias is just the property
			    name qualified by the table alias. In the following example, we retrieve
			    Cats and their mothers from a different table (cat_log) to the one
			    declared in the mapping metadata. Notice that we may even use the
			    property aliases in the where clause if we like.</para>
		    
		    <programlisting><![CDATA[String sql = "SELECT ID as {c.id}, NAME as {c.name}, " + 
						    "BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} " +
						    "FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID";
						    
						    List loggedCats = sess.createSQLQuery(sql)
						    .addEntity("cat", Cat.class)
						    .addEntity("mother", Cat.class).list()
						    ]]></programlisting>
		    
		    <sect3 id="querysql-aliasreferences" revision="2">
			    <title>Alias and property references</title>
			    
			    <para>For most cases the above alias injection is needed, but for
				    queries relating to more complex mappings like composite properties,
				    inheritance discriminators, collections etc. there are some specific
				    aliases to use to allow Hibernate to inject the proper aliases.</para>
			    
			    <para>The following table shows the different possibilities of using
				    the alias injection. Note: the alias names in the result are examples,
				    each alias will have a unique and probably different name when
				    used.</para>
			    
			    <table frame="topbot" id="aliasinjection-summary">
				    <title>Alias injection names</title>
				    
				    <tgroup cols="3">
					    <colspec colwidth="1*" />
					    
					    <colspec colwidth="1*" />
					    
					    <colspec colwidth="2.5*" />
					    
					    <thead>
						    <row>
							    <entry>Description</entry>
							    
							    <entry>Syntax</entry>
							    
							    <entry>Example</entry>
						    </row>
					    </thead>
					    
					    <tbody>
						    <row>
							    <entry>A simple property</entry>
							    
							    <entry><literal>{[aliasname].[propertyname]</literal></entry>
							    
							    <entry><literal>A_NAME as {item.name}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>A composite property</entry>
							    
							    <entry><literal>{[aliasname].[componentname].[propertyname]}</literal></entry>
							    
							    <entry><literal>CURRENCY as {item.amount.currency}, VALUE as
									    {item.amount.value}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>Discriminator of an entity</entry>
							    
							    <entry><literal>{[aliasname].class}</literal></entry>
							    
							    <entry><literal>DISC as {item.class}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>All properties of an entity</entry>
							    
							    <entry><literal>{[aliasname].*}</literal></entry>
							    
							    <entry><literal>{item.*}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>A collection key</entry>
							    
							    <entry><literal>{[aliasname].key}</literal></entry>
							    
							    <entry><literal>ORGID as {coll.key}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>The id of an collection</entry>
							    
							    <entry><literal>{[aliasname].id}</literal></entry>
							    
							    <entry><literal>EMPID as {coll.id}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>The element of an collection</entry>
							    
							    <entry><literal>{[aliasname].element}</literal></entry>
							    
							    <entry><literal>XID as {coll.element}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>roperty of the element in the collection</entry>
							    
							    <entry><literal>{[aliasname].element.[propertyname]}</literal></entry>
							    
							    <entry><literal>NAME as {coll.element.name}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>All properties of the element in the collection</entry>
							    
							    <entry><literal>{[aliasname].element.*}</literal></entry>
							    
							    <entry><literal>{coll.element.*}</literal></entry>
						    </row>
						    
						    <row>
							    <entry>All properties of the the collection</entry>
							    
							    <entry><literal>{[aliasname].*}</literal></entry>
							    
							    <entry><literal>{coll.*}</literal></entry>
						    </row>
					    </tbody>
				    </tgroup>
			    </table>
		    </sect3>
	    </sect2>
	    
	    <sect2>
		    <title>Returning non-managed entities</title>
		    
		    <para>It is possible to apply a ResultTransformer to native sql queries. Allowing it to e.g. return non-managed entities.</para>
		    
		    <programlisting><![CDATA[sess.createSQLQuery("SELECT NAME, BIRTHDATE FROM CATS")
									 .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]></programlisting>
		    
		    <para>This query specified:</para>
		    
		    <itemizedlist>
			    <listitem>
				    <para>the SQL query string</para>
			    </listitem>
			    
			    <listitem>
				    <para>a result transformer</para>
			    </listitem>
		    </itemizedlist>
		    
		    <para>
			    The above query will return a list of <literal>CatDTO</literal> which has been instantiated and injected the values of NAME and BIRTHNAME into its corresponding
			    properties or fields.
		    </para>
	    </sect2>
	    
	    <sect2>
		    <title>Handling inheritance</title>
		    
		    <para>Native sql queries which query for entities that is mapped as part
			    of an inheritance must include all properties for the baseclass and all
			    it subclasses.</para>
	    </sect2>
	    
	    <sect2>
		    <title>Parameters</title>
		    
		    <para>Native sql queries support positional as well as named
			    parameters:</para>
		    
		    <programlisting><![CDATA[Query query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like ?").addEntity(Cat.class);
						   List pusList = query.setString(0, "Pus%").list();
						   
						   query = sess.createSQLQuery("SELECT * FROM CATS WHERE NAME like :name").addEntity(Cat.class);
						   List pusList = query.setString("name", "Pus%").list();          ]]></programlisting>
	    </sect2>
	    
	    
	    
    </sect1>
    
    
    <sect1 id="querysql-namedqueries" revision="2">
        <title>Consultas SQL con nombre</title>

        <para>
            Las consultas SQL con nombre pueden definirse en el documento de mapeo y llamadas exactamente
            en la misma forma en que a una consulta HQL con nombre. En este caso, <emphasis>no</emphasis>
            necesitamos llamar a <literal>addEntity()</literal>.
        </para>

         <programlisting><![CDATA[<sql-query name="persons">
    <return alias="person" class="eg.Person"/>
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex}
    FROM PERSON person 
    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>

        <programlisting><![CDATA[List people = sess.getNamedQuery("persons")
    .setString("namePattern", namePattern)
    .setMaxResults(50)
    .list();]]></programlisting>

         <para>
             Los elementos <literal>&lt;return-join&gt;</literal> y <literal>&lt;load-collection&gt;</literal>
             se usan para unir asociaciones y definir consultas que inicialicen colecciones, respectivamente.
         </para>
         
         <programlisting><![CDATA[<sql-query name="personsWith">
    <return alias="person" class="eg.Person"/>
    <return-join alias="address" property="person.mailingAddress"/>
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person 
    JOIN ADDRESS address
    	ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
    WHERE person.NAME LIKE :namePattern
</sql-query>]]></programlisting>

        <para>
            Una consulta SQL con nombre puede devolver un valor escalar. Debes especificar el alias de columna y
            tipo Hibernate usando el elementp <literal>&lt;return-scalar&gt;</literal>:
        </para>
        
        <programlisting><![CDATA[<sql-query name="mySqlQuery">
    <return-scalar column="name" type="string"/>
    <return-scalar column="age" type="long"/>
    SELECT p.NAME AS name,
           p.AGE AS age,
    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'
</sql-query>]]></programlisting>
<para>You can externalize the resultset mapping informations in a
	<literal>&lt;resultset&gt;</literal> element to either reuse them accross
	several named queries or through the
	<literal>setResultSetMapping()</literal> API.</para>

<programlisting><![CDATA[<resultset name="personAddress">
		<return alias="person" class="eg.Person"/>
		<return-join alias="address" property="person.mailingAddress"/>
	</resultset>
	
	<sql-query name="personsWith" resultset-ref="personAddress">
		SELECT person.NAME AS {person.name},
		person.AGE AS {person.age},
		person.SEX AS {person.sex},
		address.STREET AS {address.street},
		address.CITY AS {address.city},
		address.STATE AS {address.state},
		address.ZIP AS {address.zip}
		FROM PERSON person
		JOIN ADDRESS address
		ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'
		WHERE person.NAME LIKE :namePattern
	</sql-query>]]></programlisting>

<para>You can alternatively use the resultset mapping information in your
	hbm files directly in java code.</para>

<programlisting><![CDATA[List cats = sess.createSQLQuery(
			      "select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id"
			      )
			      .setResultSetMapping("catAndKitten")
    .list();]]></programlisting>
         <sect2 id="propertyresults">
             <title>Usando return-property para especificar expl&#x00ed;citamente nombres de columna/alias</title>
             
             <para>
                 Con <literal>&lt;return-property&gt;</literal> puedes decirle expl&#x00ed;citamente a Hibernate qu&#x00e9;
                 alias de columna usar, en vez de usar la sint&#x00e1;xis <literal>{}</literal> para dejar que Hibernate
                 inyecte sus propios alias.
             </para>
             
            <programlisting><![CDATA[<sql-query name="mySqlQuery">
    <return alias="person" class="eg.Person">
        <return-property name="name" column="myName"/>
        <return-property name="age" column="myAge"/>
        <return-property name="sex" column="mySex"/>
    </return>
    SELECT person.NAME AS myName,
           person.AGE AS myAge,
           person.SEX AS mySex,
    FROM PERSON person WHERE person.NAME LIKE :name
</sql-query>
]]></programlisting>
             
             <para>
                 <literal>&lt;return-property&gt;</literal> tambi&#x00e9;n trabaja con m&#x00fa;ltiples columnas. Esto resuelve una
                 limitaci&#x00f3;n de la sint&#x00e1;xis <literal>{}</literal>, la cual no puede permitir un control fino de propiedades
                 multi-columna.
             </para>
             
             <programlisting><![CDATA[<sql-query name="organizationCurrentEmployments">
    <return alias="emp" class="Employment">            
        <return-property name="salary"> 
            <return-column name="VALUE"/>
            <return-column name="CURRENCY"/>            
        </return-property>
        <return-property name="endDate" column="myEndDate"/>
    </return>
        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY
        FROM EMPLOYMENT
        WHERE EMPLOYER = :id AND ENDDATE IS NULL
        ORDER BY STARTDATE ASC
</sql-query>]]></programlisting>
             
            <para>
                Nota que en este ejemplo hemos usado <literal>&lt;return-property&gt;</literal> en combinaci&#x00f3;n con
                la sint&#x00e1;xis <literal>{}</literal> para inyecci&#x00f3;n, permitiendo a los usuarios elejir c&#x00f3;mo quieren
                referirse a las columnas y propiedades.
            </para>

            <para>
                Si tu mapeo tiene un discriminador debes usar <literal>&lt;return-discriminator&gt;</literal>
                para especificar la columna discriminadora.
            </para>
         </sect2>
         
         <sect2 id="sp_query">
             <title>Usando procedimientos almacenados para consultar</title>
             
             <para>
                 Hibernate3 introduce soporte para consultas v&#x00ed;a procedimientos almacenados. Los procedimientos
                 almacenados deben devolver un conjunto resultado como el primer par&#x00e1;metro de salida para ser
                 capaces de funcionar con Hibernate. Un ejemplo de uno procedimiento almacenado en Oracle 9
                 o superior es as&#x00ed;:
             </para>
                 
                 <programlisting><![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments 
    RETURN SYS_REFCURSOR 
AS 
    st_cursor SYS_REFCURSOR; 
BEGIN 
    OPEN st_cursor FOR 
 SELECT EMPLOYEE, EMPLOYER, 
 STARTDATE, ENDDATE, 
 REGIONCODE, EID, VALUE, CURRENCY 
 FROM EMPLOYMENT; 
      RETURN  st_cursor; 
 END;]]></programlisting>
                 
             <para>
                 Para usar esta consulta en Hibernate necesitas mapearla por medio de una consulta con nombre.
             </para>
                 
             <programlisting><![CDATA[<sql-query name="selectAllEmployees_SP" callable="true">
    <return alias="emp" class="Employment">
        <return-property name="employee" column="EMPLOYEE"/>
        <return-property name="employer" column="EMPLOYER"/>            
        <return-property name="startDate" column="STARTDATE"/>
        <return-property name="endDate" column="ENDDATE"/>            
        <return-property name="regionCode" column="REGIONCODE"/>            
        <return-property name="id" column="EID"/>                        
        <return-property name="salary"> 
            <return-column name="VALUE"/>
            <return-column name="CURRENCY"/>            
        </return-property>
    </return>
    { ? = call selectAllEmployments() }
</sql-query>]]></programlisting>
             
             <para>
               Nota que los procedimientos almacenados s&#x00f3;lo devuelven escalares y entidades.
               No est&#x00e1;n soportados <literal>&lt;return-join&gt;</literal> y <literal>&lt;load-collection&gt;</literal>.
             </para>
             
             <sect3 id="querysql-limits-storedprocedures">
               <title>Reglas/limitaciones para usar procedimientos almacenados</title>
               
               <para>
                   Para usar procedimientos almacenados con Hibernate los procedimientos tienen que seguir algunas reglas.
                   Si no siguen esas reglas no son usables por Hibernate. Si a&#x00fa;n quisieras usar estos procedimientos
                   tendr&#x00ed;as que ejecutarlos por medio de <literal>session.connection()</literal>. Las reglas son
                   diferentes para cada base de datos, ya que los vendedores de base de datos tienen diferentes
                   sem&#x00e1;nticas/sint&#x00e1;xis de procedimientos almacenados.
               </para>

                <para>
                   Las consultas de procedimientos almacenados no pueden ser paginadas con 
                   <literal>setFirstResult()/setMaxResults()</literal>.
               </para>

                 <para>
                   Para Oracle se aplican las siguientes reglas:
               </para>
               
               <itemizedlist spacing="compact">
               <listitem>
               <para>    
                   El procedimiento debe devolver un conjunto resultado. Esto se hace devolviendo un
                   <literal>SYS_REFCURSOR</literal> en Oracle 9 o 10. En Oracle necesitas definir un
                   tipo <literal>REF CURSOR</literal>.
               </para>
               </listitem>    
               <listitem>
               <para>
                   La forma recomendada es <literal>{ ? = call procName(&lt;parameters&gt;) }</literal> o
                   <literal>{ ? = call procName }</literal> (esto es m&#x00e1;s una regla de Oracle que una regla de Hibernate).
               </para>
               </listitem>    
              </itemizedlist>
                           
              <para>                   
                   Para Sybase o MS SQL server se aplican las siguientes reglas:
               </para>
                   
               <itemizedlist spacing="compact">
               <listitem>
               <para>    
                   El procedimiento debe devolver un conjunto resultado. Nota que ya que estos servidores pueden
                   y devolver&#x00e1;n m&#x00fa;ltiples conjuntos resultados y cuentas de actualizaci&#x00f3;n, Hibernate iterar&#x00e1;
                   los resultados y tomar&#x00e1; el primer resultado que sea un conjunto resultado como su valor
                   a devolver. Todo lo dem&#x00e1;s ser&#x00e1; descartado.
               </para>
               </listitem>    
               <listitem>
               <para>
                   Si habilitas <literal>SET NOCOUNT ON</literal> en tu procedimiento ser&#x00e1; probablemente m&#x00e1;s
                   eficiente, pero esto no es un requerimiento.
               </para>
               </listitem>    
              </itemizedlist>
              </sect3>
         </sect2>

    </sect1>

    <sect1 id="querysql-cud">
        <title>SQL personalizado para crear, actualizar y borrar</title>

        <para>
            Hibernate3 puede usar sentencias SQL personalizadas para las operaciones de
            crear, actualizar y borrar. Los persistidores de clases y colecciones en Hibernate
            ya contienen un conjunto de cadenas generadas en tiempo de configuraci&#x00f3;n (insertsql,
            deletesql, updatesql, etc.). Las etiquetas de mapeo <literal>&lt;sql-insert&gt;</literal>,
            <literal>&lt;sql-delete&gt;</literal>, y <literal>&lt;sql-update&gt;</literal> sobrescriben
            estas cadenas:
        </para>

        <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-insert>
    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>
    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>
</class>]]></programlisting>

        <para>
            El SQL se ejecuta directamente en tu base de datos, de modo que eres libre de usar cualquier
            dialecto que quieras. Esto reducir&#x00e1;, por supuesto, la portabilidad de tu mapeo si usas SQL
            espec&#x00ed;fico de la base de datos.
        </para>

        <para>
            Los procedimientos almacenados son soportados si est&#x00e1; establecido el atributo
            <literal>callable</literal>:
        </para>

    <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <sql-insert callable="true">{call createPerson (?, ?)}</sql-insert>
    <sql-delete callable="true">{? = call deletePerson (?)}</sql-delete>
    <sql-update callable="true">{? = call updatePerson (?, ?)}</sql-update>
</class>]]></programlisting>

        <para>
          El orden de los par&#x00e1;metros posicionales son actualmente vitales, ya que deben estar en la
          misma secuencia en que las espera Hibernate.
        </para>
        
        <para>
          Puedes ver el orden esperado habilitando el registro de depuraci&#x00f3;n para el nivel
          <literal>org.hibernate.persister.entity</literal>. Con este nivel habilitado, Hibernate
          imprimir&#x00e1; el SQL est&#x00e1;tico que se usa para crear, actualizar, borrar, etc. las entidades.
          (Para ver la secuencia esperada, recuerda no incluir tu SQL personalizado en los ficheros
          de mapeo ya que sobrescribir&#x00e1;n el sql est&#x00e1;tico generado por Hibernate.)
        </para>

        <para>
            Los procedimientos almacenados son, en la mayor&#x00ed;a de los casos (l&#x00e9;ase, mejor hacerlo que no hacerlo),
            obligados a devolver el n&#x00fa;mero de filas insertadas/actualizadas/borradas, ya que Hibernate tiene algunas
            comprobaciones en tiempo de ejecuci&#x00f3;n del &#x00e9;xito de la sentencia. Hibernate siempre registra el primer
            par&#x00e1;metro de la sentencia como un par&#x00e1;metro de salida num&#x00e9;rico para las operaciones CUD:
        </para>

        <programlisting><![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN VARCHAR2)
    RETURN NUMBER IS
BEGIN

    update PERSON
    set
        NAME = uname,
    where
        ID = uid;

    return SQL%ROWCOUNT;

END updatePerson;]]></programlisting>

        
    </sect1>

    <sect1 id="querysql-load">
        <title>SQL personalizado para carga</title>

        <para>
            Puedes tambi&#x00e9;n declarar tu propias consultas SQL (o HQL) para cargar entidades:
        </para>

        <programlisting><![CDATA[<sql-query name="person">
    <return alias="pers" class="Person" lock-mode="upgrade"/>
    SELECT NAME AS {pers.name}, ID AS {pers.id} 
    FROM PERSON 
    WHERE ID=? 
    FOR UPDATE
</sql-query>]]></programlisting>

        <para>
            Esto es s&#x00f3;lo una declaraci&#x00f3;n de consulta con nombrem como se ha discutido anteriormente.
            Puedes hacer referencia a esta consulta con nombre en un mapeo de clase:
        </para>

        <programlisting><![CDATA[<class name="Person">
    <id name="id">
        <generator class="increment"/>
    </id>
    <property name="name" not-null="true"/>
    <loader query-ref="person"/>
</class>]]></programlisting>
    
        <para>
            Esto incluso funciona con procedimientos almacenados.
        </para>

        <para>
            Puedes incluso definit una consulta para la carga de colecciones:
        </para>

<programlisting><![CDATA[<set name="employments" inverse="true">
    <key/>
    <one-to-many class="Employment"/>
    <loader query-ref="employments"/>
</set>]]></programlisting>
		
        <programlisting><![CDATA[<sql-query name="employments">
    <load-collection alias="emp" role="Person.employments"/>
    SELECT {emp.*}
    FROM EMPLOYMENT emp
    WHERE EMPLOYER = :id
    ORDER BY STARTDATE ASC, EMPLOYEE ASC
</sql-query>]]></programlisting>

        <para>
            Podr&#x00ed;as incluso definir un cargador de entidades que cargue una colecci&#x00f3;n por
            recuperaci&#x00f3;n por uni&#x00f3;n (join fetching):
        </para>

        <programlisting><![CDATA[<sql-query name="person">
    <return alias="pers" class="Person"/>
    <return-join alias="emp" property="pers.employments"/> 
    SELECT NAME AS {pers.*}, {emp.*}
    FROM PERSON pers
    LEFT OUTER JOIN EMPLOYMENT emp 
        ON pers.ID = emp.PERSON_ID
    WHERE ID=?
</sql-query>]]></programlisting>

    </sect1>

</chapter>
