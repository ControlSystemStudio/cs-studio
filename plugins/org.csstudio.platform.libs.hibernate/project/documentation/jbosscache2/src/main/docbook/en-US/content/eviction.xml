<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<!--
  ~ Copyright (c) 2009, Red Hat, Inc. All rights reserved.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, v. 2.1. This program is distributed in the
  ~ hope that it will be useful, but WITHOUT A WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details. You should have received a
  ~ copy of the GNU Lesser General Public License, v.2.1 along with this
  ~ distribution; if not, write to the Free Software Foundation, Inc.,
  ~ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  ~
  ~ Red Hat Author(s): Brian Stansberry
  -->
<chapter id="eviction">

    <title>Cache Eviction</title>

    <sect1 id="eviction-overview" revision="1">
        <title>Overview</title>
        
        <para>
          <emphasis>Eviction</emphasis> refers to the process by which old,
          relatively unused, or excessively voluminous data can be dropped
          from the cache, allowing the cache to remain within a memory budget.
          Generally, applications that use the Second Level Cache should
          configure eviction, unless only a relatively small amount of
          reference data is cached.  This chapter provides a brief overview
          of how JBoss Cache eviction works, and then explains how to configure
          eviction to effectively manage the data stored in a Hibernate Second 
          Level Cache.  A basic understanding of JBoss Cache eviction and of 
          concepts like FQNs is assumed; see the <emphasis>JBoss Cache User Guide</emphasis>
          for more information.
        </para>
        
        <sect2 id="eviction-overview-process" revision="1">
           <title>The Eviction Process</title>
           
           <para>
             The JBoss Cache eviction process is fairly straightforward. Whenever
             a node in a cache is read or written to, added or removed, the cache
             finds the <emphasis>eviction region</emphasis> (see below) that
             contains the node and passes an <emphasis>eviction event</emphasis>
             object to the <emphasis>eviction policy</emphasis> (see below)
             associated with the region. The eviction policy uses the stream of
             events it receives to track activity in the region. Periodically,
             a background thread runs and contacts each region's eviction
             policy.  The policy uses its knowledge of the activity in the region,
             along with any configuration it was provided at startup, to determine
             which if any cache nodes should be evicted from memory. It then
             tells the cache to evict those nodes.  Evicting a node means
             dropping it from the cache's in-memory state.  The eviction only
             occurs on that cache instance; there is no cluster-wide eviction.
           </para>
           
           <para>
             An important point to understand is that eviction proceeds 
             independently on each peer in the cluster, with what gets
             evicted depending on the activity on that peer.  There is no
             "global eviction" where JBoss Cache removes a piece of data in
             every peer in the cluster in order to keep memory usage inside
             a budget. The Hibernate/JBC integration layer may remove some
             data globally, but that isn't done for the kind of memory
             management reasons we're discussing in this chapter.
           </para>
           
           <para>
             An effect of this is that even if a cache is configured for
             replication, if eviction is enabled the contents of a cache will
             be different between peers in the cluster; some may have evicted 
             some data, while others will have evicted different data. What
             gets evicted is driven by what data is accessed by users on each
             peer.
           </para>
           
           <para>
             Controlling when data is evicted from the cache is a matter
             of setting up appropriate eviction regions and configuring
             appropriate eviction policies for each region.
           </para>
           
        </sect2>
        
        <sect2 id="eviction-overview-regions" revision="1">
           <title>Eviction Regions</title>
           
           <para>
             JBoss Cache stores its data in a set of nodes organized in a tree 
             structure.  An eviction region is a just a portion of the tree
             to which an eviction policy has been assigned.  The name of the
             region is the FQN of the topmost node in that portion of the tree.
             An eviction configuration always needs to include a special region
             named <literal>_default_</literal>; this region is rooted in the
             root node of the tree and includes all nodes not covered by
             other regions.
           </para>
           <para>
             It's possible to define regions that overlap. In other words, one 
             region can be defined for <emphasis>/a/b/c</emphasis>, and another
             defined for <emphasis>/a/b/c/d</emphasis> (which is just the
             <emphasis>d</emphasis> subtree of the <emphasis>/a/b/c</emphasis>
             sub-tree). The algorithm that assigns eviction events to eviction
             regions handles scenarios like this consistently by always choosing 
             the first region it encounters. So, if the algorithm needed to 
             decide how to handle an event affecting <emphasis>/a/b/c/d/e</emphasis>, 
             it would start from there and work its way up the tree until it 
             hits the first defined region - in this case <emphasis>/a/b/c/d</emphasis>.
           </para>
        </sect2>
        
        <sect2 id="eviction-overview-policies" revision="1">
            <title>Eviction Policies</title>
            
            <para>
              An <emphasis>Eviction Policy</emphasis> is a class that knows how
              to handle eviction events to track the activity in its region.
              It may have a specialized set of configuration properties that
              give it rules for when a particular node in the region should be 
              evicted. It can then use that configuration and its knowledge of 
              activity in the region to to determine what nodes to evict.
            </para>
            
            <para>
              JBoss Cache ships with a number of eviction policies. See the
              <emphasis>JBoss Cache User Guide</emphasis> for a discussion of
              all of them. Here we are going to focus on just two.
            </para>
            
           <sect3 id="eviction-overview-policies-lru" revision="1">
             <title>The <literal>LRUPolicy</literal></title>
             
             <para>
               The <literal>org.jboss.cache.eviction.LRUPolicy</literal> evicts
               nodes that have been Least Recently Used. It has the following 
               configuration parameters:
             </para>

         <itemizedlist>
            <listitem>
               <literal>maxNodes</literal>
               - This is the maximum number of nodes allowed in this region. 
               0 denotes no limit.  If the region has more nodes than this,
               the least recently used nodes will be evicted until the number
               of nodes equals this limit.
            </listitem>
            
            <listitem>
               <literal>timeToLiveSeconds</literal>
               - The amount of time a node is not written to or read (in seconds) 
               before the node should be evicted. 0 denotes no limit. Nodes that
               exceed this limit will be evicted whether or not a 
               <literal>maxNodes</literal> limit has been breached.
            </listitem>

            <listitem>
               <literal>maxAgeSeconds</literal>
               - Lifespan of a node (in seconds) regardless of idle time before 
               the node is swept away. 0 denotes no limit. Nodes that
               exceed this limit will be evicted whether or not a 
               <literal>maxNodes</literal> or <literal>timeToLiveSeconds</literal> 
               limit has been breached.
            </listitem>

            <listitem>
               <literal>minTimeToLiveSeconds</literal>
               - the minimum amount of time a node must be allowed to live after 
               being accessed before it is allowed to be considered for eviction.  
               0 denotes that this feature is disabled, which is the default value.
               Should be set to a value less than <literal>timeToLiveSeconds</literal>. 
               It is recommended that this be set to a value slightly greater 
               than the maximum amount of time a transaction that affects the 
               region should take to complete. Configuring this is particularly
               important when optimistic locking is used in conjunction with
               invalidation.
            </listitem>
         </itemizedlist>
           </sect3>
        
           <sect3 id="eviction-overview-policies-null" revision="1">
             <title>The <literal>NullEvictionPolicy</literal></title>
             
             <para>
               The <literal>org.jboss.cache.eviction.NullEvictionPolicy</literal>
               is a simple policy that very efficiently does ... nothing. It
               is used to efficiently short-circuit eviction handling for regions 
               where you don't want objects to be evicted (e.g. the timestamps
               cache, which should <emphasis>never</emphasis> have data 
               evicted).  Since the <literal>NullEvictionPolicy</literal> doesn't
               actually evict anything, it doesn't take any configuration parameters.
             </para>
           </sect3>
           
        </sect2>
        
    </sect1>

    <sect1 id="eviction-organization" revision="1">
        <title>Organization of Data in the Cache</title>
        
        <para>
          In order to understand how to configure eviction, you need to 
          understand how Hibernate organizes data in the cache.
        </para>
        
        <sect2 id="eviction-organization-elements" revision="1">
           <title>Region Prefix and Region Name</title>
           
           <para>
             All FQNs in a second level cache include two elements:
           </para>
           
           <itemizedlist>
              <listitem>
                <para>
                 A <emphasis>Region Prefix</emphasis>, which is simply
                 any value assigned to the 
                 <literal>hibernate.cache.region_prefix</literal> Hibernate
                 configuration property.  If no Region Prefix is set, this
                 portion of the FQN is omitted.
                </para>
                <para>
                 If different session factories are sharing the same underlying
                 JBoss Cache instance(s) it is <emphasis>strongly encouraged</emphasis>
                 that a distinct Region Prefix be assigned to each. This will
                 help ensure that the different session factories cache their
                 data in different subtrees in JBoss Cache.
                </para>
              </listitem>
              <listitem>
                <para>
                 A <emphasis>Region Name</emphasis>, which is either
                 
                 <itemizedlist>
                    <listitem>
                       <para>
                        any value assigned to a <literal>&lt;cache&gt;</literal> element's 
                        <literal>region</literal> attribute in a class or collection mapping.
                        See <xref linkend="eviction-organization-entity"/> for
                        an example.
                       </para>
                    </listitem>
                    <listitem>
                       <para>
                         Any value assigned to a Hibernate <literal>Query</literal>
                         object's <literal>cacheRegion</literal> property. See 
                         <xref linkend="eviction-organization-query"/> for an 
                         example.
                       </para>
                    </listitem>
                    <listitem>
                       <para>
                         The <emphasis>escaped class name</emphasis> of the type
                         being cached. An <emphasis>escaped class name</emphasis>
                         is simply a fully-qualified class name with any
                         <literal>.</literal> replaced with a <literal>/</literal>
                          -- for example <literal>org/example/Foo</literal>.
                       </para>
                    </listitem>
                 </itemizedlist>
                </para>
              </listitem>
           </itemizedlist>
           
        </sect2>        
        
        <sect2 id="eviction-organization-entity" revision="1">
           <title>Entities</title>
           
           <para>
             The FQN for the cache region where entities of a particular class
             are stored is derived as follows:
           </para>
           <para>
           <literal>/</literal> + <emphasis>Region Prefix</emphasis> + <literal>/</literal> 
           + <emphasis>Region Name</emphasis> + <literal>/ENTITY</literal>
           </para>
           
           <para>
             If no region prefix was specified, the leading <literal>/</literal> and 
             <emphasis>Region Prefix</emphasis> is not included in the FQN.
             So, if <literal>hibernate.cache.region_prefix</literal> was set to 
             "appA" and a class was mapped like this:
           </para>

            <programlisting><![CDATA[<class name="org.example.Foo">
    <cache usage="transactional" region="foo_region"/>
    ....
</class>]]></programlisting>

            <para>
              The FQN of the region where <literal>Foo</literal> entities 
              would be cached is <literal>/appA/foo_region/ENTITY</literal>.
            </para>
           
           <para>
             If the class mapping does not include a <literal>region</literal>
             attribute, the region name is based on the name of the entity
             class, e.g.
           </para>

            <programlisting><![CDATA[<class name="org.example.Bar">
    <cache usage="transactional"/>
    ....
</class>]]></programlisting>

            <para>
              the FQN of the region where <literal>Bar</literal> entities 
              would be cached is <literal>/appA/org/example/Bar/ENTITY</literal>.
            </para>
        </sect2>
        
        <sect2 id="eviction-organization-coll" revision="1">
           <title>Collections</title>
           
           <para>
             The FQN for the cache region where entities of a particular class
             is stored is derived as follows:
           </para>
           <para>
           <literal>/</literal> + <emphasis>Region Prefix</emphasis> + <literal>/</literal> 
           + <emphasis>Region Name</emphasis> + <literal>/COLL</literal>
           </para>
           
           <para>
             So, let's say our example <literal>Foo</literal> entity
             included a collection field <literal>bars</literal> that
             we wanted to cache:
           </para>

            <programlisting><![CDATA[<class name="org.example.Foo">
    <cache usage="transactional"/>
    ....
    <set name="bars">
        <cache usage="transactional" region="foo_region"/>
        <key column="FOO_ID"/>
        <one-to-many class="org.example.Bar"/>
    </set>
</class>]]></programlisting>

            <para>
              The FQN of the region where the collection would be cached
              would be
              <literal>/appA/foo_region/COLL</literal>.
            </para>
            
            <para>
              If the collection's <literal>&lt;cache&gt;</literal> element
              did not include a <literal>region</literal>, the FQN would be
              <literal>/appA/org/example/Foo/COLL</literal>.
            </para>
        </sect2>
        
        <sect2 id="eviction-organization-query" revision="1">
           <title>Queries</title>
           
           <para>
            Queries follow this pattern:
           </para>
           
           <para>
           <literal>/</literal> + <emphasis>Region Prefix</emphasis> + <literal>/</literal> 
           + <emphasis>Region Name</emphasis> + <literal>/QUERY</literal>
           </para>
           
           <para>
             Say we had the following query (again with a region prefix set to
             "appA"):
           </para>
           
        <programlisting><![CDATA[List blogs = sess.createQuery("from Blog blog " + 
                              "where blog.blogger = :blogger")
    .setEntity("blogger", blogger)
    .setMaxResults(15)
    .setCacheable(true)
    .setCacheRegion("frontpages")
    .list();]]></programlisting>
    
            <para>
              The FQN of the region where this query's results would be cached 
              would be <literal>/appA/frontpages/QUERY</literal>.
            </para>
            
            <para>
              If the call to <literal>setCacheRegion("frontpages")</literal>
              were ommitted, the <emphasis>Region Name</emphasis> portion of
              the FQN would be based on a Hibernate class:
              <literal>/appA/org/hibernate/cache/StandardQueryCache/QUERY</literal>
            </para>    
        </sect2>
        
        <sect2 id="eviction-organization-timestamps" revision="1">
           <title>Timestamps</title>
           
           <para>
            Timestamps follow this pattern:
           </para>
           
           <para>
             <literal>/TS/</literal> + <emphasis>Region Prefix</emphasis> + 
             <literal>/org/hibernate/cache/UpdateTimestampsCache</literal> 
           </para>
           
           <para>
             again with a <literal>/</literal> and the <emphasis>Region Prefix</emphasis>
             portion omitted if no region prefix was set. 
           </para>
           
           <para>
             Note that in the timestamps case the special constant ("TS") comes
             at the start of the FQN rather than the end. This makes it easier
             to ensure that eviction is never enabled for the timestamps region.
           </para>
        </sect2>
    </sect1>

    <sect1 id="eviction-organization-example" revision="1">
        <title>Example Configuration</title>
        
        <para>
          So far we've been looking at things in the abstract; let's see an
          example of how this comes together.  In this example, imagine we
          have a Hibernate application with the following characteristics.
          
          <itemizedlist>
            <listitem>
               <para>Query caching is enabled.</para>
            </listitem>
            <listitem>
               <para>
                There is a region prefix set as part of the Hibernate
                configuration: <literal>hibernate.cache.region_prefix==appA</literal>
               </para>
            </listitem>
            <listitem>
               <para>
                Some cachable entities and collections have a region
                name of "reference" set in their Hibernate mapping.
               </para>
            </listitem>
            <listitem>
               <para>
                Some cachable queries have the "reference" region name
                set when they are created.
               </para>
            </listitem>
            <listitem>
               <para>
                Other cachable entities and collections in the 
                <literal>org.example.hibernate</literal> package don't have a 
                region name set in their Hibernate mapping.
               </para>
            </listitem>
            <listitem>
               <para>
                Other cachable queries don't have a region name set when they 
                are created.
               </para>
            </listitem>
          </itemizedlist>
        </para>
        
        <para>
          Let's see a possible eviction configuration for this scenario:
        </para>
        
        <programlisting><![CDATA[<attribute name="EvictionPolicyConfig">
  <config>
         
    <attribute name="wakeUpIntervalSeconds">5</attribute>
    <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
          
    <!--  
      Default region to pick up anything we miss in the more
      specific regions below.
    -->
    <region name="/_default_">
       <attribute name="maxNodes">500</attribute>
       <attribute name="timeToLiveSeconds">300</attribute>
       <attribute name="minTimeToLiveSeconds">120</attribute>
    </region>
            
    <!--  Don't ever evict modification timestamps -->
    <region name="/TS" 
       policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
            
    <!-- Reference data -->
    <region name="/appA/reference">
       <!-- Keep all reference data if it's being used -->
       <attribute name="maxNodes">0</attribute>
       <!-- Keep it around a long time (4 hours) -->
       <attribute name="timeToLiveSeconds">14400</attribute>
       <attribute name="minTimeToLiveSeconds">120</attribute>
    </region>
            
    <!-- Be more aggressive about queries on reference data -->
    <region name="/appA/reference/QUERY">
       <attribute name="maxNodes">200</attribute>
       <attribute name="timeToLiveSeconds">1000</attribute>
       <attribute name="minTimeToLiveSeconds">120</attribute>
    </region>
            
    <!-- 
       Lots of entity instances from this package, but different
       users are unlikely to share them. So, we can cache
       a lot, but evict unused ones pretty quickly.
    -->
    <region name="/appA/org/example/hibernate">
       <attribute name="maxNodes">50000</attribute>
       <attribute name="timeToLiveSeconds">1200</attribute>
       <attribute name="minTimeToLiveSeconds">120</attribute>
    </region>
            
    <!-- Clean up misc queries very promptly -->
    <region name="/appA/org/hibernate/cache/StandardQueryCache">
       <attribute name="maxNodes">200</attribute>
       <attribute name="timeToLiveSeconds">240</attribute>
       <attribute name="minTimeToLiveSeconds">120</attribute>
    </region>
            
  </config>
</attribute>]]></programlisting>
        
        <para>
          Notes on the above:          
          
          <itemizedlist>
            <listitem>
               <para>The <literal>wakeUpIntervalSeconds</literal> configuration
               controls how often the background eviction process kicks
               in to evict nodes.
               </para>
            </listitem>
            <listitem>
               <para>The first <literal>policyClass</literal> configuration
               sets the default eviction policy class to use for each region.
               Here we want to use the standard <literal>LRUPolicy</literal>
               This can be overridden on a per-region basis, as is done
               here for the <literal>/TS</literal> region.</para>
            </listitem>
            <listitem>
               <para>We set up a <literal>/_default_</literal> region. Having
               such a region is a requirement if eviction is used.  Here we
               don't expect any data to end up in this default region, but
               if by mistake someone adds a new entity type that doesn't fall
               into one of our other regions, we may not have a large memory
               budget for it so we evict fairly agressively.
               </para>
            </listitem>
            <listitem>
               <para>Evicting timestamps is forbidden, so we add a 
               <literal>/TS</literal> region that disables it.  Here we
               see how to override the default eviction policy.</para>
            </listitem>
            <listitem>
               <para>
                The <literal>/appA/reference</literal> region covers our 
                reference data entities and collections.  This is our most 
                likely to be reused data, so we configure the cache to be
                very slow to evict it.
               </para>
            </listitem>
            <listitem>
               <para>
                The queries related to our reference data are less likely to
                be reused, and may take up a lot of memory, so we override the
                <literal>/appA/reference</literal> region with a 
                <literal>/appA/reference/QUERY</literal> region that is more
                agressive about eviction.
               </para>
            </listitem>
            <listitem>
               <para>
                The <literal>org.example.hibernate</literal> package includes a 
                lot of entity classes like <literal>Order</literal>, where 
                there are hundreds of thousands of records in the database.  
                These are unlikely to be reused across users, but we have a lot 
                of users and want to be able to cache many of them so a user
                can have fast access to his or her data during the 
                course of their interaction with the system.  So we create a
                <literal>/appA/org/example/hibernate</literal> region 
                with a high <literal>maxNodes</literal> value but a fairly
                low <literal>timeToLiveSeconds</literal>. The low time-to-live
                ensures an <literal>Order</literal> is evicted quickly once a
                user is done with it.
               </para>
            </listitem>
            <listitem>
               <para>Finally, cacheable queries that aren't assigned to
               to the <literal>reference</literal> region will end up in 
               <literal>/appA/org/hibernate/cache/StandardQueryCache</literal>.
               We've elected not to keep these around long at all.
               </para>
            </listitem>
          </itemizedlist>
        </para>
    </sect1>

    <sect1 id="eviction-organization-best" revision="1">
        <title>Best Practices</title>
        
        <para>
          Some best practices to follow:
        </para>
        
        <itemizedlist>
          <listitem>
             <para>
             Set <literal>hibernate.cache.region_prefix</literal> in your
             configuration. It makes it simple to ensure the different session
             factories don't step on each other if they share a JBoss Cache 
             instance.
             </para>
          </listitem>
          <listitem>
             <para>
             Always set up an eviction region for the <literal>/TS</literal> 
             FQN that uses the <literal>NullEvictionPolicy</literal>.  This
             will ensure that timestamps never get evicted.  Even if you are
             not doing query caching or aren't caching timestamps in a 
             particular cache, this is still a good practice, as it costs
             almost nothing and helps to ensure that timestamp eviction doesn't
             slip in unnoticed later.
             </para>
          </listitem>
          <listitem>
             <para>
             Assign a region to your entities, collections and queries rather 
             than relying on class names to compose the FQN. It makes
             it easier to set up eviction, and helps prevent your eviction 
             setup breaking if class names are refactored.
             </para>
          </listitem>
          <listitem>
             <para>
             Assign a different region name to your entities, collections or 
             queries that have different desirable eviction characteristics.
             Put objects like often used reference data in one region, data
             probably only accessed by a single user in another.  Aggressively
             evict the latter region; be less agressive with the former if
             you evict it at all.
             </para>
          </listitem>
          <listitem>
             <para>
             In some cases, there is an external application (i.e. outside
             of Hibernate's control) that can modify data in the database.
             Generally, a Second Level Cache should not be used in this sort
             of case, since it can result in data in the cache being out of
             date with respect to the database. But sometimes application 
             designers can tolerate having out of date data in the cache. In
             this sort of situation, use an <literal>LRUPolicy</literal> with
             a fairly low <literal>maxAgeSeconds</literal>.  This will ensure
             that out-of-date data eventually gets flushed from the cache.
             </para>
          </listitem>
        </itemizedlist>
    </sect1>

</chapter>